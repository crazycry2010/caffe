!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AccuracyLayerTest	test/test_accuracy_layer.cpp	/^  AccuracyLayerTest()$/;"	f	class:caffe::AccuracyLayerTest	access:protected	signature:()
AccuracyLayerTest	test/test_accuracy_layer.cpp	/^class AccuracyLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
AdaDeltaPreSolve	solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::AdaDeltaPreSolve() {$/;"	f	class:caffe::AdaDeltaSolver	signature:()
AdaDeltaSolverTest	test/test_gradient_based_solver.cpp	/^class AdaDeltaSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
AdaGradSolverTest	test/test_gradient_based_solver.cpp	/^class AdaGradSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
AdamPreSolve	solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::AdamPreSolve() {$/;"	f	class:caffe::AdamSolver	signature:()
AdamSolverTest	test/test_gradient_based_solver.cpp	/^class AdamSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
AddDatumVector	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddDatumVector(const vector<Datum>& datum_vector) {$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Datum>& datum_vector)
AddMatVector	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddMatVector(const vector<cv::Mat>& mat_vector,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<cv::Mat>& mat_vector, const vector<int>& labels)
AppendBottom	net.cpp	/^int Net<Dtype>::AppendBottom(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const int layer_id, const int bottom_id, set<string>* available_blobs, map<string, int>* blob_name_to_idx)
AppendParam	net.cpp	/^void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const int layer_id, const int param_id)
AppendTop	net.cpp	/^void Net<Dtype>::AppendTop(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const int layer_id, const int top_id, set<string>* available_blobs, map<string, int>* blob_name_to_idx)
ApplyUpdate	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ApplyUpdate() {$/;"	f	class:caffe::SGDSolver	signature:()
ArgMaxLayerTest	test/test_argmax_layer.cpp	/^  ArgMaxLayerTest()$/;"	f	class:caffe::ArgMaxLayerTest	access:protected	signature:()
ArgMaxLayerTest	test/test_argmax_layer.cpp	/^class ArgMaxLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
BATCH_SIZE	test/test_batch_norm_layer.cpp	15;"	d	file:
Backward	net.cpp	/^void Net<Dtype>::Backward() {$/;"	f	class:caffe::Net	signature:()
BackwardDebugInfo	net.cpp	/^void Net<Dtype>::BackwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net	signature:(const int layer_id)
BackwardFrom	net.cpp	/^void Net<Dtype>::BackwardFrom(int start) {$/;"	f	class:caffe::Net	signature:(int start)
BackwardFromTo	net.cpp	/^void Net<Dtype>::BackwardFromTo(int start, int end) {$/;"	f	class:caffe::Net	signature:(int start, int end)
BackwardTo	net.cpp	/^void Net<Dtype>::BackwardTo(int end) {$/;"	f	class:caffe::Net	signature:(int end)
Backward_cpu	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::BatchReindexLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ContrastiveLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector< Blob<Dtype>*>& bottom)
Backward_cpu	layers/log_layer.cpp	/^void LogLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/power_layer.cpp	/^void PowerLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/silence_layer.cpp	/^void SilenceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SilenceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxWithLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TileLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
Backward_cpu	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
BaseDataLayer	layers/base_data_layer.cpp	/^BaseDataLayer<Dtype>::BaseDataLayer(const LayerParameter& param)$/;"	f	class:caffe::BaseDataLayer	signature:(const LayerParameter& param)
BasePrefetchingDataLayer	layers/base_data_layer.cpp	/^BasePrefetchingDataLayer<Dtype>::BasePrefetchingDataLayer($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const LayerParameter& param)
BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^    BatchNormLayerTest()$/;"	f	class:caffe::BatchNormLayerTest	access:protected	signature:()
BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^  class BatchNormLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^  BatchReindexLayerTest()$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^class BatchReindexLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
BenchmarkTest	test/test_benchmark.cpp	/^class BenchmarkTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Blob	blob.cpp	/^Blob<Dtype>::Blob(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob	signature:(const int num, const int channels, const int height, const int width)
Blob	blob.cpp	/^Blob<Dtype>::Blob(const vector<int>& shape)$/;"	f	class:caffe::Blob	signature:(const vector<int>& shape)
BlobMathTest	test/test_blob.cpp	/^  BlobMathTest()$/;"	f	class:caffe::BlobMathTest	access:protected	signature:()
BlobMathTest	test/test_blob.cpp	/^class BlobMathTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
BlobSimpleTest	test/test_blob.cpp	/^  BlobSimpleTest()$/;"	f	class:caffe::BlobSimpleTest	access:protected	signature:()
BlobSimpleTest	test/test_blob.cpp	/^class BlobSimpleTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
BlockingQueue	util/blocking_queue.cpp	/^BlockingQueue<T>::BlockingQueue()$/;"	f	class:caffe::BlockingQueue	signature:()
Body	data_reader.cpp	/^DataReader::Body::Body(const LayerParameter& param)$/;"	f	class:caffe::DataReader::Body	signature:(const LayerParameter& param)
CAFFE_TEST_CUDA_PROP	test/test_caffe_main.cpp	/^  cudaDeviceProp CAFFE_TEST_CUDA_PROP;$/;"	m	namespace:caffe	file:
CONVERT_LAYER_TRANSFORM_PARAM	util/upgrade_proto.cpp	613;"	d	file:
CPUMathFunctionsTest	test/test_math_functions.cpp	/^class CPUMathFunctionsTest$/;"	c	namespace:caffe	file:	inherits:MathFunctionsTest
CPUStochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class CPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:	inherits:StochasticPoolingLayerTest
CPUTimer	util/benchmark.cpp	/^CPUTimer::CPUTimer() {$/;"	f	class:caffe::CPUTimer	signature:()
CUDNN_STREAMS_PER_GROUP	layers/cudnn_conv_layer.cpp	12;"	d	file:
CVMatToDatum	util/io.cpp	/^void CVMatToDatum(const cv::Mat& cv_img, Datum* datum) {$/;"	f	namespace:caffe	signature:(const cv::Mat& cv_img, Datum* datum)
Caffe	common.cpp	/^Caffe::Caffe()$/;"	f	class:caffe::Caffe	signature:()
CheckAccumulation	test/test_gradient_based_solver.cpp	/^  void CheckAccumulation(const Dtype kLearningRate, const Dtype kWeightDecay,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype kLearningRate, const Dtype kWeightDecay, const Dtype kMomentum, const int kNumIters, const int kIterSize)
CheckBlobEqual	test/test_hdf5_output_layer.cpp	/^  void CheckBlobEqual(const Blob<Dtype>& b1, const Blob<Dtype>& b2);$/;"	p	class:caffe::HDF5OutputLayerTest	file:	access:protected	signature:(const Blob<Dtype>& b1, const Blob<Dtype>& b2)
CheckBlobEqual	test/test_hdf5_output_layer.cpp	/^void HDF5OutputLayerTest<TypeParam>::CheckBlobEqual(const Blob<Dtype>& b1,$/;"	f	class:caffe::HDF5OutputLayerTest	signature:(const Blob<Dtype>& b1, const Blob<Dtype>& b2)
CheckForSignals	util/signal_handler.cpp	/^SolverAction::Enum SignalHandler::CheckForSignals() const {$/;"	f	class:caffe::SignalHandler	signature:() const
CheckLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void CheckLeastSquaresUpdate($/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:( const vector<shared_ptr<Blob<Dtype> > >& updated_params)
CheckSnapshotWritePermissions	solver.cpp	/^void Solver<Dtype>::CheckSnapshotWritePermissions() {$/;"	f	class:caffe::Solver	signature:()
ClearParamDiffs	net.cpp	/^void Net<Dtype>::ClearParamDiffs() {$/;"	f	class:caffe::Net	signature:()
ClipGradients	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ClipGradients() {$/;"	f	class:caffe::SGDSolver	signature:()
CommonTest	test/test_common.cpp	/^class CommonTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
ComputeLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void ComputeLeastSquaresUpdate(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate, const Dtype weight_decay, const Dtype momentum, const int num_iters, vector<shared_ptr<Blob<Dtype> > >* updated_params)
ComputeUpdateValue	solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaDeltaSolver	signature:(int param_id, Dtype rate)
ComputeUpdateValue	solvers/adagrad_solver.cpp	/^void AdaGradSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaGradSolver	signature:(int param_id, Dtype rate)
ComputeUpdateValue	solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdamSolver	signature:(int param_id, Dtype rate)
ComputeUpdateValue	solvers/nesterov_solver.cpp	/^void NesterovSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::NesterovSolver	signature:(int param_id, Dtype rate)
ComputeUpdateValue	solvers/rmsprop_solver.cpp	/^void RMSPropSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::RMSPropSolver	signature:(int param_id, Dtype rate)
ComputeUpdateValue	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::SGDSolver	signature:(int param_id, Dtype rate)
ConcatLayerTest	test/test_concat_layer.cpp	/^  ConcatLayerTest()$/;"	f	class:caffe::ConcatLayerTest	access:protected	signature:()
ConcatLayerTest	test/test_concat_layer.cpp	/^class ConcatLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
ConfigureSplitLayer	util/insert_splits.cpp	/^void ConfigureSplitLayer(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe	signature:(const string& layer_name, const string& blob_name, const int blob_idx, const int split_count, const float loss_weight, LayerParameter* split_layer_param)
ConstantFillerTest	test/test_filler.cpp	/^  ConstantFillerTest()$/;"	f	class:caffe::ConstantFillerTest	access:protected	signature:()
ConstantFillerTest	test/test_filler.cpp	/^class ConstantFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^  ContrastiveLossLayerTest()$/;"	f	class:caffe::ContrastiveLossLayerTest	access:protected	signature:()
ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^class ContrastiveLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
ConvolutionLayerTest	test/test_convolution_layer.cpp	/^  ConvolutionLayerTest()$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:()
ConvolutionLayerTest	test/test_convolution_layer.cpp	/^class ConvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
CopyFrom	blob.cpp	/^void Blob<Dtype>::CopyFrom(const Blob& source, bool copy_diff, bool reshape) {$/;"	f	class:caffe::Blob	signature:(const Blob& source, bool copy_diff, bool reshape)
CopyNetBlobs	test/test_net.cpp	/^  virtual void CopyNetBlobs(const bool copy_diff,$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool copy_diff, vector<shared_ptr<Blob<Dtype> > >* blobs_copy)
CopyNetParams	test/test_net.cpp	/^  virtual void CopyNetParams(const bool copy_diff,$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool copy_diff, vector<shared_ptr<Blob<Dtype> > >* params_copy)
CopyTrainedLayersFrom	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const NetParameter& param) {$/;"	f	class:caffe::Net	signature:(const NetParameter& param)
CopyTrainedLayersFrom	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const string trained_filename) {$/;"	f	class:caffe::Net	signature:(const string trained_filename)
CopyTrainedLayersFromBinaryProto	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromBinaryProto($/;"	f	class:caffe::Net	signature:( const string trained_filename)
CopyTrainedLayersFromHDF5	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromHDF5(const string trained_filename) {$/;"	f	class:caffe::Net	signature:(const string trained_filename)
CrossChannelBackward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelBackward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
CrossChannelForward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelForward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^  CuDNNConvolutionLayerTest()$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:()
CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^class CuDNNConvolutionLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^  CuDNNLRNLayerTest()$/;"	f	class:caffe::CuDNNLRNLayerTest	access:protected	signature:()
CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^class CuDNNLRNLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^  CuDNNNeuronLayerTest()$/;"	f	class:caffe::CuDNNNeuronLayerTest	access:protected	signature:()
CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^class CuDNNNeuronLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^  CuDNNPoolingLayerTest()$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^class CuDNNPoolingLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^  CuDNNSoftmaxLayerTest()$/;"	f	class:caffe::CuDNNSoftmaxLayerTest	access:protected	signature:()
CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^class CuDNNSoftmaxLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
DBTest	test/test_db.cpp	/^  DBTest()$/;"	f	class:caffe::DBTest	access:protected	signature:()
DBTest	test/test_db.cpp	/^class DBTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
DataLayer	layers/data_layer.cpp	/^DataLayer<Dtype>::DataLayer(const LayerParameter& param)$/;"	f	class:caffe::DataLayer	signature:(const LayerParameter& param)
DataLayerSetUp	layers/data_layer.cpp	/^void DataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayerSetUp	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ImageDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayerSetUp	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayerSetUp	layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WindowDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
DataLayerTest	test/test_data_layer.cpp	/^  DataLayerTest()$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
DataLayerTest	test/test_data_layer.cpp	/^class DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
DataReader	data_reader.cpp	/^DataReader::DataReader(const LayerParameter& param)$/;"	f	class:caffe::DataReader	signature:(const LayerParameter& param)
DataTransformTest	test/test_data_transformer.cpp	/^  DataTransformTest()$/;"	f	class:caffe::DataTransformTest	access:protected	signature:()
DataTransformTest	test/test_data_transformer.cpp	/^class DataTransformTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
DataTransformer	data_transformer.cpp	/^DataTransformer<Dtype>::DataTransformer(const TransformationParameter& param,$/;"	f	class:caffe::DataTransformer	signature:(const TransformationParameter& param, Phase phase)
DecodeDatum	util/io.cpp	/^bool DecodeDatum(Datum* datum, bool is_color) {$/;"	f	namespace:caffe	signature:(Datum* datum, bool is_color)
DecodeDatumNative	util/io.cpp	/^bool DecodeDatumNative(Datum* datum) {$/;"	f	namespace:caffe	signature:(Datum* datum)
DecodeDatumToCVMat	util/io.cpp	/^cv::Mat DecodeDatumToCVMat(const Datum& datum, bool is_color) {$/;"	f	namespace:caffe	signature:(const Datum& datum, bool is_color)
DecodeDatumToCVMatNative	util/io.cpp	/^cv::Mat DecodeDatumToCVMatNative(const Datum& datum) {$/;"	f	namespace:caffe	signature:(const Datum& datum)
DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^  DeconvolutionLayerTest()$/;"	f	class:caffe::DeconvolutionLayerTest	access:protected	signature:()
DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^class DeconvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
DeviceQuery	common.cpp	/^void Caffe::DeviceQuery() {$/;"	f	class:caffe::Caffe	signature:()
Dtype	test/test_batch_norm_layer.cpp	/^    typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchNormLayerTest	file:	access:private
Dtype	test/test_batch_reindex_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchReindexLayerTest	file:	access:private
Dtype	test/test_blob.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BlobMathTest	file:	access:private
Dtype	test/test_concat_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConcatLayerTest	file:	access:private
Dtype	test/test_contrastive_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ContrastiveLossLayerTest	file:	access:private
Dtype	test/test_convolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConvolutionLayerTest	file:	access:private
Dtype	test/test_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DataLayerTest	file:	access:private
Dtype	test/test_deconvolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DeconvolutionLayerTest	file:	access:private
Dtype	test/test_eltwise_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EltwiseLayerTest	file:	access:private
Dtype	test/test_embed_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EmbedLayerTest	file:	access:private
Dtype	test/test_euclidean_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EuclideanLossLayerTest	file:	access:private
Dtype	test/test_filter_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FilterLayerTest	file:	access:private
Dtype	test/test_flatten_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FlattenLayerTest	file:	access:private
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaDeltaSolverTest	file:	access:private
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaGradSolverTest	file:	access:private
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdamSolverTest	file:	access:private
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::GradientBasedSolverTest	file:	access:private
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NesterovSolverTest	file:	access:private
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::RMSPropSolverTest	file:	access:private
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SGDSolverTest	file:	access:private
Dtype	test/test_hdf5_output_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5OutputLayerTest	file:	access:private
Dtype	test/test_hdf5data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5DataLayerTest	file:	access:private
Dtype	test/test_hinge_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HingeLossLayerTest	file:	access:private
Dtype	test/test_im2col_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::Im2colLayerTest	file:	access:private
Dtype	test/test_image_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ImageDataLayerTest	file:	access:private
Dtype	test/test_infogain_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InfogainLossLayerTest	file:	access:private
Dtype	test/test_inner_product_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InnerProductLayerTest	file:	access:private
Dtype	test/test_local_conv_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LocalConvLayerTest	file:	access:private
Dtype	test/test_lrn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LRNLayerTest	file:	access:private
Dtype	test/test_math_functions.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MathFunctionsTest	file:	access:private
Dtype	test/test_maxpool_dropout_layers.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MaxPoolingDropoutTest	file:	access:private
Dtype	test/test_memory_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MemoryDataLayerTest	file:	access:private
Dtype	test/test_mvn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MVNLayerTest	file:	access:private
Dtype	test/test_net.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NetTest	file:	access:private
Dtype	test/test_neuron_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NeuronLayerTest	file:	access:private
Dtype	test/test_pooling_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PoolingLayerTest	file:	access:private
Dtype	test/test_power_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PowerLayerTest	file:	access:private
Dtype	test/test_reduction_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReductionLayerTest	file:	access:private
Dtype	test/test_reshape_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReshapeLayerTest	file:	access:private
Dtype	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:private
Dtype	test/test_slice_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SliceLayerTest	file:	access:private
Dtype	test/test_softmax_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxLayerTest	file:	access:private
Dtype	test/test_softmax_with_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxWithLossLayerTest	file:	access:private
Dtype	test/test_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SolverTest	file:	access:private
Dtype	test/test_split_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SplitLayerTest	file:	access:private
Dtype	test/test_spp_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SPPLayerTest	file:	access:private
Dtype	test/test_stochastic_pooling.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::StochasticPoolingLayerTest	file:	access:private
Dtype	test/test_tanh_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TanHLayerTest	file:	access:private
Dtype	test/test_threshold_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ThresholdLayerTest	file:	access:private
Dtype	test/test_tile_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TileLayerTest	file:	access:private
DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^  DummyDataLayerTest()$/;"	f	class:caffe::DummyDataLayerTest	access:protected	signature:()
DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^class DummyDataLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
EltwiseLayerTest	test/test_eltwise_layer.cpp	/^  EltwiseLayerTest()$/;"	f	class:caffe::EltwiseLayerTest	access:protected	signature:()
EltwiseLayerTest	test/test_eltwise_layer.cpp	/^class EltwiseLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
EmbedLayerTest	test/test_embed_layer.cpp	/^  EmbedLayerTest()$/;"	f	class:caffe::EmbedLayerTest	access:protected	signature:()
EmbedLayerTest	test/test_embed_layer.cpp	/^class EmbedLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^  EuclideanLossLayerTest()$/;"	f	class:caffe::EuclideanLossLayerTest	access:protected	signature:()
EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^class EuclideanLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Fill	test/test_data_layer.cpp	/^  void Fill(const bool unique_pixels, DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:(const bool unique_pixels, DataParameter_DB backend)
FillBottoms	test/test_accuracy_layer.cpp	/^  virtual void FillBottoms() {$/;"	f	class:caffe::AccuracyLayerTest	access:protected	signature:()
FillDatum	test/test_data_transformer.cpp	/^void FillDatum(const int label, const int channels, const int height,$/;"	f	namespace:caffe	signature:(const int label, const int channels, const int height, const int width, const bool unique_pixels, Datum * datum)
FilterLayerTest	test/test_filter_layer.cpp	/^  FilterLayerTest()$/;"	f	class:caffe::FilterLayerTest	access:protected	signature:()
FilterLayerTest	test/test_filter_layer.cpp	/^class FilterLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
FilterNet	net.cpp	/^void Net<Dtype>::FilterNet(const NetParameter& param,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, NetParameter* param_filtered)
FilterNetTest	test/test_net.cpp	/^class FilterNetTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
FlattenLayerTest	test/test_flatten_layer.cpp	/^  FlattenLayerTest()$/;"	f	class:caffe::FlattenLayerTest	access:protected	signature:()
FlattenLayerTest	test/test_flatten_layer.cpp	/^class FlattenLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Forward	net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::Forward($/;"	f	class:caffe::Net	signature:( const vector<Blob<Dtype>*> & bottom, Dtype* loss)
Forward	net.cpp	/^string Net<Dtype>::Forward(const string& input_blob_protos, Dtype* loss) {$/;"	f	class:caffe::Net	signature:(const string& input_blob_protos, Dtype* loss)
ForwardDebugInfo	net.cpp	/^void Net<Dtype>::ForwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net	signature:(const int layer_id)
ForwardFrom	net.cpp	/^Dtype Net<Dtype>::ForwardFrom(int start) {$/;"	f	class:caffe::Net	signature:(int start)
ForwardFromTo	net.cpp	/^Dtype Net<Dtype>::ForwardFromTo(int start, int end) {$/;"	f	class:caffe::Net	signature:(int start, int end)
ForwardPrefilled	net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::ForwardPrefilled(Dtype* loss) {$/;"	f	class:caffe::Net	signature:(Dtype* loss)
ForwardTo	net.cpp	/^Dtype Net<Dtype>::ForwardTo(int end) {$/;"	f	class:caffe::Net	signature:(int end)
Forward_cpu	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::AbsValLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AccuracyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::EltwiseLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/log_layer.cpp	/^void LogLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/power_layer.cpp	/^void PowerLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ReductionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Forward_cpu	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
FromProto	blob.cpp	/^void Blob<Dtype>::FromProto(const BlobProto& proto, bool reshape) {$/;"	f	class:caffe::Blob	signature:(const BlobProto& proto, bool reshape)
GPUMathFunctionsTest	test/test_math_functions.cpp	/^class GPUMathFunctionsTest : public MathFunctionsTest<GPUDevice<Dtype> > {$/;"	c	namespace:caffe	file:	inherits:MathFunctionsTest
GPUParams	parallel.cpp	/^GPUParams<Dtype>::GPUParams(shared_ptr<Solver<Dtype> > root_solver, int device)$/;"	f	class:caffe::GPUParams	signature:(shared_ptr<Solver<Dtype> > root_solver, int device)
GPUStochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class GPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:	inherits:StochasticPoolingLayerTest
GaussianFillerTest	test/test_filler.cpp	/^  GaussianFillerTest()$/;"	f	class:caffe::GaussianFillerTest	access:protected	signature:()
GaussianFillerTest	test/test_filler.cpp	/^class GaussianFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
GemmTest	test/test_util_blas.cpp	/^class GemmTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
Generator	common.cpp	/^  Generator() : rng_(new caffe::rng_t(cluster_seedgen())) {}$/;"	f	class:caffe::Caffe::RNG::Generator	access:public	signature:()
Generator	common.cpp	/^  explicit Generator(unsigned int seed) : rng_(new caffe::rng_t(seed)) {}$/;"	f	class:caffe::Caffe::RNG::Generator	access:public	signature:(unsigned int seed)
Generator	common.cpp	/^class Caffe::RNG::Generator {$/;"	c	class:caffe::Caffe::RNG	file:
Get	common.cpp	/^Caffe& Caffe::Get() {$/;"	f	class:caffe::Caffe	signature:()
GetActionFunction	util/signal_handler.cpp	/^ActionCallback SignalHandler::GetActionFunction() {$/;"	f	class:caffe::SignalHandler	signature:()
GetConvolutionLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetConvolutionLayer($/;"	f	namespace:caffe	signature:( const LayerParameter& param)
GetDB	util/db.cpp	/^DB* GetDB(DataParameter::DB backend) {$/;"	f	namespace:caffe::db	signature:(DataParameter::DB backend)
GetDB	util/db.cpp	/^DB* GetDB(const string& backend) {$/;"	f	namespace:caffe::db	signature:(const string& backend)
GetLRNLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetLRNLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
GetLearningRate	solvers/sgd_solver.cpp	/^Dtype SGDSolver<Dtype>::GetLearningRate() {$/;"	f	class:caffe::SGDSolver	signature:()
GetPoolingLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPoolingLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
GetPoolingParam	layers/spp_layer.cpp	/^LayerParameter SPPLayer<Dtype>::GetPoolingParam(const int pyramid_level,$/;"	f	class:caffe::SPPLayer	signature:(const int pyramid_level, const int bottom_h, const int bottom_w, const SPPParameter spp_param)
GetPythonLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPythonLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
GetReLULayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetReLULayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
GetRequestedAction	solver.cpp	/^SolverAction::Enum Solver<Dtype>::GetRequestedAction() {$/;"	f	class:caffe::Solver	signature:()
GetSigmoidLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSigmoidLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
GetSoftmaxLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSoftmaxLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
GetTanHLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetTanHLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
GlobalInit	common.cpp	/^void GlobalInit(int* pargc, char*** pargv) {$/;"	f	namespace:caffe	signature:(int* pargc, char*** pargv)
GotSIGHUP	util/signal_handler.cpp	/^  bool GotSIGHUP() {$/;"	f	namespace:__anon1	signature:()
GotSIGINT	util/signal_handler.cpp	/^  bool GotSIGINT() {$/;"	f	namespace:__anon1	signature:()
GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^  GradientBasedSolverTest() :$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:()
GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^class GradientBasedSolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^  HDF5DataLayerTest()$/;"	f	class:caffe::HDF5DataLayerTest	access:protected	signature:()
HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^class HDF5DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^  HDF5OutputLayerTest()$/;"	f	class:caffe::HDF5OutputLayerTest	access:protected	signature:()
HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^class HDF5OutputLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^  HingeLossLayerTest()$/;"	f	class:caffe::HingeLossLayerTest	access:protected	signature:()
HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^class HingeLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
HookupHandler	util/signal_handler.cpp	/^  void HookupHandler() {$/;"	f	namespace:__anon1	signature:()
INPUT_DATA_SIZE	test/test_batch_norm_layer.cpp	16;"	d	file:
INSTANTIATE_CLASS	blob.cpp	/^INSTANTIATE_CLASS(Blob);$/;"	p	namespace:caffe	file:	signature:(Blob)
INSTANTIATE_CLASS	data_transformer.cpp	/^INSTANTIATE_CLASS(DataTransformer);$/;"	p	namespace:caffe	file:	signature:(DataTransformer)
INSTANTIATE_CLASS	layer.cpp	/^INSTANTIATE_CLASS(Layer);$/;"	p	namespace:caffe	file:	signature:(Layer)
INSTANTIATE_CLASS	layers/absval_layer.cpp	/^INSTANTIATE_CLASS(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
INSTANTIATE_CLASS	layers/accuracy_layer.cpp	/^INSTANTIATE_CLASS(AccuracyLayer);$/;"	p	namespace:caffe	file:	signature:(AccuracyLayer)
INSTANTIATE_CLASS	layers/argmax_layer.cpp	/^INSTANTIATE_CLASS(ArgMaxLayer);$/;"	p	namespace:caffe	file:	signature:(ArgMaxLayer)
INSTANTIATE_CLASS	layers/base_conv_layer.cpp	/^INSTANTIATE_CLASS(BaseConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(BaseConvolutionLayer)
INSTANTIATE_CLASS	layers/base_data_layer.cpp	/^INSTANTIATE_CLASS(BaseDataLayer);$/;"	p	namespace:caffe	file:	signature:(BaseDataLayer)
INSTANTIATE_CLASS	layers/base_data_layer.cpp	/^INSTANTIATE_CLASS(BasePrefetchingDataLayer);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer)
INSTANTIATE_CLASS	layers/batch_norm_layer.cpp	/^INSTANTIATE_CLASS(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
INSTANTIATE_CLASS	layers/batch_reindex_layer.cpp	/^INSTANTIATE_CLASS(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
INSTANTIATE_CLASS	layers/bnll_layer.cpp	/^INSTANTIATE_CLASS(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
INSTANTIATE_CLASS	layers/concat_layer.cpp	/^INSTANTIATE_CLASS(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
INSTANTIATE_CLASS	layers/contrastive_loss_layer.cpp	/^INSTANTIATE_CLASS(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
INSTANTIATE_CLASS	layers/conv_layer.cpp	/^INSTANTIATE_CLASS(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
INSTANTIATE_CLASS	layers/cudnn_conv_layer.cpp	/^INSTANTIATE_CLASS(CuDNNConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNConvolutionLayer)
INSTANTIATE_CLASS	layers/cudnn_lcn_layer.cpp	/^INSTANTIATE_CLASS(CuDNNLCNLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNLCNLayer)
INSTANTIATE_CLASS	layers/cudnn_lrn_layer.cpp	/^INSTANTIATE_CLASS(CuDNNLRNLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNLRNLayer)
INSTANTIATE_CLASS	layers/cudnn_pooling_layer.cpp	/^INSTANTIATE_CLASS(CuDNNPoolingLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNPoolingLayer)
INSTANTIATE_CLASS	layers/cudnn_relu_layer.cpp	/^INSTANTIATE_CLASS(CuDNNReLULayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNReLULayer)
INSTANTIATE_CLASS	layers/cudnn_sigmoid_layer.cpp	/^INSTANTIATE_CLASS(CuDNNSigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNSigmoidLayer)
INSTANTIATE_CLASS	layers/cudnn_softmax_layer.cpp	/^INSTANTIATE_CLASS(CuDNNSoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNSoftmaxLayer)
INSTANTIATE_CLASS	layers/cudnn_tanh_layer.cpp	/^INSTANTIATE_CLASS(CuDNNTanHLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNTanHLayer)
INSTANTIATE_CLASS	layers/data_layer.cpp	/^INSTANTIATE_CLASS(DataLayer);$/;"	p	namespace:caffe	file:	signature:(DataLayer)
INSTANTIATE_CLASS	layers/deconv_layer.cpp	/^INSTANTIATE_CLASS(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
INSTANTIATE_CLASS	layers/dropout_layer.cpp	/^INSTANTIATE_CLASS(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
INSTANTIATE_CLASS	layers/dummy_data_layer.cpp	/^INSTANTIATE_CLASS(DummyDataLayer);$/;"	p	namespace:caffe	file:	signature:(DummyDataLayer)
INSTANTIATE_CLASS	layers/eltwise_layer.cpp	/^INSTANTIATE_CLASS(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
INSTANTIATE_CLASS	layers/embed_layer.cpp	/^INSTANTIATE_CLASS(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
INSTANTIATE_CLASS	layers/euclidean_loss_layer.cpp	/^INSTANTIATE_CLASS(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
INSTANTIATE_CLASS	layers/exp_layer.cpp	/^INSTANTIATE_CLASS(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
INSTANTIATE_CLASS	layers/filter_layer.cpp	/^INSTANTIATE_CLASS(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
INSTANTIATE_CLASS	layers/flatten_layer.cpp	/^INSTANTIATE_CLASS(FlattenLayer);$/;"	p	namespace:caffe	file:	signature:(FlattenLayer)
INSTANTIATE_CLASS	layers/hdf5_data_layer.cpp	/^INSTANTIATE_CLASS(HDF5DataLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer)
INSTANTIATE_CLASS	layers/hdf5_output_layer.cpp	/^INSTANTIATE_CLASS(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
INSTANTIATE_CLASS	layers/hinge_loss_layer.cpp	/^INSTANTIATE_CLASS(HingeLossLayer);$/;"	p	namespace:caffe	file:	signature:(HingeLossLayer)
INSTANTIATE_CLASS	layers/im2col_layer.cpp	/^INSTANTIATE_CLASS(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
INSTANTIATE_CLASS	layers/image_data_layer.cpp	/^INSTANTIATE_CLASS(ImageDataLayer);$/;"	p	namespace:caffe	file:	signature:(ImageDataLayer)
INSTANTIATE_CLASS	layers/infogain_loss_layer.cpp	/^INSTANTIATE_CLASS(InfogainLossLayer);$/;"	p	namespace:caffe	file:	signature:(InfogainLossLayer)
INSTANTIATE_CLASS	layers/inner_product_layer.cpp	/^INSTANTIATE_CLASS(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
INSTANTIATE_CLASS	layers/local_conv.cpp	/^INSTANTIATE_CLASS(LocalConvLayer);$/;"	p	namespace:caffe	file:	signature:(LocalConvLayer)
INSTANTIATE_CLASS	layers/log_layer.cpp	/^INSTANTIATE_CLASS(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
INSTANTIATE_CLASS	layers/loss_layer.cpp	/^INSTANTIATE_CLASS(LossLayer);$/;"	p	namespace:caffe	file:	signature:(LossLayer)
INSTANTIATE_CLASS	layers/lrn_layer.cpp	/^INSTANTIATE_CLASS(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
INSTANTIATE_CLASS	layers/memory_data_layer.cpp	/^INSTANTIATE_CLASS(MemoryDataLayer);$/;"	p	namespace:caffe	file:	signature:(MemoryDataLayer)
INSTANTIATE_CLASS	layers/multinomial_logistic_loss_layer.cpp	/^INSTANTIATE_CLASS(MultinomialLogisticLossLayer);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLossLayer)
INSTANTIATE_CLASS	layers/mvn_layer.cpp	/^INSTANTIATE_CLASS(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
INSTANTIATE_CLASS	layers/neuron_layer.cpp	/^INSTANTIATE_CLASS(NeuronLayer);$/;"	p	namespace:caffe	file:	signature:(NeuronLayer)
INSTANTIATE_CLASS	layers/pooling_layer.cpp	/^INSTANTIATE_CLASS(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
INSTANTIATE_CLASS	layers/power_layer.cpp	/^INSTANTIATE_CLASS(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
INSTANTIATE_CLASS	layers/prelu_layer.cpp	/^INSTANTIATE_CLASS(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
INSTANTIATE_CLASS	layers/reduction_layer.cpp	/^INSTANTIATE_CLASS(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
INSTANTIATE_CLASS	layers/relu_layer.cpp	/^INSTANTIATE_CLASS(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
INSTANTIATE_CLASS	layers/reshape_layer.cpp	/^INSTANTIATE_CLASS(ReshapeLayer);$/;"	p	namespace:caffe	file:	signature:(ReshapeLayer)
INSTANTIATE_CLASS	layers/sigmoid_cross_entropy_loss_layer.cpp	/^INSTANTIATE_CLASS(SigmoidCrossEntropyLossLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer)
INSTANTIATE_CLASS	layers/sigmoid_layer.cpp	/^INSTANTIATE_CLASS(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
INSTANTIATE_CLASS	layers/silence_layer.cpp	/^INSTANTIATE_CLASS(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
INSTANTIATE_CLASS	layers/slice_layer.cpp	/^INSTANTIATE_CLASS(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
INSTANTIATE_CLASS	layers/softmax_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
INSTANTIATE_CLASS	layers/softmax_loss_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
INSTANTIATE_CLASS	layers/split_layer.cpp	/^INSTANTIATE_CLASS(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
INSTANTIATE_CLASS	layers/spp_layer.cpp	/^INSTANTIATE_CLASS(SPPLayer);$/;"	p	namespace:caffe	file:	signature:(SPPLayer)
INSTANTIATE_CLASS	layers/tanh_layer.cpp	/^INSTANTIATE_CLASS(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
INSTANTIATE_CLASS	layers/threshold_layer.cpp	/^INSTANTIATE_CLASS(ThresholdLayer);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer)
INSTANTIATE_CLASS	layers/tile_layer.cpp	/^INSTANTIATE_CLASS(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
INSTANTIATE_CLASS	layers/wangzhy_layer.cpp	/^INSTANTIATE_CLASS(WangzhyLayer);$/;"	p	namespace:caffe	file:	signature:(WangzhyLayer)
INSTANTIATE_CLASS	layers/window_data_layer.cpp	/^INSTANTIATE_CLASS(WindowDataLayer);$/;"	p	namespace:caffe	file:	signature:(WindowDataLayer)
INSTANTIATE_CLASS	net.cpp	/^INSTANTIATE_CLASS(Net);$/;"	p	namespace:caffe	file:	signature:(Net)
INSTANTIATE_CLASS	parallel.cpp	/^INSTANTIATE_CLASS(GPUParams);$/;"	p	namespace:caffe	file:	signature:(GPUParams)
INSTANTIATE_CLASS	parallel.cpp	/^INSTANTIATE_CLASS(P2PSync);$/;"	p	namespace:caffe	file:	signature:(P2PSync)
INSTANTIATE_CLASS	parallel.cpp	/^INSTANTIATE_CLASS(Params);$/;"	p	namespace:caffe	file:	signature:(Params)
INSTANTIATE_CLASS	solver.cpp	/^INSTANTIATE_CLASS(Solver);$/;"	p	namespace:caffe	file:	signature:(Solver)
INSTANTIATE_CLASS	solvers/adadelta_solver.cpp	/^INSTANTIATE_CLASS(AdaDeltaSolver);$/;"	p	namespace:caffe	file:	signature:(AdaDeltaSolver)
INSTANTIATE_CLASS	solvers/adagrad_solver.cpp	/^INSTANTIATE_CLASS(AdaGradSolver);$/;"	p	namespace:caffe	file:	signature:(AdaGradSolver)
INSTANTIATE_CLASS	solvers/adam_solver.cpp	/^INSTANTIATE_CLASS(AdamSolver);$/;"	p	namespace:caffe	file:	signature:(AdamSolver)
INSTANTIATE_CLASS	solvers/nesterov_solver.cpp	/^INSTANTIATE_CLASS(NesterovSolver);$/;"	p	namespace:caffe	file:	signature:(NesterovSolver)
INSTANTIATE_CLASS	solvers/rmsprop_solver.cpp	/^INSTANTIATE_CLASS(RMSPropSolver);$/;"	p	namespace:caffe	file:	signature:(RMSPropSolver)
INSTANTIATE_CLASS	solvers/sgd_solver.cpp	/^INSTANTIATE_CLASS(SGDSolver);$/;"	p	namespace:caffe	file:	signature:(SGDSolver)
IOTest	test/test_io.cpp	/^class IOTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
Im2colLayerTest	test/test_im2col_layer.cpp	/^  Im2colLayerTest()$/;"	f	class:caffe::Im2colLayerTest	access:protected	signature:()
Im2colLayerTest	test/test_im2col_layer.cpp	/^class Im2colLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
ImageDataLayerTest	test/test_image_data_layer.cpp	/^  ImageDataLayerTest()$/;"	f	class:caffe::ImageDataLayerTest	access:protected	signature:()
ImageDataLayerTest	test/test_image_data_layer.cpp	/^class ImageDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape($/;"	f	class:caffe::DataTransformer	signature:( const vector<Datum> & datum_vector)
InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape($/;"	f	class:caffe::DataTransformer	signature:( const vector<cv::Mat> & mat_vector)
InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const Datum& datum) {$/;"	f	class:caffe::DataTransformer	signature:(const Datum& datum)
InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const cv::Mat& cv_img) {$/;"	f	class:caffe::DataTransformer	signature:(const cv::Mat& cv_img)
InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^  InfogainLossLayerTest()$/;"	f	class:caffe::InfogainLossLayerTest	access:protected	signature:()
InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^class InfogainLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Init	net.cpp	/^void Net<Dtype>::Init(const NetParameter& in_param) {$/;"	f	class:caffe::Net	signature:(const NetParameter& in_param)
Init	solver.cpp	/^void Solver<Dtype>::Init(const SolverParameter& param) {$/;"	f	class:caffe::Solver	signature:(const SolverParameter& param)
Init	util/benchmark.cpp	/^void Timer::Init() {$/;"	f	class:caffe::Timer	signature:()
InitDiffDataSharedWeightsNet	test/test_net.cpp	/^  virtual void InitDiffDataSharedWeightsNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
InitDiffDataUnsharedWeightsNet	test/test_net.cpp	/^  virtual void InitDiffDataUnsharedWeightsNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
InitMutex	layer.cpp	/^void Layer<Dtype>::InitMutex() {$/;"	f	class:caffe::Layer	signature:()
InitNetFromProtoString	test/test_net.cpp	/^  virtual void InitNetFromProtoString(const string& proto) {$/;"	f	class:caffe::NetTest	access:protected	signature:(const string& proto)
InitRand	data_transformer.cpp	/^void DataTransformer<Dtype>::InitRand() {$/;"	f	class:caffe::DataTransformer	signature:()
InitReshapableNet	test/test_net.cpp	/^  virtual void InitReshapableNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
InitSharedWeightsNet	test/test_net.cpp	/^  virtual void InitSharedWeightsNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
InitSkipPropNet	test/test_net.cpp	/^  virtual void InitSkipPropNet(bool test_skip_true) {$/;"	f	class:caffe::NetTest	access:protected	signature:(bool test_skip_true)
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) = 0;$/;"	p	class:caffe::GradientBasedSolverTest	file:	access:protected	signature:(const SolverParameter& param)
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaDeltaSolverTest	access:protected	signature:(const SolverParameter& param)
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaGradSolverTest	access:protected	signature:(const SolverParameter& param)
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdamSolverTest	access:protected	signature:(const SolverParameter& param)
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::NesterovSolverTest	access:protected	signature:(const SolverParameter& param)
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::RMSPropSolverTest	access:protected	signature:(const SolverParameter& param)
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::SGDSolverTest	access:protected	signature:(const SolverParameter& param)
InitSolverFromProtoString	test/test_gradient_based_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const string& proto)
InitSolverFromProtoString	test/test_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::SolverTest	access:protected	signature:(const string& proto)
InitTestNets	solver.cpp	/^void Solver<Dtype>::InitTestNets() {$/;"	f	class:caffe::Solver	signature:()
InitTinyNet	test/test_net.cpp	/^  virtual void InitTinyNet(const bool force_backward = false,$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool force_backward = false, const bool accuracy_layer = false)
InitTinyNetEuclidean	test/test_net.cpp	/^  virtual void InitTinyNetEuclidean(const bool force_backward = false) {$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool force_backward = false)
InitTrainNet	solver.cpp	/^void Solver<Dtype>::InitTrainNet() {$/;"	f	class:caffe::Solver	signature:()
InitTrickyNet	test/test_net.cpp	/^  virtual void InitTrickyNet(Dtype* loss_weight = NULL) {$/;"	f	class:caffe::NetTest	access:protected	signature:(Dtype* loss_weight = NULL)
InitUnsharedWeightsNet	test/test_net.cpp	/^  virtual void InitUnsharedWeightsNet(const Dtype* loss_weight = NULL,$/;"	f	class:caffe::NetTest	access:protected	signature:(const Dtype* loss_weight = NULL, const Dtype* midnet_loss_weight = NULL, const bool force_backward = false, const bool bias_term = false, const Dtype blobs_lr_w1 = 1, const Dtype blobs_lr_b1 = 2, const Dtype blobs_lr_w2 = 1, const Dtype blobs_lr_b2 = 2)
InnerProductLayerTest	test/test_inner_product_layer.cpp	/^  InnerProductLayerTest()$/;"	f	class:caffe::InnerProductLayerTest	access:protected	signature:()
InnerProductLayerTest	test/test_inner_product_layer.cpp	/^class InnerProductLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
InputDebugInfo	net.cpp	/^void Net<Dtype>::InputDebugInfo(const int input_id) {$/;"	f	class:caffe::Net	signature:(const int input_id)
InsertSplits	util/insert_splits.cpp	/^void InsertSplits(const NetParameter& param, NetParameter* param_split) {$/;"	f	namespace:caffe	signature:(const NetParameter& param, NetParameter* param_split)
InternalThreadEntry	data_reader.cpp	/^void DataReader::Body::InternalThreadEntry() {$/;"	f	class:caffe::DataReader::Body	signature:()
InternalThreadEntry	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::BasePrefetchingDataLayer	signature:()
InternalThreadEntry	parallel.cpp	/^void P2PSync<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::P2PSync	signature:()
InternalThreadEntry	test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadA	file:	access:private	signature:()
InternalThreadEntry	test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadB	file:	access:private	signature:()
InternalThreadTest	test/test_internal_thread.cpp	/^class InternalThreadTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
LMDB_MAP_SIZE	util/db_lmdb.cpp	/^const size_t LMDB_MAP_SIZE = 1099511627776;  \/\/ 1 TB$/;"	m	namespace:caffe::db	file:
LRNLayerTest	test/test_lrn_layer.cpp	/^  LRNLayerTest()$/;"	f	class:caffe::LRNLayerTest	access:protected	signature:()
LRNLayerTest	test/test_lrn_layer.cpp	/^class LRNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
LayerFactoryTest	test/test_layer_factory.cpp	/^class LayerFactoryTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
LayerSetUp	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/base_data_layer.cpp	/^void BaseDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::CuDNNConvolutionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/log_layer.cpp	/^void LogLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/loss_layer.cpp	/^void LossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/power_layer.cpp	/^void PowerLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LayerSetUp	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
LoadHDF5FileData	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LoadHDF5FileData(const char* filename) {$/;"	f	class:caffe::HDF5DataLayer	signature:(const char* filename)
LocalConvLayerTest	test/test_local_conv_layer.cpp	/^  LocalConvLayerTest()$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:()
LocalConvLayerTest	test/test_local_conv_layer.cpp	/^class LocalConvLayerTest : public MultiDeviceTest<TypeParam>$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Lock	layer.cpp	/^void Layer<Dtype>::Lock() {$/;"	f	class:caffe::Layer	signature:()
LogBottomInit	test/test_neuron_layer.cpp	/^  void LogBottomInit() {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:()
MSRAFillerTest	test/test_filler.cpp	/^  MSRAFillerTest()$/;"	f	class:caffe::MSRAFillerTest	access:protected	signature:()
MSRAFillerTest	test/test_filler.cpp	/^class MSRAFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
MVNLayerTest	test/test_mvn_layer.cpp	/^  MVNLayerTest()$/;"	f	class:caffe::MVNLayerTest	access:protected	signature:()
MVNLayerTest	test/test_mvn_layer.cpp	/^class MVNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
MakeReferenceTop	test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:(Blob<Dtype>* top)
MakeReferenceTop	test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:(Blob<Dtype>* top)
MakeReferenceTop	test/test_local_conv_layer.cpp	/^  MakeReferenceTop(Blob<Dtype>* top)$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:(Blob<Dtype>* top)
MathFunctionsTest	test/test_math_functions.cpp	/^  MathFunctionsTest()$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:()
MathFunctionsTest	test/test_math_functions.cpp	/^class MathFunctionsTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^  MaxPoolingDropoutTest()$/;"	f	class:caffe::MaxPoolingDropoutTest	access:protected	signature:()
MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^class MaxPoolingDropoutTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^  MemoryDataLayerTest()$/;"	f	class:caffe::MemoryDataLayerTest	access:protected	signature:()
MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^class MemoryDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
MicroSeconds	util/benchmark.cpp	/^float CPUTimer::MicroSeconds() {$/;"	f	class:caffe::CPUTimer	signature:()
MicroSeconds	util/benchmark.cpp	/^float Timer::MicroSeconds() {$/;"	f	class:caffe::Timer	signature:()
MilliSeconds	util/benchmark.cpp	/^float CPUTimer::MilliSeconds() {$/;"	f	class:caffe::CPUTimer	signature:()
MilliSeconds	util/benchmark.cpp	/^float Timer::MilliSeconds() {$/;"	f	class:caffe::Timer	signature:()
MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^  MultinomialLogisticLossLayerTest()$/;"	f	class:caffe::MultinomialLogisticLossLayerTest	access:protected	signature:()
MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^class MultinomialLogisticLossLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
NesterovSolverTest	test/test_gradient_based_solver.cpp	/^class NesterovSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
Net	net.cpp	/^Net<Dtype>::Net(const NetParameter& param, const Net* root_net)$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const Net* root_net)
Net	net.cpp	/^Net<Dtype>::Net(const string& param_file, Phase phase, const Net* root_net)$/;"	f	class:caffe::Net	signature:(const string& param_file, Phase phase, const Net* root_net)
NetNeedsDataUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsDataUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
NetNeedsUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
NetNeedsV0ToV1Upgrade	util/upgrade_proto.cpp	/^bool NetNeedsV0ToV1Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
NetNeedsV1ToV2Upgrade	util/upgrade_proto.cpp	/^bool NetNeedsV1ToV2Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
NetTest	test/test_net.cpp	/^  NetTest() : seed_(1701) {}$/;"	f	class:caffe::NetTest	access:protected	signature:()
NetTest	test/test_net.cpp	/^class NetTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
NetUpgradeTest	test/test_upgrade_proto.cpp	/^class NetUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
NeuronLayerTest	test/test_neuron_layer.cpp	/^  NeuronLayerTest()$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:()
NeuronLayerTest	test/test_neuron_layer.cpp	/^class NeuronLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
NewCursor	util/db_lmdb.cpp	/^LMDBCursor* LMDB::NewCursor() {$/;"	f	class:caffe::db::LMDB	signature:()
NewTransaction	util/db_lmdb.cpp	/^LMDBTransaction* LMDB::NewTransaction() {$/;"	f	class:caffe::db::LMDB	signature:()
Normalize	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Normalize(int param_id) {$/;"	f	class:caffe::SGDSolver	signature:(int param_id)
NumSequenceMatches	test/test_data_transformer.cpp	/^  int NumSequenceMatches(const TransformationParameter transform_param,$/;"	f	class:caffe::DataTransformTest	access:protected	signature:(const TransformationParameter transform_param, const Datum& datum, Phase phase)
Op	parallel.cpp	/^enum Op {$/;"	g	namespace:caffe	file:
Open	util/db_leveldb.cpp	/^void LevelDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LevelDB	signature:(const string& source, Mode mode)
Open	util/db_lmdb.cpp	/^void LMDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LMDB	signature:(const string& source, Mode mode)
P2PSync	parallel.cpp	/^P2PSync<Dtype>::P2PSync(shared_ptr<Solver<Dtype> > root_solver,$/;"	f	class:caffe::P2PSync	signature:(shared_ptr<Solver<Dtype> > root_solver, P2PSync<Dtype>* parent, const SolverParameter& param)
PaddingLayerUpgradeTest	test/test_upgrade_proto.cpp	/^class PaddingLayerUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
Params	parallel.cpp	/^Params<Dtype>::Params(shared_ptr<Solver<Dtype> > root_solver)$/;"	f	class:caffe::Params	signature:(shared_ptr<Solver<Dtype> > root_solver)
PlatformTest	test/test_platform.cpp	/^class PlatformTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
PoolingLayerTest	test/test_pooling_layer.cpp	/^  PoolingLayerTest()$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
PoolingLayerTest	test/test_pooling_layer.cpp	/^class PoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
PositiveUnitballFillerTest	test/test_filler.cpp	/^  PositiveUnitballFillerTest()$/;"	f	class:caffe::PositiveUnitballFillerTest	access:protected	signature:()
PositiveUnitballFillerTest	test/test_filler.cpp	/^class PositiveUnitballFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
PowerLayerTest	test/test_power_layer.cpp	/^  PowerLayerTest()$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:()
PowerLayerTest	test/test_power_layer.cpp	/^class PowerLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
PreSolve	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::PreSolve() {$/;"	f	class:caffe::SGDSolver	signature:()
PrefetchRand	layers/window_data_layer.cpp	/^unsigned int WindowDataLayer<Dtype>::PrefetchRand() {$/;"	f	class:caffe::WindowDataLayer	signature:()
ProtoTest	test/test_protobuf.cpp	/^class ProtoTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
Put	util/db_lmdb.cpp	/^void LMDBTransaction::Put(const string& key, const string& value) {$/;"	f	class:caffe::db::LMDBTransaction	signature:(const string& key, const string& value)
QueuePair	data_reader.cpp	/^DataReader::QueuePair::QueuePair(int size) {$/;"	f	class:caffe::DataReader::QueuePair	signature:(int size)
REGISTER_LAYER_CLASS	layers/absval_layer.cpp	/^REGISTER_LAYER_CLASS(AbsVal);$/;"	p	namespace:caffe	file:	signature:(AbsVal)
REGISTER_LAYER_CLASS	layers/accuracy_layer.cpp	/^REGISTER_LAYER_CLASS(Accuracy);$/;"	p	namespace:caffe	file:	signature:(Accuracy)
REGISTER_LAYER_CLASS	layers/argmax_layer.cpp	/^REGISTER_LAYER_CLASS(ArgMax);$/;"	p	namespace:caffe	file:	signature:(ArgMax)
REGISTER_LAYER_CLASS	layers/batch_norm_layer.cpp	/^REGISTER_LAYER_CLASS(BatchNorm);$/;"	p	namespace:caffe	file:	signature:(BatchNorm)
REGISTER_LAYER_CLASS	layers/batch_reindex_layer.cpp	/^REGISTER_LAYER_CLASS(BatchReindex);$/;"	p	namespace:caffe	file:	signature:(BatchReindex)
REGISTER_LAYER_CLASS	layers/bnll_layer.cpp	/^REGISTER_LAYER_CLASS(BNLL);$/;"	p	namespace:caffe	file:	signature:(BNLL)
REGISTER_LAYER_CLASS	layers/concat_layer.cpp	/^REGISTER_LAYER_CLASS(Concat);$/;"	p	namespace:caffe	file:	signature:(Concat)
REGISTER_LAYER_CLASS	layers/contrastive_loss_layer.cpp	/^REGISTER_LAYER_CLASS(ContrastiveLoss);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLoss)
REGISTER_LAYER_CLASS	layers/data_layer.cpp	/^REGISTER_LAYER_CLASS(Data);$/;"	p	namespace:caffe	file:	signature:(Data)
REGISTER_LAYER_CLASS	layers/deconv_layer.cpp	/^REGISTER_LAYER_CLASS(Deconvolution);$/;"	p	namespace:caffe	file:	signature:(Deconvolution)
REGISTER_LAYER_CLASS	layers/dropout_layer.cpp	/^REGISTER_LAYER_CLASS(Dropout);$/;"	p	namespace:caffe	file:	signature:(Dropout)
REGISTER_LAYER_CLASS	layers/dummy_data_layer.cpp	/^REGISTER_LAYER_CLASS(DummyData);$/;"	p	namespace:caffe	file:	signature:(DummyData)
REGISTER_LAYER_CLASS	layers/eltwise_layer.cpp	/^REGISTER_LAYER_CLASS(Eltwise);$/;"	p	namespace:caffe	file:	signature:(Eltwise)
REGISTER_LAYER_CLASS	layers/embed_layer.cpp	/^REGISTER_LAYER_CLASS(Embed);$/;"	p	namespace:caffe	file:	signature:(Embed)
REGISTER_LAYER_CLASS	layers/euclidean_loss_layer.cpp	/^REGISTER_LAYER_CLASS(EuclideanLoss);$/;"	p	namespace:caffe	file:	signature:(EuclideanLoss)
REGISTER_LAYER_CLASS	layers/exp_layer.cpp	/^REGISTER_LAYER_CLASS(Exp);$/;"	p	namespace:caffe	file:	signature:(Exp)
REGISTER_LAYER_CLASS	layers/filter_layer.cpp	/^REGISTER_LAYER_CLASS(Filter);$/;"	p	namespace:caffe	file:	signature:(Filter)
REGISTER_LAYER_CLASS	layers/flatten_layer.cpp	/^REGISTER_LAYER_CLASS(Flatten);$/;"	p	namespace:caffe	file:	signature:(Flatten)
REGISTER_LAYER_CLASS	layers/hdf5_data_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Data);$/;"	p	namespace:caffe	file:	signature:(HDF5Data)
REGISTER_LAYER_CLASS	layers/hdf5_output_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Output);$/;"	p	namespace:caffe	file:	signature:(HDF5Output)
REGISTER_LAYER_CLASS	layers/hinge_loss_layer.cpp	/^REGISTER_LAYER_CLASS(HingeLoss);$/;"	p	namespace:caffe	file:	signature:(HingeLoss)
REGISTER_LAYER_CLASS	layers/im2col_layer.cpp	/^REGISTER_LAYER_CLASS(Im2col);$/;"	p	namespace:caffe	file:	signature:(Im2col)
REGISTER_LAYER_CLASS	layers/image_data_layer.cpp	/^REGISTER_LAYER_CLASS(ImageData);$/;"	p	namespace:caffe	file:	signature:(ImageData)
REGISTER_LAYER_CLASS	layers/infogain_loss_layer.cpp	/^REGISTER_LAYER_CLASS(InfogainLoss);$/;"	p	namespace:caffe	file:	signature:(InfogainLoss)
REGISTER_LAYER_CLASS	layers/inner_product_layer.cpp	/^REGISTER_LAYER_CLASS(InnerProduct);$/;"	p	namespace:caffe	file:	signature:(InnerProduct)
REGISTER_LAYER_CLASS	layers/local_conv.cpp	/^REGISTER_LAYER_CLASS(LocalConv);$/;"	p	namespace:caffe	file:	signature:(LocalConv)
REGISTER_LAYER_CLASS	layers/log_layer.cpp	/^REGISTER_LAYER_CLASS(Log);$/;"	p	namespace:caffe	file:	signature:(Log)
REGISTER_LAYER_CLASS	layers/memory_data_layer.cpp	/^REGISTER_LAYER_CLASS(MemoryData);$/;"	p	namespace:caffe	file:	signature:(MemoryData)
REGISTER_LAYER_CLASS	layers/multinomial_logistic_loss_layer.cpp	/^REGISTER_LAYER_CLASS(MultinomialLogisticLoss);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLoss)
REGISTER_LAYER_CLASS	layers/mvn_layer.cpp	/^REGISTER_LAYER_CLASS(MVN);$/;"	p	namespace:caffe	file:	signature:(MVN)
REGISTER_LAYER_CLASS	layers/power_layer.cpp	/^REGISTER_LAYER_CLASS(Power);$/;"	p	namespace:caffe	file:	signature:(Power)
REGISTER_LAYER_CLASS	layers/prelu_layer.cpp	/^REGISTER_LAYER_CLASS(PReLU);$/;"	p	namespace:caffe	file:	signature:(PReLU)
REGISTER_LAYER_CLASS	layers/reduction_layer.cpp	/^REGISTER_LAYER_CLASS(Reduction);$/;"	p	namespace:caffe	file:	signature:(Reduction)
REGISTER_LAYER_CLASS	layers/reshape_layer.cpp	/^REGISTER_LAYER_CLASS(Reshape);$/;"	p	namespace:caffe	file:	signature:(Reshape)
REGISTER_LAYER_CLASS	layers/sigmoid_cross_entropy_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SigmoidCrossEntropyLoss);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLoss)
REGISTER_LAYER_CLASS	layers/silence_layer.cpp	/^REGISTER_LAYER_CLASS(Silence);$/;"	p	namespace:caffe	file:	signature:(Silence)
REGISTER_LAYER_CLASS	layers/slice_layer.cpp	/^REGISTER_LAYER_CLASS(Slice);$/;"	p	namespace:caffe	file:	signature:(Slice)
REGISTER_LAYER_CLASS	layers/softmax_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SoftmaxWithLoss);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLoss)
REGISTER_LAYER_CLASS	layers/split_layer.cpp	/^REGISTER_LAYER_CLASS(Split);$/;"	p	namespace:caffe	file:	signature:(Split)
REGISTER_LAYER_CLASS	layers/spp_layer.cpp	/^REGISTER_LAYER_CLASS(SPP);$/;"	p	namespace:caffe	file:	signature:(SPP)
REGISTER_LAYER_CLASS	layers/threshold_layer.cpp	/^REGISTER_LAYER_CLASS(Threshold);$/;"	p	namespace:caffe	file:	signature:(Threshold)
REGISTER_LAYER_CLASS	layers/tile_layer.cpp	/^REGISTER_LAYER_CLASS(Tile);$/;"	p	namespace:caffe	file:	signature:(Tile)
REGISTER_LAYER_CLASS	layers/wangzhy_layer.cpp	/^REGISTER_LAYER_CLASS(Wangzhy);$/;"	p	namespace:caffe	file:	signature:(Wangzhy)
REGISTER_LAYER_CLASS	layers/window_data_layer.cpp	/^REGISTER_LAYER_CLASS(WindowData);$/;"	p	namespace:caffe	file:	signature:(WindowData)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Convolution, GetConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(Convolution, GetConvolutionLayer)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(LRN, GetLRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRN, GetLRNLayer)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Pooling, GetPoolingLayer);$/;"	p	namespace:caffe	file:	signature:(Pooling, GetPoolingLayer)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Python, GetPythonLayer);$/;"	p	namespace:caffe	file:	signature:(Python, GetPythonLayer)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(ReLU, GetReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLU, GetReLULayer)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Sigmoid, GetSigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(Sigmoid, GetSigmoidLayer)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Softmax, GetSoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(Softmax, GetSoftmaxLayer)
REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(TanH, GetTanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanH, GetTanHLayer)
REGISTER_SOLVER_CLASS	solvers/adadelta_solver.cpp	/^REGISTER_SOLVER_CLASS(AdaDelta);$/;"	p	namespace:caffe	file:	signature:(AdaDelta)
REGISTER_SOLVER_CLASS	solvers/adagrad_solver.cpp	/^REGISTER_SOLVER_CLASS(AdaGrad);$/;"	p	namespace:caffe	file:	signature:(AdaGrad)
REGISTER_SOLVER_CLASS	solvers/adam_solver.cpp	/^REGISTER_SOLVER_CLASS(Adam);$/;"	p	namespace:caffe	file:	signature:(Adam)
REGISTER_SOLVER_CLASS	solvers/nesterov_solver.cpp	/^REGISTER_SOLVER_CLASS(Nesterov);$/;"	p	namespace:caffe	file:	signature:(Nesterov)
REGISTER_SOLVER_CLASS	solvers/rmsprop_solver.cpp	/^REGISTER_SOLVER_CLASS(RMSProp);$/;"	p	namespace:caffe	file:	signature:(RMSProp)
REGISTER_SOLVER_CLASS	solvers/sgd_solver.cpp	/^REGISTER_SOLVER_CLASS(SGD);$/;"	p	namespace:caffe	file:	signature:(SGD)
RMSPropSolverTest	test/test_gradient_based_solver.cpp	/^class RMSPropSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
RNG	common.cpp	/^Caffe::RNG::RNG() : generator_(new Generator()) { }$/;"	f	class:caffe::Caffe::RNG	signature:()
RNG	common.cpp	/^Caffe::RNG::RNG(unsigned int seed) : generator_(new Generator(seed)) { }$/;"	f	class:caffe::Caffe::RNG	signature:(unsigned int seed)
Rand	data_transformer.cpp	/^int DataTransformer<Dtype>::Rand(int n) {$/;"	f	class:caffe::DataTransformer	signature:(int n)
RandomNumberGeneratorTest	test/test_random_number_generator.cpp	/^  RandomNumberGeneratorTest()$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:()
RandomNumberGeneratorTest	test/test_random_number_generator.cpp	/^class RandomNumberGeneratorTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
ReadFileToDatum	util/io.cpp	/^bool ReadFileToDatum(const string& filename, const int label,$/;"	f	namespace:caffe	signature:(const string& filename, const int label, Datum* datum)
ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename) {$/;"	f	namespace:caffe	signature:(const string& filename)
ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe	signature:(const string& filename, const bool is_color)
ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe	signature:(const string& filename, const int height, const int width)
ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe	signature:(const string& filename, const int height, const int width, const bool is_color)
ReadImageToDatum	util/io.cpp	/^bool ReadImageToDatum(const string& filename, const int label,$/;"	f	namespace:caffe	signature:(const string& filename, const int label, const int height, const int width, const bool is_color, const std::string & encoding, Datum* datum)
ReadImageToDatumReference	test/test_io.cpp	/^bool ReadImageToDatumReference(const string& filename, const int label,$/;"	f	namespace:caffe	signature:(const string& filename, const int label, const int height, const int width, const bool is_color, Datum* datum)
ReadNetParamsFromBinaryFileOrDie	util/upgrade_proto.cpp	/^void ReadNetParamsFromBinaryFileOrDie(const string& param_file,$/;"	f	namespace:caffe	signature:(const string& param_file, NetParameter* param)
ReadNetParamsFromTextFileOrDie	util/upgrade_proto.cpp	/^void ReadNetParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe	signature:(const string& param_file, NetParameter* param)
ReadProtoFromBinaryFile	util/io.cpp	/^bool ReadProtoFromBinaryFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe	signature:(const char* filename, Message* proto)
ReadProtoFromTextFile	util/io.cpp	/^bool ReadProtoFromTextFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe	signature:(const char* filename, Message* proto)
ReadSolverParamsFromTextFileOrDie	util/upgrade_proto.cpp	/^void ReadSolverParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe	signature:(const string& param_file, SolverParameter* param)
ReduceBottomBlobSize	test/test_slice_layer.cpp	/^  virtual void ReduceBottomBlobSize() {$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
ReductionLayerTest	test/test_reduction_layer.cpp	/^  ReductionLayerTest()$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:()
ReductionLayerTest	test/test_reduction_layer.cpp	/^class ReductionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
ReferenceHammingDistance	test/test_math_functions.cpp	/^  int ReferenceHammingDistance(const int n, const Dtype* x, const Dtype* y) {$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:(const int n, const Dtype* x, const Dtype* y)
ReferenceLRNForward	test/test_lrn_layer.cpp	/^  void ReferenceLRNForward(const Blob<Dtype>& blob_bottom,$/;"	p	class:caffe::CuDNNLRNLayerTest	file:	access:protected	signature:(const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param, Blob<Dtype>* blob_top)
ReferenceLRNForward	test/test_lrn_layer.cpp	/^  void ReferenceLRNForward(const Blob<Dtype>& blob_bottom,$/;"	p	class:caffe::LRNLayerTest	file:	access:protected	signature:(const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param, Blob<Dtype>* blob_top)
ReferenceLRNForward	test/test_lrn_layer.cpp	/^void CuDNNLRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::CuDNNLRNLayerTest	signature:( const Blob<TypeParam>& blob_bottom, const LayerParameter& layer_param, Blob<TypeParam>* blob_top)
ReferenceLRNForward	test/test_lrn_layer.cpp	/^void LRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::LRNLayerTest	signature:( const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param, Blob<Dtype>* blob_top)
Regularize	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Regularize(int param_id) {$/;"	f	class:caffe::SGDSolver	signature:(int param_id)
Reset	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Reset(Dtype* data, Dtype* labels, int n) {$/;"	f	class:caffe::MemoryDataLayer	signature:(Dtype* data, Dtype* labels, int n)
Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const BlobShape& shape) {$/;"	f	class:caffe::Blob	signature:(const BlobShape& shape)
Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob	signature:(const int num, const int channels, const int height, const int width)
Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const vector<int>& shape) {$/;"	f	class:caffe::Blob	signature:(const vector<int>& shape)
Reshape	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Reshape($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::Reshape($/;"	f	class:caffe::CuDNNConvolutionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Reshape($/;"	f	class:caffe::EuclideanLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Reshape($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/loss_layer.cpp	/^void LossLayer<Dtype>::Reshape($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Reshape($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/neuron_layer.cpp	/^void NeuronLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NeuronLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Reshape($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
Reshape	net.cpp	/^void Net<Dtype>::Reshape() {$/;"	f	class:caffe::Net	signature:()
ReshapeLayerTest	test/test_reshape_layer.cpp	/^  ReshapeLayerTest()$/;"	f	class:caffe::ReshapeLayerTest	access:protected	signature:()
ReshapeLayerTest	test/test_reshape_layer.cpp	/^class ReshapeLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
ReshapeLike	blob.cpp	/^void Blob<Dtype>::ReshapeLike(const Blob<Dtype>& other) {$/;"	f	class:caffe::Blob	signature:(const Blob<Dtype>& other)
Restore	solver.cpp	/^void Solver<Dtype>::Restore(const char* state_file) {$/;"	f	class:caffe::Solver	signature:(const char* state_file)
RestoreSolverStateFromBinaryProto	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromBinaryProto($/;"	f	class:caffe::SGDSolver	signature:( const string& state_file)
RestoreSolverStateFromHDF5	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromHDF5(const string& state_file) {$/;"	f	class:caffe::SGDSolver	signature:(const string& state_file)
RngBernoulliChecks	test/test_random_number_generator.cpp	/^  void RngBernoulliChecks(const Dtype p, const void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype p, const void* cpu_data)
RngBernoulliFill	test/test_random_number_generator.cpp	/^  void RngBernoulliFill(const Dtype p, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype p, void* cpu_data)
RngGaussianChecks	test/test_random_number_generator.cpp	/^  void RngGaussianChecks(const Dtype mu, const Dtype sigma,$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype mu, const Dtype sigma, const void* cpu_data, const Dtype sparse_p = 0)
RngGaussianFill	test/test_random_number_generator.cpp	/^  void RngGaussianFill(const Dtype mu, const Dtype sigma, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype mu, const Dtype sigma, void* cpu_data)
RngGaussianFillGPU	test/test_random_number_generator.cpp	/^  void RngGaussianFillGPU(const Dtype mu, const Dtype sigma, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype mu, const Dtype sigma, void* gpu_data)
RngUniformChecks	test/test_random_number_generator.cpp	/^  void RngUniformChecks(const Dtype lower, const Dtype upper,$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype lower, const Dtype upper, const void* cpu_data, const Dtype sparse_p = 0)
RngUniformFill	test/test_random_number_generator.cpp	/^  void RngUniformFill(const Dtype lower, const Dtype upper, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype lower, const Dtype upper, void* cpu_data)
RngUniformFillGPU	test/test_random_number_generator.cpp	/^  void RngUniformFillGPU(const Dtype lower, const Dtype upper, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype lower, const Dtype upper, void* gpu_data)
RngUniformIntFillGPU	test/test_random_number_generator.cpp	/^  void RngUniformIntFillGPU(void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(void* gpu_data)
RunFilterNetTest	test/test_net.cpp	/^  void RunFilterNetTest($/;"	f	class:caffe::FilterNetTest	access:protected	signature:( const string& input_param_string, const string& filtered_param_string)
RunInsertionTest	test/test_split_layer.cpp	/^  void RunInsertionTest($/;"	f	class:caffe::SplitLayerInsertionTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
RunLeastSquaresSolver	test/test_gradient_based_solver.cpp	/^  string RunLeastSquaresSolver(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate, const Dtype weight_decay, const Dtype momentum, const int num_iters, const int iter_size = 1, const int devices = 1, const bool snapshot = false, const char* from_snapshot = NULL)
RunPaddingUpgradeTest	test/test_upgrade_proto.cpp	/^  void RunPaddingUpgradeTest($/;"	f	class:caffe::PaddingLayerUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
RunSolverTypeUpgradeTest	test/test_upgrade_proto.cpp	/^  void RunSolverTypeUpgradeTest($/;"	f	class:caffe::SolverTypeUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
RunV0UpgradeTest	test/test_upgrade_proto.cpp	/^  void RunV0UpgradeTest($/;"	f	class:caffe::NetUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
RunV1UpgradeTest	test/test_upgrade_proto.cpp	/^  void RunV1UpgradeTest($/;"	f	class:caffe::NetUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
SGDSolverTest	test/test_gradient_based_solver.cpp	/^class SGDSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
SPPLayerTest	test/test_spp_layer.cpp	/^  SPPLayerTest()$/;"	f	class:caffe::SPPLayerTest	access:protected	signature:()
SPPLayerTest	test/test_spp_layer.cpp	/^class SPPLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
STUB_GPU	layers/absval_layer.cpp	/^STUB_GPU(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
STUB_GPU	layers/batch_norm_layer.cpp	/^STUB_GPU(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
STUB_GPU	layers/batch_reindex_layer.cpp	/^STUB_GPU(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
STUB_GPU	layers/bnll_layer.cpp	/^STUB_GPU(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
STUB_GPU	layers/concat_layer.cpp	/^STUB_GPU(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
STUB_GPU	layers/contrastive_loss_layer.cpp	/^STUB_GPU(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
STUB_GPU	layers/conv_layer.cpp	/^STUB_GPU(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
STUB_GPU	layers/deconv_layer.cpp	/^STUB_GPU(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
STUB_GPU	layers/dropout_layer.cpp	/^STUB_GPU(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
STUB_GPU	layers/eltwise_layer.cpp	/^STUB_GPU(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
STUB_GPU	layers/embed_layer.cpp	/^STUB_GPU(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
STUB_GPU	layers/euclidean_loss_layer.cpp	/^STUB_GPU(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
STUB_GPU	layers/exp_layer.cpp	/^STUB_GPU(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
STUB_GPU	layers/filter_layer.cpp	/^STUB_GPU(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
STUB_GPU	layers/hdf5_output_layer.cpp	/^STUB_GPU(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
STUB_GPU	layers/im2col_layer.cpp	/^STUB_GPU(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
STUB_GPU	layers/inner_product_layer.cpp	/^STUB_GPU(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
STUB_GPU	layers/local_conv.cpp	/^STUB_GPU(LocalConvLayer);$/;"	p	namespace:caffe	file:	signature:(LocalConvLayer)
STUB_GPU	layers/log_layer.cpp	/^STUB_GPU(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
STUB_GPU	layers/lrn_layer.cpp	/^STUB_GPU(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
STUB_GPU	layers/mvn_layer.cpp	/^STUB_GPU(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
STUB_GPU	layers/pooling_layer.cpp	/^STUB_GPU(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
STUB_GPU	layers/power_layer.cpp	/^STUB_GPU(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
STUB_GPU	layers/prelu_layer.cpp	/^STUB_GPU(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
STUB_GPU	layers/reduction_layer.cpp	/^STUB_GPU(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
STUB_GPU	layers/relu_layer.cpp	/^STUB_GPU(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
STUB_GPU	layers/sigmoid_layer.cpp	/^STUB_GPU(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
STUB_GPU	layers/silence_layer.cpp	/^STUB_GPU(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
STUB_GPU	layers/slice_layer.cpp	/^STUB_GPU(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
STUB_GPU	layers/softmax_layer.cpp	/^STUB_GPU(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
STUB_GPU	layers/softmax_loss_layer.cpp	/^STUB_GPU(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
STUB_GPU	layers/split_layer.cpp	/^STUB_GPU(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
STUB_GPU	layers/tanh_layer.cpp	/^STUB_GPU(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
STUB_GPU	layers/tile_layer.cpp	/^STUB_GPU(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
STUB_GPU	layers/wangzhy_layer.cpp	/^STUB_GPU(WangzhyLayer);$/;"	p	namespace:caffe	file:	signature:(WangzhyLayer)
STUB_GPU_BACKWARD	layers/lrn_layer.cpp	/^STUB_GPU_BACKWARD(LRNLayer, CrossChannelBackward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelBackward)
STUB_GPU_BACKWARD	layers/sigmoid_cross_entropy_loss_layer.cpp	/^STUB_GPU_BACKWARD(SigmoidCrossEntropyLossLayer, Backward);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer, Backward)
STUB_GPU_FORWARD	layers/base_data_layer.cpp	/^STUB_GPU_FORWARD(BasePrefetchingDataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer, Forward)
STUB_GPU_FORWARD	layers/hdf5_data_layer.cpp	/^STUB_GPU_FORWARD(HDF5DataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer, Forward)
STUB_GPU_FORWARD	layers/lrn_layer.cpp	/^STUB_GPU_FORWARD(LRNLayer, CrossChannelForward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelForward)
STUB_GPU_FORWARD	layers/threshold_layer.cpp	/^STUB_GPU_FORWARD(ThresholdLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer, Forward)
SaveBlobs	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::SaveBlobs() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
Seconds	util/benchmark.cpp	/^float Timer::Seconds() {$/;"	f	class:caffe::Timer	signature:()
SetActionFunction	solver.cpp	/^void Solver<Dtype>::SetActionFunction(ActionCallback func) {$/;"	f	class:caffe::Solver	signature:(ActionCallback func)
SetDevice	common.cpp	/^void Caffe::SetDevice(const int device_id) {$/;"	f	class:caffe::Caffe	signature:(const int device_id)
SetUp	test/test_batch_reindex_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
SetUp	test/test_concat_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConcatLayerTest	access:protected	signature:()
SetUp	test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:()
SetUp	test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:()
SetUp	test/test_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
SetUp	test/test_db.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DBTest	access:protected	signature:()
SetUp	test/test_deconvolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DeconvolutionLayerTest	access:protected	signature:()
SetUp	test/test_dummy_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DummyDataLayerTest	access:protected	signature:()
SetUp	test/test_filter_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::FilterLayerTest	access:protected	signature:()
SetUp	test/test_hdf5data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::HDF5DataLayerTest	access:protected	signature:()
SetUp	test/test_image_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ImageDataLayerTest	access:protected	signature:()
SetUp	test/test_local_conv_layer.cpp	/^  SetUp()$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:()
SetUp	test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNLRNLayerTest	access:protected	signature:()
SetUp	test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::LRNLayerTest	access:protected	signature:()
SetUp	test/test_math_functions.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:()
SetUp	test/test_maxpool_dropout_layers.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MaxPoolingDropoutTest	access:protected	signature:()
SetUp	test/test_memory_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MemoryDataLayerTest	access:protected	signature:()
SetUp	test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
SetUp	test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
SetUp	test/test_random_number_generator.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:()
SetUp	test/test_slice_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
SetUp	test/test_spp_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SPPLayerTest	access:protected	signature:()
SetUp	test/test_stochastic_pooling.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::StochasticPoolingLayerTest	access:protected	signature:()
SetUp	test/test_tile_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::TileLayerTest	access:protected	signature:()
ShapeEquals	blob.cpp	/^bool Blob<Dtype>::ShapeEquals(const BlobProto& other) {$/;"	f	class:caffe::Blob	signature:(const BlobProto& other)
ShareData	blob.cpp	/^void Blob<Dtype>::ShareData(const Blob& other) {$/;"	f	class:caffe::Blob	signature:(const Blob& other)
ShareDiff	blob.cpp	/^void Blob<Dtype>::ShareDiff(const Blob& other) {$/;"	f	class:caffe::Blob	signature:(const Blob& other)
ShareTrainedLayersWith	net.cpp	/^void Net<Dtype>::ShareTrainedLayersWith(const Net* other) {$/;"	f	class:caffe::Net	signature:(const Net* other)
ShareWeights	net.cpp	/^void Net<Dtype>::ShareWeights() {$/;"	f	class:caffe::Net	signature:()
ShuffleImages	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::ShuffleImages() {$/;"	f	class:caffe::ImageDataLayer	signature:()
SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  SigmoidCrossEntropyLossLayerTest()$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:()
SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^class SigmoidCrossEntropyLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
SigmoidCrossEntropyLossReference	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Dtype SigmoidCrossEntropyLossReference(const int count, const int num,$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:(const int count, const int num, const Dtype* input, const Dtype* target)
SignalHandler	util/signal_handler.cpp	/^SignalHandler::SignalHandler(SolverAction::Enum SIGINT_action,$/;"	f	class:caffe::SignalHandler	signature:(SolverAction::Enum SIGINT_action, SolverAction::Enum SIGHUP_action)
SliceLayerTest	test/test_slice_layer.cpp	/^  SliceLayerTest()$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
SliceLayerTest	test/test_slice_layer.cpp	/^class SliceLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Snapshot	solver.cpp	/^void Solver<Dtype>::Snapshot() {$/;"	f	class:caffe::Solver	signature:()
SnapshotFilename	solver.cpp	/^string Solver<Dtype>::SnapshotFilename(const string extension) {$/;"	f	class:caffe::Solver	signature:(const string extension)
SnapshotSolverState	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverState(const string& model_filename) {$/;"	f	class:caffe::SGDSolver	signature:(const string& model_filename)
SnapshotSolverStateToBinaryProto	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToBinaryProto($/;"	f	class:caffe::SGDSolver	signature:( const string& model_filename)
SnapshotSolverStateToHDF5	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToHDF5($/;"	f	class:caffe::SGDSolver	signature:( const string& model_filename)
SnapshotToBinaryProto	solver.cpp	/^string Solver<Dtype>::SnapshotToBinaryProto() {$/;"	f	class:caffe::Solver	signature:()
SnapshotToHDF5	solver.cpp	/^string Solver<Dtype>::SnapshotToHDF5() {$/;"	f	class:caffe::Solver	signature:()
SoftmaxLayerTest	test/test_softmax_layer.cpp	/^  SoftmaxLayerTest()$/;"	f	class:caffe::SoftmaxLayerTest	access:protected	signature:()
SoftmaxLayerTest	test/test_softmax_layer.cpp	/^class SoftmaxLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^  SoftmaxWithLossLayerTest()$/;"	f	class:caffe::SoftmaxWithLossLayerTest	access:protected	signature:()
SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^class SoftmaxWithLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Solve	solver.cpp	/^void Solver<Dtype>::Solve(const char* resume_file) {$/;"	f	class:caffe::Solver	signature:(const char* resume_file)
Solver	solver.cpp	/^Solver<Dtype>::Solver(const SolverParameter& param, const Solver* root_solver)$/;"	f	class:caffe::Solver	signature:(const SolverParameter& param, const Solver* root_solver)
Solver	solver.cpp	/^Solver<Dtype>::Solver(const string& param_file, const Solver* root_solver)$/;"	f	class:caffe::Solver	signature:(const string& param_file, const Solver* root_solver)
SolverFactoryTest	test/test_solver_factory.cpp	/^class SolverFactoryTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
SolverNeedsTypeUpgrade	util/upgrade_proto.cpp	/^bool SolverNeedsTypeUpgrade(const SolverParameter& solver_param) {$/;"	f	namespace:caffe	signature:(const SolverParameter& solver_param)
SolverTest	test/test_solver.cpp	/^class SolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
SolverTypeUpgradeTest	test/test_upgrade_proto.cpp	/^class SolverTypeUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
SplitBlobName	util/insert_splits.cpp	/^string SplitBlobName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe	signature:(const string& layer_name, const string& blob_name, const int blob_idx, const int split_idx)
SplitLayerInsertionTest	test/test_split_layer.cpp	/^class SplitLayerInsertionTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
SplitLayerName	util/insert_splits.cpp	/^string SplitLayerName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe	signature:(const string& layer_name, const string& blob_name, const int blob_idx)
SplitLayerTest	test/test_split_layer.cpp	/^  SplitLayerTest()$/;"	f	class:caffe::SplitLayerTest	access:protected	signature:()
SplitLayerTest	test/test_split_layer.cpp	/^class SplitLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Start	util/benchmark.cpp	/^void CPUTimer::Start() {$/;"	f	class:caffe::CPUTimer	signature:()
Start	util/benchmark.cpp	/^void Timer::Start() {$/;"	f	class:caffe::Timer	signature:()
StartInternalThread	internal_thread.cpp	/^void InternalThread::StartInternalThread() {$/;"	f	class:caffe::InternalThread	signature:()
StateMeetsRule	net.cpp	/^bool Net<Dtype>::StateMeetsRule(const NetState& state,$/;"	f	class:caffe::Net	signature:(const NetState& state, const NetStateRule& rule, const string& layer_name)
Step	solver.cpp	/^void Solver<Dtype>::Step(int iters) {$/;"	f	class:caffe::Solver	signature:(int iters)
StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^  StochasticPoolingLayerTest()$/;"	f	class:caffe::StochasticPoolingLayerTest	access:protected	signature:()
StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class StochasticPoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Stop	util/benchmark.cpp	/^void CPUTimer::Stop() {$/;"	f	class:caffe::CPUTimer	signature:()
Stop	util/benchmark.cpp	/^void Timer::Stop() {$/;"	f	class:caffe::Timer	signature:()
StopInternalThread	internal_thread.cpp	/^void InternalThread::StopInternalThread() {$/;"	f	class:caffe::InternalThread	signature:()
SyncedMemoryTest	test/test_syncedmem.cpp	/^class SyncedMemoryTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestBrewMode) {$/;"	f	namespace:caffe	signature:(CommonTest, TestBrewMode)
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestCublasHandlerGPU) {$/;"	f	namespace:caffe	signature:(CommonTest, TestCublasHandlerGPU)
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedCPU) {$/;"	f	namespace:caffe	signature:(CommonTest, TestRandSeedCPU)
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedGPU) {$/;"	f	namespace:caffe	signature:(CommonTest, TestRandSeedGPU)
TEST_F	test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestRandomSeed) {$/;"	f	namespace:caffe	signature:(InternalThreadTest, TestRandomSeed)
TEST_F	test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestStartAndExit) {$/;"	f	namespace:caffe	signature:(InternalThreadTest, TestStartAndExit)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestCVMatToDatum)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumContent) {$/;"	f	namespace:caffe	signature:(IOTest, TestCVMatToDatumContent)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumReference) {$/;"	f	namespace:caffe	signature:(IOTest, TestCVMatToDatumReference)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatum)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNative) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumNative)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNativeGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumNativeGray)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMat) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMat)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContent) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatContent)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContentNative) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatContentNative)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNative) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatNative)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNativeGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatNativeGray)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadFileToDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadFileToDatum)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMat) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMat)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatGray)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResized) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatResized)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatResizedGray)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedSquare) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatResizedSquare)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatum)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContent) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumContent)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContentGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumContentGray)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumGray)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReference) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumReference)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReferenceResized) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumReferenceResized)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResized) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumResized)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumResizedGray)
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedSquare) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumResizedSquare)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByIncludeMultiRule) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByIncludeMultiRule)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMaxLevel)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMaxLevel2)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMinLevel)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMinLevel2)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMultipleStage)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMultipleStage2)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByNotStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByNotStage)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByStage)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByStage2)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByExcludeMultiRule) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInOutByExcludeMultiRule)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByIncludeMultiRule) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInOutByIncludeMultiRule)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterLeNetTrainTest) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterLeNetTrainTest)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMaxLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByMaxLevel)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMinLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByMinLevel)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMultipleStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByMultipleStage)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByNotStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByNotStage)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByStage)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByStage2)
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestNoFilter) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestNoFilter)
TEST_F	test/test_platform.cpp	/^TEST_F(PlatformTest, TestInitialization) {$/;"	f	namespace:caffe	signature:(PlatformTest, TestInitialization)
TEST_F	test/test_protobuf.cpp	/^TEST_F(ProtoTest, TestSerialization) {$/;"	f	namespace:caffe	signature:(ProtoTest, TestSerialization)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInputInsertion) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestInputInsertion)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertion) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestInsertion)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertionTwoTop) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestInsertionTwoTop)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestLossInsertion) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestLossInsertion)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion1) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertion1)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion2) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertion2)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionImageNet) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertionImageNet)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionWithInPlace) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertionWithInPlace)
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestWithInPlace) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestWithInPlace)
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPU) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestAllocationCPU)
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPUGPU) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestAllocationCPUGPU)
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationGPU) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestAllocationGPU)
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestCPUWrite) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestCPUWrite)
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPURead) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestGPURead)
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPUWrite) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestGPUWrite)
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestInitialization) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestInitialization)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestAllParams) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestAllParams)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestImageNet)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestSimple) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestSimple)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestUpgradeV1LayerType) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestUpgradeV1LayerType)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe	signature:(PaddingLayerUpgradeTest, TestImageNet)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestSimple) {$/;"	f	namespace:caffe	signature:(PaddingLayerUpgradeTest, TestSimple)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestTwoTops) {$/;"	f	namespace:caffe	signature:(PaddingLayerUpgradeTest, TestTwoTops)
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(SolverTypeUpgradeTest, TestSimple) {$/;"	f	namespace:caffe	signature:(SolverTypeUpgradeTest, TestSimple)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPU) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPU)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClass) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPUPerClass)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClassWithIgnoreLabel) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPUPerClassWithIgnoreLabel)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUTopK) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPUTopK)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardIgnoreLabel)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardWithSpatialAxes) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardWithSpatialAxes)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestSetup)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupOutputPerClass) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestSetupOutputPerClass)
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupTopK) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestSetupTopK)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPU) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPU)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxis) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUAxis)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisMaxValTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUAxisMaxValTopK)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUAxisTopK)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxVal) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUMaxVal)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxValTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUMaxValTopK)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUTopK)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetup)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxis) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupAxis)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisMaxVal) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupAxisMaxVal)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisNegativeIndexing) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupAxisNegativeIndexing)
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupMaxVal) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupMaxVal)
TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(BatchNormLayerTest, TestForward)
TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForwardInplace) {$/;"	f	namespace:caffe	signature:(BatchNormLayerTest, TestForwardInplace)
TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(BatchNormLayerTest, TestGradient)
TYPED_TEST	test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(BatchReindexLayerTest, TestForward)
TYPED_TEST	test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(BatchReindexLayerTest, TestGradient)
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerConstructor) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerConstructor)
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerMilliSeconds) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerMilliSeconds)
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerSeconds) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerSeconds)
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStart) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerStart)
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStop) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerStop)
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestAsum) {$/;"	f	namespace:caffe	signature:(BlobMathTest, TestAsum)
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestScaleData) {$/;"	f	namespace:caffe	signature:(BlobMathTest, TestScaleData)
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestSumOfSquares) {$/;"	f	namespace:caffe	signature:(BlobMathTest, TestSumOfSquares)
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestInitialization) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestInitialization)
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestLegacyBlobProtoShapeEquals) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestLegacyBlobProtoShapeEquals)
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestPointersCPUGPU) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestPointersCPUGPU)
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestReshape) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestReshape)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestForwardChannels)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardNum) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestForwardNum)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardTrivial) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestForwardTrivial)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientChannels)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannelsBottomOneOnly) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientChannelsBottomOneOnly)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientNum) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientNum)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientTrivial)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestSetupChannels)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannelsNegativeIndexing) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestSetupChannelsNegativeIndexing)
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupNum) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestSetupNum)
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestForward)
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForwardLegacy) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestForwardLegacy)
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestGradient)
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradientLegacy) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestGradientLegacy)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test0DConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, Test0DConvolution)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Convolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, Test1x1Convolution)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Gradient) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, Test1x1Gradient)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestGradient)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestGradient3D)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradientGroup) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestGradientGroup)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestNDAgainst2D)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSetup)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimple3DConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSimple3DConvolution)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSimpleConvolution)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolutionGroup) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSimpleConvolutionGroup)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSobelConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSobelConvolution)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestGradientCuDNN)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientGroupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestGradientGroupCuDNN)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSetupCuDNN)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSimpleConvolutionCuDNN)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionGroupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSimpleConvolutionGroupCuDNN)
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSobelConvolutionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSobelConvolutionCuDNN)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTestLMDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTestLevelDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainLMDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainLevelDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceSeededLMDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceSeededLevelDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceUnseededLMDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceUnseededLevelDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadLMDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadLevelDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReshapeLMDB)
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReshapeLevelDB)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTest) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropMirrorTest)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTrain) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropMirrorTrain)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropSize) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropSize)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTest) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropTest)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTrain) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropTrain)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransform) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestEmptyTransform)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransformUniquePixels) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestEmptyTransformUniquePixels)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanFile) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMeanFile)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValue) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMeanValue)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValues) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMeanValues)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTest) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMirrorTest)
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTrain) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMirrorTrain)
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestGetDB) {$/;"	f	namespace:caffe	signature:(DBTest, TestGetDB)
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestKeyValue) {$/;"	f	namespace:caffe	signature:(DBTest, TestKeyValue)
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestNext) {$/;"	f	namespace:caffe	signature:(DBTest, TestNext)
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestSeekToFirst) {$/;"	f	namespace:caffe	signature:(DBTest, TestSeekToFirst)
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestWrite) {$/;"	f	namespace:caffe	signature:(DBTest, TestWrite)
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestGradient)
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestGradient3D)
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestNDAgainst2D)
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestSetup)
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSimpleDeconvolution) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestSimpleDeconvolution)
TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestOneTopConstant) {$/;"	f	namespace:caffe	signature:(DummyDataLayerTest, TestOneTopConstant)
TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestThreeTopConstantGaussianConstant) {$/;"	f	namespace:caffe	signature:(DummyDataLayerTest, TestThreeTopConstantGaussianConstant)
TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestTwoTopConstant) {$/;"	f	namespace:caffe	signature:(DummyDataLayerTest, TestTwoTopConstant)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMax) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestMax)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMaxGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestMaxGradient)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestProd) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestProd)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSetUp)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestStableProdGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestStableProdGradient)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSum) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSum)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSumCoeff)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSumCoeffGradient)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSumGradient)
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestUnstableProdGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestUnstableProdGradient)
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestForward)
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForwardWithBias) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestForwardWithBias)
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestGradient)
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradientWithBias) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestGradientWithBias)
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestSetUp)
TYPED_TEST	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(EuclideanLossLayerTest, TestForward)
TYPED_TEST	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(EuclideanLossLayerTest, TestGradient)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(ConstantFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(ConstantFillerTest, TestFill)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(GaussianFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(GaussianFillerTest, TestFill)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillAverage) {$/;"	f	namespace:caffe	signature:(MSRAFillerTest, TestFillAverage)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe	signature:(MSRAFillerTest, TestFillFanIn)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe	signature:(MSRAFillerTest, TestFillFanOut)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(PositiveUnitballFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(PositiveUnitballFillerTest, TestFill)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(UniformFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(UniformFillerTest, TestFill)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillAverage) {$/;"	f	namespace:caffe	signature:(XavierFillerTest, TestFillAverage)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe	signature:(XavierFillerTest, TestFillFanIn)
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe	signature:(XavierFillerTest, TestFillFanOut)
TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(FilterLayerTest, TestForward)
TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(FilterLayerTest, TestGradient)
TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestReshape) {$/;"	f	namespace:caffe	signature:(FilterLayerTest, TestReshape)
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestForward)
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestGradient)
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetup)
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithAxis) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetupWithAxis)
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithEndAxis) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetupWithEndAxis)
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithStartAndEndAxis) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetupWithStartAndEndAxis)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdate)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverything)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithHalfMomentum) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithHalfMomentum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithMomentum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithWeightDecay)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestSnapshot)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestSnapshotShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest,$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverythingShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdate)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateLROneHundredth)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverything)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithWeightDecay)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestSnapshot)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestSnapshotShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest,$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverythingShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdate)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverything)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverythingShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdateWithWeightDecay)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestSnapshot)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestSnapshotShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdate)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateLROneHundredth)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverything)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithMomentum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecay)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestSnapshot)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestSnapshotShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest,$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverythingShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest,$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecayMultiIter)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverything)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithRmsDecay) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithRmsDecay)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithWeightDecay)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestSnapshot)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestSnapshotShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest,$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverythingShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdate)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateLROneHundredth)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverything)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverythingShare)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithMomentum)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecayMultiIter) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecayMultiIter)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestSnapshot)
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestSnapshotShare)
TYPED_TEST	test/test_hdf5_output_layer.cpp	/^TYPED_TEST(HDF5OutputLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(HDF5OutputLayerTest, TestForward)
TYPED_TEST	test/test_hdf5data_layer.cpp	/^TYPED_TEST(HDF5DataLayerTest, TestRead) {$/;"	f	namespace:caffe	signature:(HDF5DataLayerTest, TestRead)
TYPED_TEST	test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL1) {$/;"	f	namespace:caffe	signature:(HingeLossLayerTest, TestGradientL1)
TYPED_TEST	test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL2) {$/;"	f	namespace:caffe	signature:(HingeLossLayerTest, TestGradientL2)
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestForward)
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestGradient)
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradientForceND) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestGradientForceND)
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRect) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestRect)
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRectGradient) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestRectGradient)
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestSetup)
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestRead) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestRead)
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestReshape) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestReshape)
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestResize) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestResize)
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestShuffle) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestShuffle)
TYPED_TEST	test/test_infogain_loss_layer.cpp	/^TYPED_TEST(InfogainLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(InfogainLossLayerTest, TestGradient)
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestForward)
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForwardNoBatch) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestForwardNoBatch)
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestGradient)
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestSetUp)
TYPED_TEST	test/test_layer_factory.cpp	/^TYPED_TEST(LayerFactoryTest, TestCreateLayer) {$/;"	f	namespace:caffe	signature:(LayerFactoryTest, TestCreateLayer)
TYPED_TEST	test/test_local_conv_layer.cpp	/^ TYPED_TEST(LocalConvLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestSetup)
TYPED_TEST	test/test_local_conv_layer.cpp	/^ TYPED_TEST(LocalConvLayerTest, TestSimpleConvolution) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestSimpleConvolution)
TYPED_TEST	test/test_local_conv_layer.cpp	/^ TYPED_TEST(LocalConvLayerTest, TestSimpleConvolutionGroup) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestSimpleConvolutionGroup)
TYPED_TEST	test/test_local_conv_layer.cpp	/^TYPED_TEST(LocalConvLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestGradient)
TYPED_TEST	test/test_local_conv_layer.cpp	/^TYPED_TEST(LocalConvLayerTest, TestGradientGroup) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestGradientGroup)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestForwardAcrossChannelsCuDNN)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestForwardAcrossChannelsLargeRegionCuDNN)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestForwardWithinChannel)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestGradientAcrossChannelsCuDNN)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestGradientAcrossChannelsLargeRegionCuDNN)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestGradientWithinChannel)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestForwardAcrossChannels)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestForwardAcrossChannelsLargeRegion)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestForwardWithinChannel)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestGradientAcrossChannels)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestGradientAcrossChannelsLargeRegion)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestGradientWithinChannel)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupAcrossChannels) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestSetupAcrossChannels)
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupWithinChannel) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestSetupWithinChannel)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestAsum)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestCopy)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestFabs)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestHammingDistance) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestHammingDistance)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestNothing) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestNothing)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestScale)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestSgnbit)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestSign)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, DISABLED_TestHammingDistance) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, DISABLED_TestHammingDistance)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestAsum)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestCopy)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestFabs)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestScale)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestSgnbit)
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestSign)
TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestBackward) {$/;"	f	namespace:caffe	signature:(MaxPoolingDropoutTest, TestBackward)
TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestForward) {$/;"	f	namespace:caffe	signature:(MaxPoolingDropoutTest, TestForward)
TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestSetup) {$/;"	f	namespace:caffe	signature:(MaxPoolingDropoutTest, TestSetup)
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddDatumVectorDefaultTransform) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, AddDatumVectorDefaultTransform)
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddMatVectorDefaultTransform) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, AddMatVectorDefaultTransform)
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, TestForward)
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetBatchSize) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, TestSetBatchSize)
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, TestSetup)
TYPED_TEST	test/test_multinomial_logistic_loss_layer.cpp	/^TYPED_TEST(MultinomialLogisticLossLayerTest, TestGradientCPU) {$/;"	f	namespace:caffe	signature:(MultinomialLogisticLossLayerTest, TestGradientCPU)
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestForward)
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestForwardAcrossChannels)
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardMeanOnly) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestForwardMeanOnly)
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestGradient)
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestGradientAcrossChannels)
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientMeanOnly) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestGradientMeanOnly)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBackwardWithAccuracyLayer) {$/;"	f	namespace:caffe	signature:(NetTest, TestBackwardWithAccuracyLayer)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackward) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackward)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardEuclideanForce) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackwardEuclideanForce)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardForce) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackwardForce)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardTricky) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackwardTricky)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestComboLossWeight) {$/;"	f	namespace:caffe	signature:(NetTest, TestComboLossWeight)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestFromTo) {$/;"	f	namespace:caffe	signature:(NetTest, TestFromTo)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetBlob) {$/;"	f	namespace:caffe	signature:(NetTest, TestGetBlob)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetLayerByName) {$/;"	f	namespace:caffe	signature:(NetTest, TestGetLayerByName)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasBlob) {$/;"	f	namespace:caffe	signature:(NetTest, TestHasBlob)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasLayer) {$/;"	f	namespace:caffe	signature:(NetTest, TestHasLayer)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeight) {$/;"	f	namespace:caffe	signature:(NetTest, TestLossWeight)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeightMidNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestLossWeightMidNet)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestParamPropagateDown) {$/;"	f	namespace:caffe	signature:(NetTest, TestParamPropagateDown)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestReshape) {$/;"	f	namespace:caffe	signature:(NetTest, TestReshape)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDataNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsDataNet)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDiffNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsDiffNet)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsResume) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsResume)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsUpdate) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsUpdate)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSkipPropagateDown) {$/;"	f	namespace:caffe	signature:(NetTest, TestSkipPropagateDown)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDataNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestUnsharedWeightsDataNet)
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDiffNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestUnsharedWeightsDiffNet)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUGradientCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUGradientWithNegativeSlopeCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUWithNegativeSlopeCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestSigmoidCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestSigmoidGradientCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestTanHCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestTanHGradientCuDNN)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestAbsGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsVal) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestAbsVal)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLL) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestBNLL)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLLGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestBNLLGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradientTest) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutGradientTest)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutHalf) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutHalf)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutTestPhase) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutTestPhase)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutThreeQuarters) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutThreeQuarters)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2Shift1)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2Shift1Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayer) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayer)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2Shift1)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2Shift1Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2Shift1)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2Shift1Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayer) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayer)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2Shift1)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2Shift1Scale3)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUConsistencyReLU) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUConsistencyReLU)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForward) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUForward)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForwardChannelShared) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUForwardChannelShared)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradientChannelShared) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUGradientChannelShared)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUInPlace) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUInPlace)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUParam) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUParam)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLU) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLU)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLUGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradientWithNegativeSlope) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLUGradientWithNegativeSlope)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUWithNegativeSlope) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLUWithNegativeSlope)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoid) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestSigmoid)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoidGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestSigmoidGradient)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanH) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestTanH)
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestTanHGradient)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardAveCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestForwardAveCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestForwardMaxCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxPaddedCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestForwardMaxPaddedCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAveCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestGradientAveCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAvePaddedCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestGradientAvePaddedCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientMaxCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestGradientMaxCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestSetupCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupPaddedCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestSetupPaddedCuDNN)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardAve) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardAve)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMax) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardMax)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxPadded) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardMaxPadded)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxTopMask) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardMaxTopMask)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAve) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientAve)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAvePadded) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientAvePadded)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMax) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientMax)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMaxTopMask) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientMaxTopMask)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestSetup)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupGlobalPooling) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestSetupGlobalPooling)
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupPadded) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestSetupPadded)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPower) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPower)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerGradient)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradientShiftZero) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerGradientShiftZero)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOne) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerOne)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOneGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerOneGradient)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwo) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerTwo)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerTwoGradient)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoScaleHalfGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerTwoScaleHalfGradient)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZero) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerZero)
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZeroGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerZeroGradient)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngBernoulli)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli2) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngBernoulli2)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulliTimesBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngBernoulliTimesBernoulli)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussian)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussian2)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2GPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussian2GPU)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianGPU)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianTimesBernoulli)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussian) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianTimesGaussian)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussianGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianTimesGaussianGPU)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniform)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniform2)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2GPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniform2GPU)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformGPU)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformIntGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformIntGPU)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformTimesBernoulli)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniform) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformTimesUniform)
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniformGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformTimesUniformGPU)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSum) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSum)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeff)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeffAxis1)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeffAxis1Gradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeffGradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumGradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMean) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMean)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeff)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeffAxis1)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeffGradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradientAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeffGradientAxis1)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanGradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSetUp)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSetUpWithAxis1)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis2) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSetUpWithAxis2)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSum) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSum)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeff)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeffAxis1)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeffAxis1Gradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeffGradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumGradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquares) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquares)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeff)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeffAxis1)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1Gradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeffAxis1Gradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeffGradient)
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresGradient)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestCopyDimensions) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestCopyDimensions)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenMiddle) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestFlattenMiddle)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenOutputSizes) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestFlattenOutputSizes)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenValues) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestFlattenValues)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestForward)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForwardAfterReshape) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestForwardAfterReshape)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestGradient)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecified) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInferenceOfUnspecified)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecifiedWithStartAxis) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInferenceOfUnspecifiedWithStartAxis)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesEnd) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInsertSingletonAxesEnd)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesMiddle) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInsertSingletonAxesMiddle)
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesStart) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInsertSingletonAxesStart)
TYPED_TEST	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SigmoidCrossEntropyLossLayerTest, TestGradient)
TYPED_TEST	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestSigmoidCrossEntropyLoss) {$/;"	f	namespace:caffe	signature:(SigmoidCrossEntropyLossLayerTest, TestSigmoidCrossEntropyLoss)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestGradientAcrossChannels)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossNum) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestGradientAcrossNum)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestGradientTrivial)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSetupChannels)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupNum) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSetupNum)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossChannels) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSliceAcrossChannels)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossNum) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSliceAcrossNum)
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestTrivialSlice) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestTrivialSlice)
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestForwardCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNSoftmaxLayerTest, TestForwardCuDNN)
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNSoftmaxLayerTest, TestGradientCuDNN)
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(SoftmaxLayerTest, TestForward)
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SoftmaxLayerTest, TestGradient)
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestForwardIgnoreLabel)
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestGradient)
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientIgnoreLabel) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestGradientIgnoreLabel)
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientUnnormalized) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestGradientUnnormalized)
TYPED_TEST	test/test_solver.cpp	/^TYPED_TEST(SolverTest, TestInitTrainTestNets) {$/;"	f	namespace:caffe	signature:(SolverTest, TestInitTrainTestNets)
TYPED_TEST	test/test_solver_factory.cpp	/^TYPED_TEST(SolverFactoryTest, TestCreateSolver) {$/;"	f	namespace:caffe	signature:(SolverFactoryTest, TestCreateSolver)
TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, Test) {$/;"	f	namespace:caffe	signature:(SplitLayerTest, Test)
TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SplitLayerTest, TestGradient)
TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(SplitLayerTest, TestSetup)
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestEqualOutputDims)
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims2) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestEqualOutputDims2)
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestForwardBackward) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestForwardBackward)
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestGradient)
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestSetup)
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(CPUStochasticPoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(CPUStochasticPoolingLayerTest, TestSetup)
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(GPUStochasticPoolingLayerTest, TestGradient)
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochastic) {$/;"	f	namespace:caffe	signature:(GPUStochasticPoolingLayerTest, TestStochastic)
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochasticTestPhase) {$/;"	f	namespace:caffe	signature:(GPUStochasticPoolingLayerTest, TestStochasticTestPhase)
TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanH) {$/;"	f	namespace:caffe	signature:(TanHLayerTest, TestTanH)
TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe	signature:(TanHLayerTest, TestTanHGradient)
TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHOverflow) {$/;"	f	namespace:caffe	signature:(TanHLayerTest, TestTanHOverflow)
TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test) {$/;"	f	namespace:caffe	signature:(ThresholdLayerTest, Test)
TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test2) {$/;"	f	namespace:caffe	signature:(ThresholdLayerTest, Test2)
TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(ThresholdLayerTest, TestSetup)
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestForwardChannels)
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardNum) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestForwardNum)
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestGradientChannels)
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientNum) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestGradientNum)
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestSetup)
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialGradient) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestTrivialGradient)
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialSetup) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestTrivialSetup)
TYPED_TEST	test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemmCPUGPU) {$/;"	f	namespace:caffe	signature:(GemmTest, TestGemmCPUGPU)
TYPED_TEST	test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemvCPUGPU) {$/;"	f	namespace:caffe	signature:(GemmTest, TestGemvCPUGPU)
TYPED_TEST_CASE	test/test_accuracy_layer.cpp	/^TYPED_TEST_CASE(AccuracyLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(AccuracyLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_argmax_layer.cpp	/^TYPED_TEST_CASE(ArgMaxLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(ArgMaxLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_batch_norm_layer.cpp	/^  TYPED_TEST_CASE(BatchNormLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_batch_reindex_layer.cpp	/^TYPED_TEST_CASE(BatchReindexLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_benchmark.cpp	/^TYPED_TEST_CASE(BenchmarkTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BenchmarkTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_blob.cpp	/^TYPED_TEST_CASE(BlobMathTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BlobMathTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_blob.cpp	/^TYPED_TEST_CASE(BlobSimpleTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(BlobSimpleTest, TestDtypes)
TYPED_TEST_CASE	test/test_concat_layer.cpp	/^TYPED_TEST_CASE(ConcatLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ConcatLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST_CASE(ContrastiveLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_convolution_layer.cpp	/^TYPED_TEST_CASE(ConvolutionLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_convolution_layer.cpp	/^TYPED_TEST_CASE(CuDNNConvolutionLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNConvolutionLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_data_layer.cpp	/^TYPED_TEST_CASE(DataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(DataLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_data_transformer.cpp	/^TYPED_TEST_CASE(DataTransformTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(DataTransformTest, TestDtypes)
TYPED_TEST_CASE	test/test_db.cpp	/^TYPED_TEST_CASE(DBTest, TestTypes);$/;"	p	namespace:caffe	file:	signature:(DBTest, TestTypes)
TYPED_TEST_CASE	test/test_deconvolution_layer.cpp	/^TYPED_TEST_CASE(DeconvolutionLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_dummy_data_layer.cpp	/^TYPED_TEST_CASE(DummyDataLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(DummyDataLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_eltwise_layer.cpp	/^TYPED_TEST_CASE(EltwiseLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_embed_layer.cpp	/^TYPED_TEST_CASE(EmbedLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(EmbedLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST_CASE(EuclideanLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(ConstantFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(ConstantFillerTest, TestDtypes)
TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(GaussianFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GaussianFillerTest, TestDtypes)
TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(MSRAFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(MSRAFillerTest, TestDtypes)
TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(PositiveUnitballFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(PositiveUnitballFillerTest, TestDtypes)
TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(UniformFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(UniformFillerTest, TestDtypes)
TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(XavierFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(XavierFillerTest, TestDtypes)
TYPED_TEST_CASE	test/test_filter_layer.cpp	/^TYPED_TEST_CASE(FilterLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(FilterLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_flatten_layer.cpp	/^TYPED_TEST_CASE(FlattenLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(FlattenLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(AdaDeltaSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(AdaDeltaSolverTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(AdaGradSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(AdaGradSolverTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(AdamSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(AdamSolverTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(NesterovSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(NesterovSolverTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(RMSPropSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(RMSPropSolverTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(SGDSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SGDSolverTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_hdf5_output_layer.cpp	/^TYPED_TEST_CASE(HDF5OutputLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_hdf5data_layer.cpp	/^TYPED_TEST_CASE(HDF5DataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_hinge_loss_layer.cpp	/^TYPED_TEST_CASE(HingeLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(HingeLossLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_im2col_layer.cpp	/^TYPED_TEST_CASE(Im2colLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(Im2colLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_image_data_layer.cpp	/^TYPED_TEST_CASE(ImageDataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ImageDataLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_infogain_loss_layer.cpp	/^TYPED_TEST_CASE(InfogainLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(InfogainLossLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_inner_product_layer.cpp	/^TYPED_TEST_CASE(InnerProductLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_layer_factory.cpp	/^TYPED_TEST_CASE(LayerFactoryTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(LayerFactoryTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_local_conv_layer.cpp	/^TYPED_TEST_CASE(LocalConvLayerTest, TestType);$/;"	p	namespace:caffe	file:	signature:(LocalConvLayerTest, TestType)
TYPED_TEST_CASE	test/test_lrn_layer.cpp	/^TYPED_TEST_CASE(CuDNNLRNLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNLRNLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_lrn_layer.cpp	/^TYPED_TEST_CASE(LRNLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(LRNLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_math_functions.cpp	/^TYPED_TEST_CASE(CPUMathFunctionsTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CPUMathFunctionsTest, TestDtypes)
TYPED_TEST_CASE	test/test_math_functions.cpp	/^TYPED_TEST_CASE(GPUMathFunctionsTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GPUMathFunctionsTest, TestDtypes)
TYPED_TEST_CASE	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST_CASE(MaxPoolingDropoutTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(MaxPoolingDropoutTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_memory_data_layer.cpp	/^TYPED_TEST_CASE(MemoryDataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(MemoryDataLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_multinomial_logistic_loss_layer.cpp	/^TYPED_TEST_CASE(MultinomialLogisticLossLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLossLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_mvn_layer.cpp	/^TYPED_TEST_CASE(MVNLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(MVNLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_net.cpp	/^TYPED_TEST_CASE(NetTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(NetTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_neuron_layer.cpp	/^TYPED_TEST_CASE(CuDNNNeuronLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNNeuronLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_neuron_layer.cpp	/^TYPED_TEST_CASE(NeuronLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(NeuronLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_pooling_layer.cpp	/^TYPED_TEST_CASE(CuDNNPoolingLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNPoolingLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_pooling_layer.cpp	/^TYPED_TEST_CASE(PoolingLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(PoolingLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_power_layer.cpp	/^TYPED_TEST_CASE(PowerLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(PowerLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_random_number_generator.cpp	/^TYPED_TEST_CASE(RandomNumberGeneratorTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(RandomNumberGeneratorTest, TestDtypes)
TYPED_TEST_CASE	test/test_reduction_layer.cpp	/^TYPED_TEST_CASE(ReductionLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ReductionLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_reshape_layer.cpp	/^TYPED_TEST_CASE(ReshapeLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ReshapeLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST_CASE(SigmoidCrossEntropyLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_slice_layer.cpp	/^TYPED_TEST_CASE(SliceLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SliceLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_softmax_layer.cpp	/^TYPED_TEST_CASE(CuDNNSoftmaxLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNSoftmaxLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_softmax_layer.cpp	/^TYPED_TEST_CASE(SoftmaxLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST_CASE(SoftmaxWithLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_solver.cpp	/^TYPED_TEST_CASE(SolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SolverTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_solver_factory.cpp	/^TYPED_TEST_CASE(SolverFactoryTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SolverFactoryTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_split_layer.cpp	/^TYPED_TEST_CASE(SplitLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SplitLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_spp_layer.cpp	/^TYPED_TEST_CASE(SPPLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SPPLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_stochastic_pooling.cpp	/^TYPED_TEST_CASE(CPUStochasticPoolingLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CPUStochasticPoolingLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_stochastic_pooling.cpp	/^TYPED_TEST_CASE(GPUStochasticPoolingLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GPUStochasticPoolingLayerTest, TestDtypes)
TYPED_TEST_CASE	test/test_tanh_layer.cpp	/^TYPED_TEST_CASE(TanHLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(TanHLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_threshold_layer.cpp	/^TYPED_TEST_CASE(ThresholdLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_tile_layer.cpp	/^TYPED_TEST_CASE(TileLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(TileLayerTest, TestDtypesAndDevices)
TYPED_TEST_CASE	test/test_util_blas.cpp	/^TYPED_TEST_CASE(GemmTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GemmTest, TestDtypes)
TanHLayerTest	test/test_tanh_layer.cpp	/^  TanHLayerTest()$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:()
TanHLayerTest	test/test_tanh_layer.cpp	/^class TanHLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Test	solver.cpp	/^void Solver<Dtype>::Test(const int test_net_id) {$/;"	f	class:caffe::Solver	signature:(const int test_net_id)
TestAll	solver.cpp	/^void Solver<Dtype>::TestAll() {$/;"	f	class:caffe::Solver	signature:()
TestBackward	test/test_power_layer.cpp	/^  void TestBackward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:(Dtype power, Dtype scale, Dtype shift)
TestBackward	test/test_tanh_layer.cpp	/^  void TestBackward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:(Dtype filler_std)
TestDropoutForward	test/test_neuron_layer.cpp	/^  void TestDropoutForward(const float dropout_ratio) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float dropout_ratio)
TestExpForward	test/test_neuron_layer.cpp	/^  void TestExpForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
TestExpGradient	test/test_neuron_layer.cpp	/^  void TestExpGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
TestForward	test/test_batch_reindex_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
TestForward	test/test_euclidean_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::EuclideanLossLayerTest	access:protected	signature:()
TestForward	test/test_power_layer.cpp	/^  void TestForward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:(Dtype power, Dtype scale, Dtype shift)
TestForward	test/test_reduction_layer.cpp	/^  void TestForward(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:(ReductionParameter_ReductionOp op, float coeff = 1, int axis = 0)
TestForward	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:()
TestForward	test/test_tanh_layer.cpp	/^  void TestForward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:(Dtype filler_std)
TestForwardRectHigh	test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
TestForwardRectHigh	test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
TestForwardRectWide	test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
TestForwardRectWide	test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
TestForwardSquare	test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
TestForwardSquare	test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
TestGradient	test/test_reduction_layer.cpp	/^  void TestGradient(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:(ReductionParameter_ReductionOp op, float coeff = 1, int axis = 0)
TestLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void TestLeastSquaresUpdate(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate = 1.0, const Dtype weight_decay = 0.0, const Dtype momentum = 0.0, const int iter_to_check = 0)
TestLogForward	test/test_neuron_layer.cpp	/^  void TestLogForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
TestLogGradient	test/test_neuron_layer.cpp	/^  void TestLogGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
TestPReLU	test/test_neuron_layer.cpp	/^  void TestPReLU(PReLULayer<Dtype> *layer) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(PReLULayer<Dtype> *layer)
TestRead	test/test_data_layer.cpp	/^  void TestRead() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
TestReadCrop	test/test_data_layer.cpp	/^  void TestReadCrop(Phase phase) {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:(Phase phase)
TestReadCropTrainSequenceSeeded	test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceSeeded() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
TestReadCropTrainSequenceUnseeded	test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceUnseeded() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
TestReshape	test/test_data_layer.cpp	/^  void TestReshape(DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:(DataParameter_DB backend)
TestSnapshot	test/test_gradient_based_solver.cpp	/^  void TestSnapshot(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate = 1.0, const Dtype weight_decay = 0.0, const Dtype momentum = 0.0, const int num_iters = 1)
TestThreadA	test/test_internal_thread.cpp	/^class TestThreadA : public InternalThread {$/;"	c	namespace:caffe	file:	inherits:InternalThread
TestThreadB	test/test_internal_thread.cpp	/^class TestThreadB : public InternalThread {$/;"	c	namespace:caffe	file:	inherits:InternalThread
TestType	test/test_local_conv_layer.cpp	/^typedef ::testing::Types<FloatGPU> TestType;$/;"	t	namespace:caffe	file:
TestTypes	test/test_db.cpp	/^typedef ::testing::Types<TypeLevelDB, TypeLMDB> TestTypes;$/;"	t	namespace:caffe	file:
ThresholdLayerTest	test/test_threshold_layer.cpp	/^  ThresholdLayerTest()$/;"	f	class:caffe::ThresholdLayerTest	access:protected	signature:()
ThresholdLayerTest	test/test_threshold_layer.cpp	/^class ThresholdLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
TileLayerTest	test/test_tile_layer.cpp	/^  TileLayerTest()$/;"	f	class:caffe::TileLayerTest	access:protected	signature:()
TileLayerTest	test/test_tile_layer.cpp	/^class TileLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
Timer	util/benchmark.cpp	/^Timer::Timer()$/;"	f	class:caffe::Timer	signature:()
ToHDF5	net.cpp	/^void Net<Dtype>::ToHDF5(const string& filename, bool write_diff) const {$/;"	f	class:caffe::Net	signature:(const string& filename, bool write_diff) const
ToProto	blob.cpp	/^void Blob<double>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob	signature:(BlobProto* proto, bool write_diff) const
ToProto	blob.cpp	/^void Blob<float>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob	signature:(BlobProto* proto, bool write_diff) const
ToProto	net.cpp	/^void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {$/;"	f	class:caffe::Net	signature:(NetParameter* param, bool write_diff) const
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(Blob<Dtype>* input_blob,$/;"	f	class:caffe::DataTransformer	signature:(Blob<Dtype>* input_blob, Blob<Dtype>* transformed_blob)
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const Datum& datum,$/;"	f	class:caffe::DataTransformer	signature:(const Datum& datum, Blob<Dtype>* transformed_blob)
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const Datum& datum,$/;"	f	class:caffe::DataTransformer	signature:(const Datum& datum, Dtype* transformed_data)
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const cv::Mat& cv_img,$/;"	f	class:caffe::DataTransformer	signature:(const cv::Mat& cv_img, Blob<Dtype>* transformed_blob)
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<Datum> & datum_vector,$/;"	f	class:caffe::DataTransformer	signature:(const vector<Datum> & datum_vector, Blob<Dtype>* transformed_blob)
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<cv::Mat> & mat_vector,$/;"	f	class:caffe::DataTransformer	signature:(const vector<cv::Mat> & mat_vector, Blob<Dtype>* transformed_blob)
TypeLMDB	test/test_db.cpp	/^struct TypeLMDB {$/;"	s	namespace:caffe	file:
TypeLevelDB	test/test_db.cpp	/^struct TypeLevelDB {$/;"	s	namespace:caffe	file:
UnhookHandler	util/signal_handler.cpp	/^  void UnhookHandler() {$/;"	f	namespace:__anon1	signature:()
UniformFillerTest	test/test_filler.cpp	/^  UniformFillerTest()$/;"	f	class:caffe::UniformFillerTest	access:protected	signature:()
UniformFillerTest	test/test_filler.cpp	/^class UniformFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
Unlock	layer.cpp	/^void Layer<Dtype>::Unlock() {$/;"	f	class:caffe::Layer	signature:()
Update	blob.cpp	/^template <> void Blob<int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob	signature:()
Update	blob.cpp	/^template <> void Blob<unsigned int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob	signature:()
Update	blob.cpp	/^void Blob<Dtype>::Update() {$/;"	f	class:caffe::Blob	signature:()
Update	net.cpp	/^void Net<Dtype>::Update() {$/;"	f	class:caffe::Net	signature:()
UpdateDebugInfo	net.cpp	/^void Net<Dtype>::UpdateDebugInfo(const int param_id) {$/;"	f	class:caffe::Net	signature:(const int param_id)
UpgradeNetAsNeeded	util/upgrade_proto.cpp	/^bool UpgradeNetAsNeeded(const string& param_file, NetParameter* param) {$/;"	f	namespace:caffe	signature:(const string& param_file, NetParameter* param)
UpgradeNetDataTransformation	util/upgrade_proto.cpp	/^void UpgradeNetDataTransformation(NetParameter* net_param) {$/;"	f	namespace:caffe	signature:(NetParameter* net_param)
UpgradeSolverAsNeeded	util/upgrade_proto.cpp	/^bool UpgradeSolverAsNeeded(const string& param_file, SolverParameter* param) {$/;"	f	namespace:caffe	signature:(const string& param_file, SolverParameter* param)
UpgradeSolverType	util/upgrade_proto.cpp	/^bool UpgradeSolverType(SolverParameter* solver_param) {$/;"	f	namespace:caffe	signature:(SolverParameter* solver_param)
UpgradeV0LayerParameter	util/upgrade_proto.cpp	/^bool UpgradeV0LayerParameter(const V1LayerParameter& v0_layer_connection,$/;"	f	namespace:caffe	signature:(const V1LayerParameter& v0_layer_connection, V1LayerParameter* layer_param)
UpgradeV0LayerType	util/upgrade_proto.cpp	/^V1LayerParameter_LayerType UpgradeV0LayerType(const string& type) {$/;"	f	namespace:caffe	signature:(const string& type)
UpgradeV0Net	util/upgrade_proto.cpp	/^bool UpgradeV0Net(const NetParameter& v0_net_param_padding_layers,$/;"	f	namespace:caffe	signature:(const NetParameter& v0_net_param_padding_layers, NetParameter* net_param)
UpgradeV0PaddingLayers	util/upgrade_proto.cpp	/^void UpgradeV0PaddingLayers(const NetParameter& param,$/;"	f	namespace:caffe	signature:(const NetParameter& param, NetParameter* param_upgraded_pad)
UpgradeV1LayerParameter	util/upgrade_proto.cpp	/^bool UpgradeV1LayerParameter(const V1LayerParameter& v1_layer_param,$/;"	f	namespace:caffe	signature:(const V1LayerParameter& v1_layer_param, LayerParameter* layer_param)
UpgradeV1LayerType	util/upgrade_proto.cpp	/^const char* UpgradeV1LayerType(const V1LayerParameter_LayerType type) {$/;"	f	namespace:caffe	signature:(const V1LayerParameter_LayerType type)
UpgradeV1Net	util/upgrade_proto.cpp	/^bool UpgradeV1Net(const NetParameter& v1_net_param, NetParameter* net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& v1_net_param, NetParameter* net_param)
WithinChannelBackward	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelBackward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
WithinChannelForward	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelForward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
WriteProtoToBinaryFile	util/io.cpp	/^void WriteProtoToBinaryFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe	signature:(const Message& proto, const char* filename)
WriteProtoToTextFile	util/io.cpp	/^void WriteProtoToTextFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe	signature:(const Message& proto, const char* filename)
XavierFillerTest	test/test_filler.cpp	/^  XavierFillerTest()$/;"	f	class:caffe::XavierFillerTest	access:protected	signature:()
XavierFillerTest	test/test_filler.cpp	/^class XavierFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
__anon1::GotSIGHUP	util/signal_handler.cpp	/^  bool GotSIGHUP() {$/;"	f	namespace:__anon1	signature:()
__anon1::GotSIGINT	util/signal_handler.cpp	/^  bool GotSIGINT() {$/;"	f	namespace:__anon1	signature:()
__anon1::HookupHandler	util/signal_handler.cpp	/^  void HookupHandler() {$/;"	f	namespace:__anon1	signature:()
__anon1::UnhookHandler	util/signal_handler.cpp	/^  void UnhookHandler() {$/;"	f	namespace:__anon1	signature:()
__anon1::already_hooked_up	util/signal_handler.cpp	/^  static bool already_hooked_up = false;$/;"	m	namespace:__anon1	file:
__anon1::got_sighup	util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sighup = false;$/;"	m	namespace:__anon1	file:
__anon1::got_sigint	util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sigint = false;$/;"	m	namespace:__anon1	file:
__anon1::handle_signal	util/signal_handler.cpp	/^  void handle_signal(int signal) {$/;"	f	namespace:__anon1	signature:(int signal)
already_hooked_up	util/signal_handler.cpp	/^  static bool already_hooked_up = false;$/;"	m	namespace:__anon1	file:
apply_buffers	parallel.cpp	/^static void apply_buffers(const vector<Blob<Dtype>*>& blobs,$/;"	f	namespace:caffe	signature:(const vector<Blob<Dtype>*>& blobs, Dtype* buffer, size_t total_size, Op op)
asum_data	blob.cpp	/^Dtype Blob<Dtype>::asum_data() const {$/;"	f	class:caffe::Blob	signature:() const
asum_data	blob.cpp	/^template <> int Blob<int>::asum_data() const {$/;"	f	class:caffe::Blob	signature:() const
asum_data	blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_data() const {$/;"	f	class:caffe::Blob	signature:() const
asum_diff	blob.cpp	/^Dtype Blob<Dtype>::asum_diff() const {$/;"	f	class:caffe::Blob	signature:() const
asum_diff	blob.cpp	/^template <> int Blob<int>::asum_diff() const {$/;"	f	class:caffe::Blob	signature:() const
asum_diff	blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_diff() const {$/;"	f	class:caffe::Blob	signature:() const
async_gpu_push	syncedmem.cpp	/^void SyncedMemory::async_gpu_push(const cudaStream_t& stream) {$/;"	f	class:caffe::SyncedMemory	signature:(const cudaStream_t& stream)
backend	test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLMDB	file:	access:public
backend	test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLevelDB	file:	access:public
backend	test/test_db.cpp	/^DataParameter_DB TypeLMDB::backend = DataParameter_DB_LMDB;$/;"	m	class:caffe::TypeLMDB	file:
backend	test/test_db.cpp	/^DataParameter_DB TypeLevelDB::backend = DataParameter_DB_LEVELDB;$/;"	m	class:caffe::TypeLevelDB	file:
backend_	test/test_data_layer.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
backend_	test/test_db.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DBTest	file:	access:protected
backward_cpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
backward_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
backward_gpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
backward_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
batch_size_	test/test_memory_data_layer.cpp	/^  int batch_size_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
batches_	test/test_memory_data_layer.cpp	/^  int batches_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
blob_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobMathTest	file:	access:protected
blob_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobSimpleTest	file:	access:protected
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::ConstantFillerTest	file:	access:protected
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::GaussianFillerTest	file:	access:protected
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::MSRAFillerTest	file:	access:protected
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:	access:protected
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::UniformFillerTest	file:	access:protected
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::XavierFillerTest	file:	access:protected
blob_bottom_	test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
blob_bottom_	test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
blob_bottom_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
blob_bottom_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
blob_bottom_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
blob_bottom_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
blob_bottom_	test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
blob_bottom_	test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
blob_bottom_	test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
blob_bottom_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
blob_bottom_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
blob_bottom_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
blob_bottom_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
blob_bottom_	test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MathFunctionsTest	file:	access:protected
blob_bottom_	test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
blob_bottom_	test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
blob_bottom_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
blob_bottom_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
blob_bottom_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
blob_bottom_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
blob_bottom_	test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
blob_bottom_	test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
blob_bottom_	test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
blob_bottom_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
blob_bottom_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
blob_bottom_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
blob_bottom_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
blob_bottom_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_bottom_	test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
blob_bottom_	test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
blob_bottom_	test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
blob_bottom_	test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
blob_bottom_0_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_0_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
blob_bottom_1_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_1_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
blob_bottom_2_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
blob_bottom_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
blob_bottom_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
blob_bottom_2_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
blob_bottom_2_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
blob_bottom_2_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_bottom_3_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_3_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_bottom_a_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_a_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
blob_bottom_b_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_b_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
blob_bottom_c_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_c_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
blob_bottom_data_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
blob_bottom_data_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
blob_bottom_data_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
blob_bottom_data_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
blob_bottom_data_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
blob_bottom_data_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
blob_bottom_data_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
blob_bottom_data_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
blob_bottom_data_i_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_i_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
blob_bottom_data_j_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_j_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
blob_bottom_infogain_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_infogain_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
blob_bottom_label_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
blob_bottom_label_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
blob_bottom_label_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
blob_bottom_label_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
blob_bottom_label_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
blob_bottom_label_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
blob_bottom_labels_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_labels_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
blob_bottom_nobatch_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_nobatch_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
blob_bottom_permute_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_permute_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
blob_bottom_selector_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_selector_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
blob_bottom_targets_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_targets_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
blob_bottom_vec_	test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
blob_bottom_vec_	test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
blob_bottom_vec_	test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
blob_bottom_vec_	test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
blob_bottom_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
blob_bottom_vec_	test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
blob_bottom_vec_	test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
blob_bottom_vec_	test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
blob_bottom_vec_	test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
blob_bottom_vec_	test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
blob_bottom_vec_	test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
blob_bottom_vec_	test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
blob_bottom_vec_	test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
blob_bottom_vec_	test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
blob_bottom_vec_	test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
blob_bottom_vec_	test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
blob_bottom_vec_	test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
blob_bottom_vec_	test/test_local_conv_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
blob_bottom_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
blob_bottom_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
blob_bottom_vec_	test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
blob_bottom_vec_	test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
blob_bottom_vec_	test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
blob_bottom_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
blob_bottom_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
blob_bottom_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
blob_bottom_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
blob_bottom_vec_	test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
blob_bottom_vec_	test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
blob_bottom_vec_	test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
blob_bottom_vec_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
blob_bottom_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
blob_bottom_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
blob_bottom_vec_	test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
blob_bottom_vec_	test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
blob_bottom_vec_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_bottom_vec_	test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
blob_bottom_vec_	test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
blob_bottom_vec_	test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
blob_bottom_vec_	test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
blob_bottom_vec_0_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
blob_bottom_vec_1_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
blob_bottom_vec_2_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_2_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_bottom_vec_3_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_3_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_bottom_y_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_y_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
blob_by_name	net.cpp	/^const shared_ptr<Blob<Dtype> > Net<Dtype>::blob_by_name($/;"	f	class:caffe::Net	signature:( const string& blob_name) const
blob_data_	test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_data_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
blob_label_	test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_label_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
blob_preshaped_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_preshaped_;$/;"	m	class:caffe::BlobSimpleTest	file:	access:protected
blob_top_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
blob_top_	test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
blob_top_	test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
blob_top_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
blob_top_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
blob_top_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
blob_top_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
blob_top_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
blob_top_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
blob_top_	test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
blob_top_	test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
blob_top_	test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
blob_top_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
blob_top_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
blob_top_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
blob_top_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
blob_top_	test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MathFunctionsTest	file:	access:protected
blob_top_	test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
blob_top_	test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
blob_top_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
blob_top_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
blob_top_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
blob_top_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
blob_top_	test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
blob_top_	test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
blob_top_	test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
blob_top_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
blob_top_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
blob_top_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_top_	test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
blob_top_	test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
blob_top_	test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
blob_top_	test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
blob_top_0_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_0_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
blob_top_1_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_1_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
blob_top_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
blob_top_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
blob_top_2_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
blob_top_2_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
blob_top_2_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
blob_top_a_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
blob_top_a_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
blob_top_b_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
blob_top_b_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
blob_top_c_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_c_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
blob_top_data_	test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
blob_top_data_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
blob_top_data_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
blob_top_data_	test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
blob_top_label2_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label2_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
blob_top_label_	test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
blob_top_label_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
blob_top_label_	test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
blob_top_labels_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_labels_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
blob_top_loss_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
blob_top_loss_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
blob_top_loss_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
blob_top_loss_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
blob_top_loss_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
blob_top_loss_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
blob_top_loss_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
blob_top_mask_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
blob_top_mask_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
blob_top_per_class_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_per_class_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
blob_top_per_class_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_per_class_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
blob_top_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
blob_top_vec_	test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
blob_top_vec_	test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
blob_top_vec_	test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
blob_top_vec_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
blob_top_vec_	test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
blob_top_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
blob_top_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
blob_top_vec_	test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
blob_top_vec_	test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
blob_top_vec_	test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
blob_top_vec_	test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
blob_top_vec_	test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
blob_top_vec_	test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
blob_top_vec_	test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
blob_top_vec_	test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
blob_top_vec_	test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
blob_top_vec_	test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
blob_top_vec_	test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
blob_top_vec_	test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
blob_top_vec_	test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
blob_top_vec_	test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
blob_top_vec_	test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
blob_top_vec_	test/test_local_conv_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
blob_top_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
blob_top_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
blob_top_vec_	test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
blob_top_vec_	test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
blob_top_vec_	test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
blob_top_vec_	test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
blob_top_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
blob_top_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
blob_top_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
blob_top_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
blob_top_vec_	test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
blob_top_vec_	test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
blob_top_vec_	test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
blob_top_vec_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
blob_top_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
blob_top_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
blob_top_vec_	test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
blob_top_vec_	test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
blob_top_vec_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
blob_top_vec_	test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
blob_top_vec_	test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
blob_top_vec_	test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
blob_top_vec_	test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
blob_top_vec_0_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
blob_top_vec_1_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
bodies_mutex_	data_reader.cpp	/^static boost::mutex bodies_mutex_;$/;"	m	namespace:caffe	file:
caffe	blob.cpp	/^namespace caffe {$/;"	n	file:
caffe	common.cpp	/^namespace caffe {$/;"	n	file:
caffe	data_reader.cpp	/^namespace caffe {$/;"	n	file:
caffe	data_transformer.cpp	/^namespace caffe {$/;"	n	file:
caffe	internal_thread.cpp	/^namespace caffe {$/;"	n	file:
caffe	layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layer_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/absval_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/accuracy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/argmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/base_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/base_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/batch_norm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/batch_reindex_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/bnll_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/concat_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/contrastive_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_lcn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_relu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_sigmoid_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/deconv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/dropout_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/dummy_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/eltwise_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/embed_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/euclidean_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/exp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/filter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/flatten_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/hdf5_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/hdf5_output_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/hinge_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/im2col_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/image_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/infogain_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/inner_product_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/local_conv.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/log_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/memory_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/multinomial_logistic_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/mvn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/neuron_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/power_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/prelu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/reduction_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/relu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/reshape_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/sigmoid_cross_entropy_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/sigmoid_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/silence_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/slice_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/softmax_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/split_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/spp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/threshold_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/tile_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/wangzhy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/window_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	net.cpp	/^namespace caffe {$/;"	n	file:
caffe	parallel.cpp	/^namespace caffe {$/;"	n	file:
caffe	solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/adadelta_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/adagrad_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/adam_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/nesterov_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/rmsprop_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/sgd_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	syncedmem.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_accuracy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_argmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_batch_norm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_batch_reindex_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_benchmark.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_blob.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_caffe_main.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_common.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_concat_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_contrastive_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_convolution_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_data_transformer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_db.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_deconvolution_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_dummy_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_eltwise_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_embed_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_euclidean_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_filler.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_filter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_flatten_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_gradient_based_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_hdf5_output_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_hdf5data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_hinge_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_im2col_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_image_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_infogain_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_inner_product_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_internal_thread.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_io.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_layer_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_local_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_math_functions.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_maxpool_dropout_layers.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_memory_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_multinomial_logistic_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_mvn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_net.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_neuron_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_platform.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_power_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_protobuf.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_random_number_generator.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_reduction_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_reshape_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_slice_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_softmax_with_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_solver_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_split_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_spp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_stochastic_pooling.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_syncedmem.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_threshold_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_tile_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_upgrade_proto.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_util_blas.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/benchmark.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/blocking_queue.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/cudnn.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/db.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	util/db_leveldb.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	util/db_lmdb.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	util/hdf5.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/im2col.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/insert_splits.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/io.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/math_functions.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/signal_handler.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/upgrade_proto.cpp	/^namespace caffe {$/;"	n	file:
caffe::AbsValLayer::Backward_cpu	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::AbsValLayer::Forward_cpu	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::AbsValLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AbsValLayer::LayerSetUp	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AbsValLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AccuracyLayer::Forward_cpu	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AccuracyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AccuracyLayer::LayerSetUp	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AccuracyLayer::Reshape	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Reshape($/;"	f	class:caffe::AccuracyLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::AccuracyLayerTest	test/test_accuracy_layer.cpp	/^class AccuracyLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
caffe::AccuracyLayerTest::AccuracyLayerTest	test/test_accuracy_layer.cpp	/^  AccuracyLayerTest()$/;"	f	class:caffe::AccuracyLayerTest	access:protected	signature:()
caffe::AccuracyLayerTest::FillBottoms	test/test_accuracy_layer.cpp	/^  virtual void FillBottoms() {$/;"	f	class:caffe::AccuracyLayerTest	access:protected	signature:()
caffe::AccuracyLayerTest::blob_bottom_data_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::blob_bottom_label_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::blob_bottom_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::blob_top_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::blob_top_per_class_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_per_class_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::blob_top_per_class_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_per_class_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::blob_top_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::top_k_	test/test_accuracy_layer.cpp	/^  int top_k_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
caffe::AccuracyLayerTest::~AccuracyLayerTest	test/test_accuracy_layer.cpp	/^  virtual ~AccuracyLayerTest() {$/;"	f	class:caffe::AccuracyLayerTest	access:protected	signature:()
caffe::AdaDeltaSolver::AdaDeltaPreSolve	solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::AdaDeltaPreSolve() {$/;"	f	class:caffe::AdaDeltaSolver	signature:()
caffe::AdaDeltaSolver::ComputeUpdateValue	solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaDeltaSolver	signature:(int param_id, Dtype rate)
caffe::AdaDeltaSolverTest	test/test_gradient_based_solver.cpp	/^class AdaDeltaSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
caffe::AdaDeltaSolverTest::Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaDeltaSolverTest	file:	access:private
caffe::AdaDeltaSolverTest::InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaDeltaSolverTest	access:protected	signature:(const SolverParameter& param)
caffe::AdaGradSolver::ComputeUpdateValue	solvers/adagrad_solver.cpp	/^void AdaGradSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaGradSolver	signature:(int param_id, Dtype rate)
caffe::AdaGradSolverTest	test/test_gradient_based_solver.cpp	/^class AdaGradSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
caffe::AdaGradSolverTest::Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaGradSolverTest	file:	access:private
caffe::AdaGradSolverTest::InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaGradSolverTest	access:protected	signature:(const SolverParameter& param)
caffe::AdamSolver::AdamPreSolve	solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::AdamPreSolve() {$/;"	f	class:caffe::AdamSolver	signature:()
caffe::AdamSolver::ComputeUpdateValue	solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdamSolver	signature:(int param_id, Dtype rate)
caffe::AdamSolverTest	test/test_gradient_based_solver.cpp	/^class AdamSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
caffe::AdamSolverTest::Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdamSolverTest	file:	access:private
caffe::AdamSolverTest::InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdamSolverTest	access:protected	signature:(const SolverParameter& param)
caffe::ArgMaxLayer::Forward_cpu	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ArgMaxLayer::LayerSetUp	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ArgMaxLayer::Reshape	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ArgMaxLayerTest	test/test_argmax_layer.cpp	/^class ArgMaxLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
caffe::ArgMaxLayerTest::ArgMaxLayerTest	test/test_argmax_layer.cpp	/^  ArgMaxLayerTest()$/;"	f	class:caffe::ArgMaxLayerTest	access:protected	signature:()
caffe::ArgMaxLayerTest::blob_bottom_	test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
caffe::ArgMaxLayerTest::blob_bottom_vec_	test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
caffe::ArgMaxLayerTest::blob_top_	test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
caffe::ArgMaxLayerTest::blob_top_vec_	test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
caffe::ArgMaxLayerTest::top_k_	test/test_argmax_layer.cpp	/^  size_t top_k_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
caffe::ArgMaxLayerTest::~ArgMaxLayerTest	test/test_argmax_layer.cpp	/^  virtual ~ArgMaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ArgMaxLayerTest	access:protected	signature:()
caffe::BNLLLayer::Backward_cpu	layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::BNLLLayer::Forward_cpu	layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BNLLLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BaseConvolutionLayer::LayerSetUp	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BaseConvolutionLayer::Reshape	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BaseConvolutionLayer::backward_cpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
caffe::BaseConvolutionLayer::backward_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
caffe::BaseConvolutionLayer::backward_gpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* bias, const Dtype* input)
caffe::BaseConvolutionLayer::backward_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* output, const Dtype* weights, Dtype* input)
caffe::BaseConvolutionLayer::forward_cpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
caffe::BaseConvolutionLayer::forward_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
caffe::BaseConvolutionLayer::forward_gpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
caffe::BaseConvolutionLayer::forward_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
caffe::BaseConvolutionLayer::weight_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
caffe::BaseConvolutionLayer::weight_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
caffe::BaseDataLayer::BaseDataLayer	layers/base_data_layer.cpp	/^BaseDataLayer<Dtype>::BaseDataLayer(const LayerParameter& param)$/;"	f	class:caffe::BaseDataLayer	signature:(const LayerParameter& param)
caffe::BaseDataLayer::LayerSetUp	layers/base_data_layer.cpp	/^void BaseDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BasePrefetchingDataLayer::BasePrefetchingDataLayer	layers/base_data_layer.cpp	/^BasePrefetchingDataLayer<Dtype>::BasePrefetchingDataLayer($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const LayerParameter& param)
caffe::BasePrefetchingDataLayer::Forward_cpu	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BasePrefetchingDataLayer::InternalThreadEntry	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::BasePrefetchingDataLayer	signature:()
caffe::BasePrefetchingDataLayer::LayerSetUp	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::BasePrefetchingDataLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchNormLayer::Backward_cpu	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::BatchNormLayer::Forward_cpu	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchNormLayer::LayerSetUp	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchNormLayer::Reshape	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^  class BatchNormLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::BatchNormLayerTest::BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^    BatchNormLayerTest()$/;"	f	class:caffe::BatchNormLayerTest	access:protected	signature:()
caffe::BatchNormLayerTest::Dtype	test/test_batch_norm_layer.cpp	/^    typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchNormLayerTest	file:	access:private
caffe::BatchNormLayerTest::blob_bottom_	test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
caffe::BatchNormLayerTest::blob_bottom_vec_	test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
caffe::BatchNormLayerTest::blob_top_	test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
caffe::BatchNormLayerTest::blob_top_vec_	test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:	access:protected
caffe::BatchNormLayerTest::~BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^    virtual ~BatchNormLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::BatchNormLayerTest	access:protected	signature:()
caffe::BatchReindexLayer::Backward_cpu	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::BatchReindexLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::BatchReindexLayer::Forward_cpu	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchReindexLayer::Reshape	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::BatchReindexLayer::check_batch_reindex	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::check_batch_reindex(int initial_num,$/;"	f	class:caffe::BatchReindexLayer	signature:(int initial_num, int final_num, const Dtype* ridx_data)
caffe::BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^class BatchReindexLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::BatchReindexLayerTest::BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^  BatchReindexLayerTest()$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
caffe::BatchReindexLayerTest::Dtype	test/test_batch_reindex_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchReindexLayerTest	file:	access:private
caffe::BatchReindexLayerTest::SetUp	test/test_batch_reindex_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
caffe::BatchReindexLayerTest::TestForward	test/test_batch_reindex_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
caffe::BatchReindexLayerTest::blob_bottom_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
caffe::BatchReindexLayerTest::blob_bottom_permute_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_permute_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
caffe::BatchReindexLayerTest::blob_bottom_vec_	test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
caffe::BatchReindexLayerTest::blob_top_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
caffe::BatchReindexLayerTest::blob_top_vec_	test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:	access:protected
caffe::BatchReindexLayerTest::~BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^  virtual ~BatchReindexLayerTest() {$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
caffe::BenchmarkTest	test/test_benchmark.cpp	/^class BenchmarkTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::Blob::Blob	blob.cpp	/^Blob<Dtype>::Blob(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob	signature:(const int num, const int channels, const int height, const int width)
caffe::Blob::Blob	blob.cpp	/^Blob<Dtype>::Blob(const vector<int>& shape)$/;"	f	class:caffe::Blob	signature:(const vector<int>& shape)
caffe::Blob::CopyFrom	blob.cpp	/^void Blob<Dtype>::CopyFrom(const Blob& source, bool copy_diff, bool reshape) {$/;"	f	class:caffe::Blob	signature:(const Blob& source, bool copy_diff, bool reshape)
caffe::Blob::FromProto	blob.cpp	/^void Blob<Dtype>::FromProto(const BlobProto& proto, bool reshape) {$/;"	f	class:caffe::Blob	signature:(const BlobProto& proto, bool reshape)
caffe::Blob::Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const BlobShape& shape) {$/;"	f	class:caffe::Blob	signature:(const BlobShape& shape)
caffe::Blob::Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob	signature:(const int num, const int channels, const int height, const int width)
caffe::Blob::Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const vector<int>& shape) {$/;"	f	class:caffe::Blob	signature:(const vector<int>& shape)
caffe::Blob::ReshapeLike	blob.cpp	/^void Blob<Dtype>::ReshapeLike(const Blob<Dtype>& other) {$/;"	f	class:caffe::Blob	signature:(const Blob<Dtype>& other)
caffe::Blob::ShapeEquals	blob.cpp	/^bool Blob<Dtype>::ShapeEquals(const BlobProto& other) {$/;"	f	class:caffe::Blob	signature:(const BlobProto& other)
caffe::Blob::ShareData	blob.cpp	/^void Blob<Dtype>::ShareData(const Blob& other) {$/;"	f	class:caffe::Blob	signature:(const Blob& other)
caffe::Blob::ShareDiff	blob.cpp	/^void Blob<Dtype>::ShareDiff(const Blob& other) {$/;"	f	class:caffe::Blob	signature:(const Blob& other)
caffe::Blob::ToProto	blob.cpp	/^void Blob<double>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob	signature:(BlobProto* proto, bool write_diff) const
caffe::Blob::ToProto	blob.cpp	/^void Blob<float>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob	signature:(BlobProto* proto, bool write_diff) const
caffe::Blob::Update	blob.cpp	/^template <> void Blob<int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob	signature:()
caffe::Blob::Update	blob.cpp	/^template <> void Blob<unsigned int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob	signature:()
caffe::Blob::Update	blob.cpp	/^void Blob<Dtype>::Update() {$/;"	f	class:caffe::Blob	signature:()
caffe::Blob::asum_data	blob.cpp	/^Dtype Blob<Dtype>::asum_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::asum_data	blob.cpp	/^template <> int Blob<int>::asum_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::asum_data	blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::asum_diff	blob.cpp	/^Dtype Blob<Dtype>::asum_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::asum_diff	blob.cpp	/^template <> int Blob<int>::asum_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::asum_diff	blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::cpu_data	blob.cpp	/^const Dtype* Blob<Dtype>::cpu_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::cpu_diff	blob.cpp	/^const Dtype* Blob<Dtype>::cpu_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::gpu_data	blob.cpp	/^const Dtype* Blob<Dtype>::gpu_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::gpu_diff	blob.cpp	/^const Dtype* Blob<Dtype>::gpu_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::gpu_shape	blob.cpp	/^const int* Blob<Dtype>::gpu_shape() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::mutable_cpu_data	blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_data() {$/;"	f	class:caffe::Blob	signature:()
caffe::Blob::mutable_cpu_diff	blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_diff() {$/;"	f	class:caffe::Blob	signature:()
caffe::Blob::mutable_gpu_data	blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_data() {$/;"	f	class:caffe::Blob	signature:()
caffe::Blob::mutable_gpu_diff	blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_diff() {$/;"	f	class:caffe::Blob	signature:()
caffe::Blob::scale_data	blob.cpp	/^template <> void Blob<int>::scale_data(int scale_factor) {$/;"	f	class:caffe::Blob	signature:(int scale_factor)
caffe::Blob::scale_data	blob.cpp	/^template <> void Blob<unsigned int>::scale_data(unsigned int scale_factor) {$/;"	f	class:caffe::Blob	signature:(unsigned int scale_factor)
caffe::Blob::scale_data	blob.cpp	/^void Blob<Dtype>::scale_data(Dtype scale_factor) {$/;"	f	class:caffe::Blob	signature:(Dtype scale_factor)
caffe::Blob::scale_diff	blob.cpp	/^template <> void Blob<int>::scale_diff(int scale_factor) {$/;"	f	class:caffe::Blob	signature:(int scale_factor)
caffe::Blob::scale_diff	blob.cpp	/^template <> void Blob<unsigned int>::scale_diff(unsigned int scale_factor) {$/;"	f	class:caffe::Blob	signature:(unsigned int scale_factor)
caffe::Blob::scale_diff	blob.cpp	/^void Blob<Dtype>::scale_diff(Dtype scale_factor) {$/;"	f	class:caffe::Blob	signature:(Dtype scale_factor)
caffe::Blob::set_cpu_data	blob.cpp	/^void Blob<Dtype>::set_cpu_data(Dtype* data) {$/;"	f	class:caffe::Blob	signature:(Dtype* data)
caffe::Blob::sumsq_data	blob.cpp	/^Dtype Blob<Dtype>::sumsq_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::sumsq_data	blob.cpp	/^template <> int Blob<int>::sumsq_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::sumsq_data	blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_data() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::sumsq_diff	blob.cpp	/^Dtype Blob<Dtype>::sumsq_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::sumsq_diff	blob.cpp	/^template <> int Blob<int>::sumsq_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::Blob::sumsq_diff	blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_diff() const {$/;"	f	class:caffe::Blob	signature:() const
caffe::BlobMathTest	test/test_blob.cpp	/^class BlobMathTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::BlobMathTest::BlobMathTest	test/test_blob.cpp	/^  BlobMathTest()$/;"	f	class:caffe::BlobMathTest	access:protected	signature:()
caffe::BlobMathTest::Dtype	test/test_blob.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BlobMathTest	file:	access:private
caffe::BlobMathTest::blob_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobMathTest	file:	access:protected
caffe::BlobMathTest::epsilon_	test/test_blob.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::BlobMathTest	file:	access:protected
caffe::BlobMathTest::~BlobMathTest	test/test_blob.cpp	/^  virtual ~BlobMathTest() { delete blob_; }$/;"	f	class:caffe::BlobMathTest	access:protected	signature:()
caffe::BlobSimpleTest	test/test_blob.cpp	/^class BlobSimpleTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::BlobSimpleTest::BlobSimpleTest	test/test_blob.cpp	/^  BlobSimpleTest()$/;"	f	class:caffe::BlobSimpleTest	access:protected	signature:()
caffe::BlobSimpleTest::blob_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobSimpleTest	file:	access:protected
caffe::BlobSimpleTest::blob_preshaped_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_preshaped_;$/;"	m	class:caffe::BlobSimpleTest	file:	access:protected
caffe::BlobSimpleTest::~BlobSimpleTest	test/test_blob.cpp	/^  virtual ~BlobSimpleTest() { delete blob_; delete blob_preshaped_; }$/;"	f	class:caffe::BlobSimpleTest	access:protected	signature:()
caffe::BlockingQueue::BlockingQueue	util/blocking_queue.cpp	/^BlockingQueue<T>::BlockingQueue()$/;"	f	class:caffe::BlockingQueue	signature:()
caffe::BlockingQueue::peek	util/blocking_queue.cpp	/^T BlockingQueue<T>::peek() {$/;"	f	class:caffe::BlockingQueue	signature:()
caffe::BlockingQueue::pop	util/blocking_queue.cpp	/^T BlockingQueue<T>::pop(const string& log_on_wait) {$/;"	f	class:caffe::BlockingQueue	signature:(const string& log_on_wait)
caffe::BlockingQueue::push	util/blocking_queue.cpp	/^void BlockingQueue<T>::push(const T& t) {$/;"	f	class:caffe::BlockingQueue	signature:(const T& t)
caffe::BlockingQueue::size	util/blocking_queue.cpp	/^size_t BlockingQueue<T>::size() const {$/;"	f	class:caffe::BlockingQueue	signature:() const
caffe::BlockingQueue::sync	util/blocking_queue.cpp	/^class BlockingQueue<T>::sync {$/;"	c	class:caffe::BlockingQueue	file:
caffe::BlockingQueue::sync::condition_	util/blocking_queue.cpp	/^  boost::condition_variable condition_;$/;"	m	class:caffe::BlockingQueue::sync	file:	access:public
caffe::BlockingQueue::sync::mutex_	util/blocking_queue.cpp	/^  mutable boost::mutex mutex_;$/;"	m	class:caffe::BlockingQueue::sync	file:	access:public
caffe::BlockingQueue::try_peek	util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_peek(T* t) {$/;"	f	class:caffe::BlockingQueue	signature:(T* t)
caffe::BlockingQueue::try_pop	util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_pop(T* t) {$/;"	f	class:caffe::BlockingQueue	signature:(T* t)
caffe::CAFFE_TEST_CUDA_PROP	test/test_caffe_main.cpp	/^  cudaDeviceProp CAFFE_TEST_CUDA_PROP;$/;"	m	namespace:caffe	file:
caffe::CPUMathFunctionsTest	test/test_math_functions.cpp	/^class CPUMathFunctionsTest$/;"	c	namespace:caffe	file:	inherits:MathFunctionsTest
caffe::CPUStochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class CPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:	inherits:StochasticPoolingLayerTest
caffe::CPUTimer::CPUTimer	util/benchmark.cpp	/^CPUTimer::CPUTimer() {$/;"	f	class:caffe::CPUTimer	signature:()
caffe::CPUTimer::MicroSeconds	util/benchmark.cpp	/^float CPUTimer::MicroSeconds() {$/;"	f	class:caffe::CPUTimer	signature:()
caffe::CPUTimer::MilliSeconds	util/benchmark.cpp	/^float CPUTimer::MilliSeconds() {$/;"	f	class:caffe::CPUTimer	signature:()
caffe::CPUTimer::Start	util/benchmark.cpp	/^void CPUTimer::Start() {$/;"	f	class:caffe::CPUTimer	signature:()
caffe::CPUTimer::Stop	util/benchmark.cpp	/^void CPUTimer::Stop() {$/;"	f	class:caffe::CPUTimer	signature:()
caffe::CVMatToDatum	util/io.cpp	/^void CVMatToDatum(const cv::Mat& cv_img, Datum* datum) {$/;"	f	namespace:caffe	signature:(const cv::Mat& cv_img, Datum* datum)
caffe::Caffe::Caffe	common.cpp	/^Caffe::Caffe()$/;"	f	class:caffe::Caffe	signature:()
caffe::Caffe::DeviceQuery	common.cpp	/^void Caffe::DeviceQuery() {$/;"	f	class:caffe::Caffe	signature:()
caffe::Caffe::Get	common.cpp	/^Caffe& Caffe::Get() {$/;"	f	class:caffe::Caffe	signature:()
caffe::Caffe::RNG::Generator	common.cpp	/^class Caffe::RNG::Generator {$/;"	c	class:caffe::Caffe::RNG	file:
caffe::Caffe::RNG::Generator::Generator	common.cpp	/^  Generator() : rng_(new caffe::rng_t(cluster_seedgen())) {}$/;"	f	class:caffe::Caffe::RNG::Generator	access:public	signature:()
caffe::Caffe::RNG::Generator::Generator	common.cpp	/^  explicit Generator(unsigned int seed) : rng_(new caffe::rng_t(seed)) {}$/;"	f	class:caffe::Caffe::RNG::Generator	access:public	signature:(unsigned int seed)
caffe::Caffe::RNG::Generator::rng	common.cpp	/^  caffe::rng_t* rng() { return rng_.get(); }$/;"	f	class:caffe::Caffe::RNG::Generator	access:public	signature:()
caffe::Caffe::RNG::Generator::rng_	common.cpp	/^  shared_ptr<caffe::rng_t> rng_;$/;"	m	class:caffe::Caffe::RNG::Generator	file:	access:private
caffe::Caffe::RNG::RNG	common.cpp	/^Caffe::RNG::RNG() : generator_(new Generator()) { }$/;"	f	class:caffe::Caffe::RNG	signature:()
caffe::Caffe::RNG::RNG	common.cpp	/^Caffe::RNG::RNG(unsigned int seed) : generator_(new Generator(seed)) { }$/;"	f	class:caffe::Caffe::RNG	signature:(unsigned int seed)
caffe::Caffe::RNG::generator	common.cpp	/^void* Caffe::RNG::generator() {$/;"	f	class:caffe::Caffe::RNG	signature:()
caffe::Caffe::RNG::operator =	common.cpp	/^Caffe::RNG& Caffe::RNG::operator=(const RNG& other) {$/;"	f	class:caffe::Caffe::RNG	signature:(const RNG& other)
caffe::Caffe::SetDevice	common.cpp	/^void Caffe::SetDevice(const int device_id) {$/;"	f	class:caffe::Caffe	signature:(const int device_id)
caffe::Caffe::set_random_seed	common.cpp	/^void Caffe::set_random_seed(const unsigned int seed) {$/;"	f	class:caffe::Caffe	signature:(const unsigned int seed)
caffe::Caffe::~Caffe	common.cpp	/^Caffe::~Caffe() { }$/;"	f	class:caffe::Caffe	signature:()
caffe::Caffe::~Caffe	common.cpp	/^Caffe::~Caffe() {$/;"	f	class:caffe::Caffe	signature:()
caffe::CommonTest	test/test_common.cpp	/^class CommonTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::ConcatLayer::Backward_cpu	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ConcatLayer::Forward_cpu	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConcatLayer::LayerSetUp	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConcatLayer::Reshape	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConcatLayerTest	test/test_concat_layer.cpp	/^class ConcatLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::ConcatLayerTest::ConcatLayerTest	test/test_concat_layer.cpp	/^  ConcatLayerTest()$/;"	f	class:caffe::ConcatLayerTest	access:protected	signature:()
caffe::ConcatLayerTest::Dtype	test/test_concat_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConcatLayerTest	file:	access:private
caffe::ConcatLayerTest::SetUp	test/test_concat_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConcatLayerTest	access:protected	signature:()
caffe::ConcatLayerTest::blob_bottom_0_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_0_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
caffe::ConcatLayerTest::blob_bottom_1_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_1_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
caffe::ConcatLayerTest::blob_bottom_2_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
caffe::ConcatLayerTest::blob_bottom_vec_0_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
caffe::ConcatLayerTest::blob_bottom_vec_1_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
caffe::ConcatLayerTest::blob_top_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
caffe::ConcatLayerTest::blob_top_vec_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConcatLayerTest	file:	access:protected
caffe::ConcatLayerTest::~ConcatLayerTest	test/test_concat_layer.cpp	/^  virtual ~ConcatLayerTest() {$/;"	f	class:caffe::ConcatLayerTest	access:protected	signature:()
caffe::ConfigureSplitLayer	util/insert_splits.cpp	/^void ConfigureSplitLayer(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe	signature:(const string& layer_name, const string& blob_name, const int blob_idx, const int split_count, const float loss_weight, LayerParameter* split_layer_param)
caffe::ConstantFillerTest	test/test_filler.cpp	/^class ConstantFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::ConstantFillerTest::ConstantFillerTest	test/test_filler.cpp	/^  ConstantFillerTest()$/;"	f	class:caffe::ConstantFillerTest	access:protected	signature:()
caffe::ConstantFillerTest::blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::ConstantFillerTest	file:	access:protected
caffe::ConstantFillerTest::filler_	test/test_filler.cpp	/^  shared_ptr<ConstantFiller<Dtype> > filler_;$/;"	m	class:caffe::ConstantFillerTest	file:	access:protected
caffe::ConstantFillerTest::filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::ConstantFillerTest	file:	access:protected
caffe::ConstantFillerTest::~ConstantFillerTest	test/test_filler.cpp	/^  virtual ~ConstantFillerTest() { delete blob_; }$/;"	f	class:caffe::ConstantFillerTest	access:protected	signature:()
caffe::ContrastiveLossLayer::Backward_cpu	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ContrastiveLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ContrastiveLossLayer::Forward_cpu	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ContrastiveLossLayer::LayerSetUp	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::ContrastiveLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^class ContrastiveLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::ContrastiveLossLayerTest::ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^  ContrastiveLossLayerTest()$/;"	f	class:caffe::ContrastiveLossLayerTest	access:protected	signature:()
caffe::ContrastiveLossLayerTest::Dtype	test/test_contrastive_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ContrastiveLossLayerTest	file:	access:private
caffe::ContrastiveLossLayerTest::blob_bottom_data_i_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_i_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
caffe::ContrastiveLossLayerTest::blob_bottom_data_j_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_j_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
caffe::ContrastiveLossLayerTest::blob_bottom_vec_	test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
caffe::ContrastiveLossLayerTest::blob_bottom_y_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_y_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
caffe::ContrastiveLossLayerTest::blob_top_loss_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
caffe::ContrastiveLossLayerTest::blob_top_vec_	test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:	access:protected
caffe::ContrastiveLossLayerTest::~ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^  virtual ~ContrastiveLossLayerTest() {$/;"	f	class:caffe::ContrastiveLossLayerTest	access:protected	signature:()
caffe::ConvolutionLayer::Backward_cpu	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ConvolutionLayer::Forward_cpu	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ConvolutionLayer::compute_output_shape	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::ConvolutionLayer	signature:()
caffe::ConvolutionLayerTest	test/test_convolution_layer.cpp	/^class ConvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::ConvolutionLayerTest::ConvolutionLayerTest	test/test_convolution_layer.cpp	/^  ConvolutionLayerTest()$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:()
caffe::ConvolutionLayerTest::Dtype	test/test_convolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConvolutionLayerTest	file:	access:private
caffe::ConvolutionLayerTest::MakeReferenceTop	test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:(Blob<Dtype>* top)
caffe::ConvolutionLayerTest::SetUp	test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:()
caffe::ConvolutionLayerTest::blob_bottom_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
caffe::ConvolutionLayerTest::blob_bottom_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
caffe::ConvolutionLayerTest::blob_bottom_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
caffe::ConvolutionLayerTest::blob_top_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
caffe::ConvolutionLayerTest::blob_top_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
caffe::ConvolutionLayerTest::blob_top_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
caffe::ConvolutionLayerTest::ref_blob_top_	test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
caffe::ConvolutionLayerTest::~ConvolutionLayerTest	test/test_convolution_layer.cpp	/^  virtual ~ConvolutionLayerTest() {$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:()
caffe::CuDNNConvolutionLayer::LayerSetUp	layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::CuDNNConvolutionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNConvolutionLayer::Reshape	layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::Reshape($/;"	f	class:caffe::CuDNNConvolutionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNConvolutionLayer::~CuDNNConvolutionLayer	layers/cudnn_conv_layer.cpp	/^CuDNNConvolutionLayer<Dtype>::~CuDNNConvolutionLayer() {$/;"	f	class:caffe::CuDNNConvolutionLayer	signature:()
caffe::CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^class CuDNNConvolutionLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
caffe::CuDNNConvolutionLayerTest::CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^  CuDNNConvolutionLayerTest()$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:()
caffe::CuDNNConvolutionLayerTest::MakeReferenceTop	test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:(Blob<Dtype>* top)
caffe::CuDNNConvolutionLayerTest::SetUp	test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:()
caffe::CuDNNConvolutionLayerTest::blob_bottom_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
caffe::CuDNNConvolutionLayerTest::blob_bottom_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
caffe::CuDNNConvolutionLayerTest::blob_bottom_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
caffe::CuDNNConvolutionLayerTest::blob_top_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
caffe::CuDNNConvolutionLayerTest::blob_top_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
caffe::CuDNNConvolutionLayerTest::blob_top_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
caffe::CuDNNConvolutionLayerTest::ref_blob_top_	test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
caffe::CuDNNConvolutionLayerTest::~CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^  virtual ~CuDNNConvolutionLayerTest() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:()
caffe::CuDNNLCNLayer::LayerSetUp	layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNLCNLayer::Reshape	layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNLCNLayer::~CuDNNLCNLayer	layers/cudnn_lcn_layer.cpp	/^CuDNNLCNLayer<Dtype>::~CuDNNLCNLayer() {$/;"	f	class:caffe::CuDNNLCNLayer	signature:()
caffe::CuDNNLRNLayer::LayerSetUp	layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNLRNLayer::Reshape	layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNLRNLayer::~CuDNNLRNLayer	layers/cudnn_lrn_layer.cpp	/^CuDNNLRNLayer<Dtype>::~CuDNNLRNLayer() {$/;"	f	class:caffe::CuDNNLRNLayer	signature:()
caffe::CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^class CuDNNLRNLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
caffe::CuDNNLRNLayerTest::CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^  CuDNNLRNLayerTest()$/;"	f	class:caffe::CuDNNLRNLayerTest	access:protected	signature:()
caffe::CuDNNLRNLayerTest::ReferenceLRNForward	test/test_lrn_layer.cpp	/^  void ReferenceLRNForward(const Blob<Dtype>& blob_bottom,$/;"	p	class:caffe::CuDNNLRNLayerTest	file:	access:protected	signature:(const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param, Blob<Dtype>* blob_top)
caffe::CuDNNLRNLayerTest::ReferenceLRNForward	test/test_lrn_layer.cpp	/^void CuDNNLRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::CuDNNLRNLayerTest	signature:( const Blob<TypeParam>& blob_bottom, const LayerParameter& layer_param, Blob<TypeParam>* blob_top)
caffe::CuDNNLRNLayerTest::SetUp	test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNLRNLayerTest	access:protected	signature:()
caffe::CuDNNLRNLayerTest::blob_bottom_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
caffe::CuDNNLRNLayerTest::blob_bottom_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
caffe::CuDNNLRNLayerTest::blob_top_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
caffe::CuDNNLRNLayerTest::blob_top_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
caffe::CuDNNLRNLayerTest::epsilon_	test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
caffe::CuDNNLRNLayerTest::~CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^  virtual ~CuDNNLRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNLRNLayerTest	access:protected	signature:()
caffe::CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^class CuDNNNeuronLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
caffe::CuDNNNeuronLayerTest::CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^  CuDNNNeuronLayerTest()$/;"	f	class:caffe::CuDNNNeuronLayerTest	access:protected	signature:()
caffe::CuDNNNeuronLayerTest::blob_bottom_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
caffe::CuDNNNeuronLayerTest::blob_bottom_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
caffe::CuDNNNeuronLayerTest::blob_top_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
caffe::CuDNNNeuronLayerTest::blob_top_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:	access:protected
caffe::CuDNNNeuronLayerTest::~CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^  virtual ~CuDNNNeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNNeuronLayerTest	access:protected	signature:()
caffe::CuDNNPoolingLayer::LayerSetUp	layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNPoolingLayer::Reshape	layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNPoolingLayer::~CuDNNPoolingLayer	layers/cudnn_pooling_layer.cpp	/^CuDNNPoolingLayer<Dtype>::~CuDNNPoolingLayer() {$/;"	f	class:caffe::CuDNNPoolingLayer	signature:()
caffe::CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^class CuDNNPoolingLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
caffe::CuDNNPoolingLayerTest::CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^  CuDNNPoolingLayerTest()$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
caffe::CuDNNPoolingLayerTest::SetUp	test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
caffe::CuDNNPoolingLayerTest::TestForwardRectHigh	test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
caffe::CuDNNPoolingLayerTest::TestForwardRectWide	test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
caffe::CuDNNPoolingLayerTest::TestForwardSquare	test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
caffe::CuDNNPoolingLayerTest::blob_bottom_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
caffe::CuDNNPoolingLayerTest::blob_bottom_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
caffe::CuDNNPoolingLayerTest::blob_top_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
caffe::CuDNNPoolingLayerTest::blob_top_mask_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
caffe::CuDNNPoolingLayerTest::blob_top_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:	access:protected
caffe::CuDNNPoolingLayerTest::~CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^  virtual ~CuDNNPoolingLayerTest() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
caffe::CuDNNReLULayer::LayerSetUp	layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNReLULayer::Reshape	layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNReLULayer::~CuDNNReLULayer	layers/cudnn_relu_layer.cpp	/^CuDNNReLULayer<Dtype>::~CuDNNReLULayer() {$/;"	f	class:caffe::CuDNNReLULayer	signature:()
caffe::CuDNNSigmoidLayer::LayerSetUp	layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNSigmoidLayer::Reshape	layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNSigmoidLayer::~CuDNNSigmoidLayer	layers/cudnn_sigmoid_layer.cpp	/^CuDNNSigmoidLayer<Dtype>::~CuDNNSigmoidLayer() {$/;"	f	class:caffe::CuDNNSigmoidLayer	signature:()
caffe::CuDNNSoftmaxLayer::LayerSetUp	layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNSoftmaxLayer::Reshape	layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNSoftmaxLayer::~CuDNNSoftmaxLayer	layers/cudnn_softmax_layer.cpp	/^CuDNNSoftmaxLayer<Dtype>::~CuDNNSoftmaxLayer() {$/;"	f	class:caffe::CuDNNSoftmaxLayer	signature:()
caffe::CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^class CuDNNSoftmaxLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:GPUDeviceTest
caffe::CuDNNSoftmaxLayerTest::CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^  CuDNNSoftmaxLayerTest()$/;"	f	class:caffe::CuDNNSoftmaxLayerTest	access:protected	signature:()
caffe::CuDNNSoftmaxLayerTest::blob_bottom_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
caffe::CuDNNSoftmaxLayerTest::blob_bottom_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
caffe::CuDNNSoftmaxLayerTest::blob_top_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
caffe::CuDNNSoftmaxLayerTest::blob_top_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:	access:protected
caffe::CuDNNSoftmaxLayerTest::~CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^  virtual ~CuDNNSoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNSoftmaxLayerTest	access:protected	signature:()
caffe::CuDNNTanHLayer::LayerSetUp	layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNTanHLayer::Reshape	layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::CuDNNTanHLayer::~CuDNNTanHLayer	layers/cudnn_tanh_layer.cpp	/^CuDNNTanHLayer<Dtype>::~CuDNNTanHLayer() {$/;"	f	class:caffe::CuDNNTanHLayer	signature:()
caffe::DBTest	test/test_db.cpp	/^class DBTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::DBTest::DBTest	test/test_db.cpp	/^  DBTest()$/;"	f	class:caffe::DBTest	access:protected	signature:()
caffe::DBTest::SetUp	test/test_db.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DBTest	access:protected	signature:()
caffe::DBTest::backend_	test/test_db.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DBTest	file:	access:protected
caffe::DBTest::root_images_	test/test_db.cpp	/^  string root_images_;$/;"	m	class:caffe::DBTest	file:	access:protected
caffe::DBTest::source_	test/test_db.cpp	/^  string source_;$/;"	m	class:caffe::DBTest	file:	access:protected
caffe::DBTest::~DBTest	test/test_db.cpp	/^  virtual ~DBTest() { }$/;"	f	class:caffe::DBTest	access:protected	signature:()
caffe::DataLayer::DataLayer	layers/data_layer.cpp	/^DataLayer<Dtype>::DataLayer(const LayerParameter& param)$/;"	f	class:caffe::DataLayer	signature:(const LayerParameter& param)
caffe::DataLayer::DataLayerSetUp	layers/data_layer.cpp	/^void DataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DataLayer::load_batch	layers/data_layer.cpp	/^void DataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::DataLayer	signature:(Batch<Dtype>* batch)
caffe::DataLayer::~DataLayer	layers/data_layer.cpp	/^DataLayer<Dtype>::~DataLayer() {$/;"	f	class:caffe::DataLayer	signature:()
caffe::DataLayerTest	test/test_data_layer.cpp	/^class DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::DataLayerTest::DataLayerTest	test/test_data_layer.cpp	/^  DataLayerTest()$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
caffe::DataLayerTest::Dtype	test/test_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DataLayerTest	file:	access:private
caffe::DataLayerTest::Fill	test/test_data_layer.cpp	/^  void Fill(const bool unique_pixels, DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:(const bool unique_pixels, DataParameter_DB backend)
caffe::DataLayerTest::SetUp	test/test_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
caffe::DataLayerTest::TestRead	test/test_data_layer.cpp	/^  void TestRead() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
caffe::DataLayerTest::TestReadCrop	test/test_data_layer.cpp	/^  void TestReadCrop(Phase phase) {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:(Phase phase)
caffe::DataLayerTest::TestReadCropTrainSequenceSeeded	test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceSeeded() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
caffe::DataLayerTest::TestReadCropTrainSequenceUnseeded	test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceUnseeded() {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
caffe::DataLayerTest::TestReshape	test/test_data_layer.cpp	/^  void TestReshape(DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest	access:protected	signature:(DataParameter_DB backend)
caffe::DataLayerTest::backend_	test/test_data_layer.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
caffe::DataLayerTest::blob_bottom_vec_	test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
caffe::DataLayerTest::blob_top_data_	test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
caffe::DataLayerTest::blob_top_label_	test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
caffe::DataLayerTest::blob_top_vec_	test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
caffe::DataLayerTest::filename_	test/test_data_layer.cpp	/^  shared_ptr<string> filename_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
caffe::DataLayerTest::seed_	test/test_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
caffe::DataLayerTest::~DataLayerTest	test/test_data_layer.cpp	/^  virtual ~DataLayerTest() { delete blob_top_data_; delete blob_top_label_; }$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
caffe::DataReader::Body::Body	data_reader.cpp	/^DataReader::Body::Body(const LayerParameter& param)$/;"	f	class:caffe::DataReader::Body	signature:(const LayerParameter& param)
caffe::DataReader::Body::InternalThreadEntry	data_reader.cpp	/^void DataReader::Body::InternalThreadEntry() {$/;"	f	class:caffe::DataReader::Body	signature:()
caffe::DataReader::Body::read_one	data_reader.cpp	/^void DataReader::Body::read_one(db::Cursor* cursor, QueuePair* qp) {$/;"	f	class:caffe::DataReader::Body	signature:(db::Cursor* cursor, QueuePair* qp)
caffe::DataReader::Body::~Body	data_reader.cpp	/^DataReader::Body::~Body() {$/;"	f	class:caffe::DataReader::Body	signature:()
caffe::DataReader::DataReader	data_reader.cpp	/^DataReader::DataReader(const LayerParameter& param)$/;"	f	class:caffe::DataReader	signature:(const LayerParameter& param)
caffe::DataReader::QueuePair::QueuePair	data_reader.cpp	/^DataReader::QueuePair::QueuePair(int size) {$/;"	f	class:caffe::DataReader::QueuePair	signature:(int size)
caffe::DataReader::QueuePair::~QueuePair	data_reader.cpp	/^DataReader::QueuePair::~QueuePair() {$/;"	f	class:caffe::DataReader::QueuePair	signature:()
caffe::DataReader::~DataReader	data_reader.cpp	/^DataReader::~DataReader() {$/;"	f	class:caffe::DataReader	signature:()
caffe::DataTransformTest	test/test_data_transformer.cpp	/^class DataTransformTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::DataTransformTest::DataTransformTest	test/test_data_transformer.cpp	/^  DataTransformTest()$/;"	f	class:caffe::DataTransformTest	access:protected	signature:()
caffe::DataTransformTest::NumSequenceMatches	test/test_data_transformer.cpp	/^  int NumSequenceMatches(const TransformationParameter transform_param,$/;"	f	class:caffe::DataTransformTest	access:protected	signature:(const TransformationParameter transform_param, const Datum& datum, Phase phase)
caffe::DataTransformTest::num_iter_	test/test_data_transformer.cpp	/^  int num_iter_;$/;"	m	class:caffe::DataTransformTest	file:	access:protected
caffe::DataTransformTest::seed_	test/test_data_transformer.cpp	/^  int seed_;$/;"	m	class:caffe::DataTransformTest	file:	access:protected
caffe::DataTransformTest::~DataTransformTest	test/test_data_transformer.cpp	/^  virtual ~DataTransformTest() { }$/;"	f	class:caffe::DataTransformTest	access:protected	signature:()
caffe::DataTransformer::DataTransformer	data_transformer.cpp	/^DataTransformer<Dtype>::DataTransformer(const TransformationParameter& param,$/;"	f	class:caffe::DataTransformer	signature:(const TransformationParameter& param, Phase phase)
caffe::DataTransformer::InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape($/;"	f	class:caffe::DataTransformer	signature:( const vector<Datum> & datum_vector)
caffe::DataTransformer::InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape($/;"	f	class:caffe::DataTransformer	signature:( const vector<cv::Mat> & mat_vector)
caffe::DataTransformer::InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const Datum& datum) {$/;"	f	class:caffe::DataTransformer	signature:(const Datum& datum)
caffe::DataTransformer::InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const cv::Mat& cv_img) {$/;"	f	class:caffe::DataTransformer	signature:(const cv::Mat& cv_img)
caffe::DataTransformer::InitRand	data_transformer.cpp	/^void DataTransformer<Dtype>::InitRand() {$/;"	f	class:caffe::DataTransformer	signature:()
caffe::DataTransformer::Rand	data_transformer.cpp	/^int DataTransformer<Dtype>::Rand(int n) {$/;"	f	class:caffe::DataTransformer	signature:(int n)
caffe::DataTransformer::Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(Blob<Dtype>* input_blob,$/;"	f	class:caffe::DataTransformer	signature:(Blob<Dtype>* input_blob, Blob<Dtype>* transformed_blob)
caffe::DataTransformer::Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const Datum& datum,$/;"	f	class:caffe::DataTransformer	signature:(const Datum& datum, Blob<Dtype>* transformed_blob)
caffe::DataTransformer::Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const Datum& datum,$/;"	f	class:caffe::DataTransformer	signature:(const Datum& datum, Dtype* transformed_data)
caffe::DataTransformer::Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const cv::Mat& cv_img,$/;"	f	class:caffe::DataTransformer	signature:(const cv::Mat& cv_img, Blob<Dtype>* transformed_blob)
caffe::DataTransformer::Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<Datum> & datum_vector,$/;"	f	class:caffe::DataTransformer	signature:(const vector<Datum> & datum_vector, Blob<Dtype>* transformed_blob)
caffe::DataTransformer::Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<cv::Mat> & mat_vector,$/;"	f	class:caffe::DataTransformer	signature:(const vector<cv::Mat> & mat_vector, Blob<Dtype>* transformed_blob)
caffe::DecodeDatum	util/io.cpp	/^bool DecodeDatum(Datum* datum, bool is_color) {$/;"	f	namespace:caffe	signature:(Datum* datum, bool is_color)
caffe::DecodeDatumNative	util/io.cpp	/^bool DecodeDatumNative(Datum* datum) {$/;"	f	namespace:caffe	signature:(Datum* datum)
caffe::DecodeDatumToCVMat	util/io.cpp	/^cv::Mat DecodeDatumToCVMat(const Datum& datum, bool is_color) {$/;"	f	namespace:caffe	signature:(const Datum& datum, bool is_color)
caffe::DecodeDatumToCVMatNative	util/io.cpp	/^cv::Mat DecodeDatumToCVMatNative(const Datum& datum) {$/;"	f	namespace:caffe	signature:(const Datum& datum)
caffe::DeconvolutionLayer::Backward_cpu	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::DeconvolutionLayer::Forward_cpu	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DeconvolutionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DeconvolutionLayer::compute_output_shape	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::DeconvolutionLayer	signature:()
caffe::DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^class DeconvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::DeconvolutionLayerTest::DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^  DeconvolutionLayerTest()$/;"	f	class:caffe::DeconvolutionLayerTest	access:protected	signature:()
caffe::DeconvolutionLayerTest::Dtype	test/test_deconvolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DeconvolutionLayerTest	file:	access:private
caffe::DeconvolutionLayerTest::SetUp	test/test_deconvolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DeconvolutionLayerTest	access:protected	signature:()
caffe::DeconvolutionLayerTest::blob_bottom_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
caffe::DeconvolutionLayerTest::blob_bottom_2_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
caffe::DeconvolutionLayerTest::blob_bottom_vec_	test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
caffe::DeconvolutionLayerTest::blob_top_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
caffe::DeconvolutionLayerTest::blob_top_2_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
caffe::DeconvolutionLayerTest::blob_top_vec_	test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:	access:protected
caffe::DeconvolutionLayerTest::~DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^  virtual ~DeconvolutionLayerTest() {$/;"	f	class:caffe::DeconvolutionLayerTest	access:protected	signature:()
caffe::DevicePair::compute	parallel.cpp	/^void DevicePair::compute(const vector<int> devices, vector<DevicePair>* pairs) {$/;"	f	class:caffe::DevicePair	signature:(const vector<int> devices, vector<DevicePair>* pairs)
caffe::DropoutLayer::Backward_cpu	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::DropoutLayer::Forward_cpu	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DropoutLayer::LayerSetUp	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DropoutLayer::Reshape	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DummyDataLayer::Forward_cpu	layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DummyDataLayer::LayerSetUp	layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^class DummyDataLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
caffe::DummyDataLayerTest::DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^  DummyDataLayerTest()$/;"	f	class:caffe::DummyDataLayerTest	access:protected	signature:()
caffe::DummyDataLayerTest::SetUp	test/test_dummy_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DummyDataLayerTest	access:protected	signature:()
caffe::DummyDataLayerTest::blob_bottom_vec_	test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
caffe::DummyDataLayerTest::blob_top_a_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
caffe::DummyDataLayerTest::blob_top_b_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
caffe::DummyDataLayerTest::blob_top_c_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_c_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
caffe::DummyDataLayerTest::blob_top_vec_	test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:	access:protected
caffe::DummyDataLayerTest::~DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^  virtual ~DummyDataLayerTest() {$/;"	f	class:caffe::DummyDataLayerTest	access:protected	signature:()
caffe::EltwiseLayer::Backward_cpu	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::EltwiseLayer::Forward_cpu	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::EltwiseLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EltwiseLayer::LayerSetUp	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EltwiseLayer::Reshape	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EltwiseLayerTest	test/test_eltwise_layer.cpp	/^class EltwiseLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::EltwiseLayerTest::Dtype	test/test_eltwise_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EltwiseLayerTest	file:	access:private
caffe::EltwiseLayerTest::EltwiseLayerTest	test/test_eltwise_layer.cpp	/^  EltwiseLayerTest()$/;"	f	class:caffe::EltwiseLayerTest	access:protected	signature:()
caffe::EltwiseLayerTest::blob_bottom_a_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_a_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
caffe::EltwiseLayerTest::blob_bottom_b_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_b_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
caffe::EltwiseLayerTest::blob_bottom_c_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_c_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
caffe::EltwiseLayerTest::blob_bottom_vec_	test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
caffe::EltwiseLayerTest::blob_top_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
caffe::EltwiseLayerTest::blob_top_vec_	test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:	access:protected
caffe::EltwiseLayerTest::~EltwiseLayerTest	test/test_eltwise_layer.cpp	/^  virtual ~EltwiseLayerTest() {$/;"	f	class:caffe::EltwiseLayerTest	access:protected	signature:()
caffe::EmbedLayer::Backward_cpu	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::EmbedLayer::Forward_cpu	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EmbedLayer::LayerSetUp	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EmbedLayer::Reshape	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EmbedLayerTest	test/test_embed_layer.cpp	/^class EmbedLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::EmbedLayerTest::Dtype	test/test_embed_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EmbedLayerTest	file:	access:private
caffe::EmbedLayerTest::EmbedLayerTest	test/test_embed_layer.cpp	/^  EmbedLayerTest()$/;"	f	class:caffe::EmbedLayerTest	access:protected	signature:()
caffe::EmbedLayerTest::blob_bottom_	test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
caffe::EmbedLayerTest::blob_bottom_vec_	test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
caffe::EmbedLayerTest::blob_top_	test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
caffe::EmbedLayerTest::blob_top_vec_	test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:	access:protected
caffe::EmbedLayerTest::~EmbedLayerTest	test/test_embed_layer.cpp	/^  virtual ~EmbedLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::EmbedLayerTest	access:protected	signature:()
caffe::EuclideanLossLayer::Backward_cpu	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::EuclideanLossLayer::Forward_cpu	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EuclideanLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EuclideanLossLayer::Reshape	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Reshape($/;"	f	class:caffe::EuclideanLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^class EuclideanLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::EuclideanLossLayerTest::Dtype	test/test_euclidean_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EuclideanLossLayerTest	file:	access:private
caffe::EuclideanLossLayerTest::EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^  EuclideanLossLayerTest()$/;"	f	class:caffe::EuclideanLossLayerTest	access:protected	signature:()
caffe::EuclideanLossLayerTest::TestForward	test/test_euclidean_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::EuclideanLossLayerTest	access:protected	signature:()
caffe::EuclideanLossLayerTest::blob_bottom_data_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
caffe::EuclideanLossLayerTest::blob_bottom_label_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
caffe::EuclideanLossLayerTest::blob_bottom_vec_	test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
caffe::EuclideanLossLayerTest::blob_top_loss_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
caffe::EuclideanLossLayerTest::blob_top_vec_	test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:	access:protected
caffe::EuclideanLossLayerTest::~EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^  virtual ~EuclideanLossLayerTest() {$/;"	f	class:caffe::EuclideanLossLayerTest	access:protected	signature:()
caffe::ExpLayer::Backward_cpu	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ExpLayer::Forward_cpu	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ExpLayer::LayerSetUp	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FillDatum	test/test_data_transformer.cpp	/^void FillDatum(const int label, const int channels, const int height,$/;"	f	namespace:caffe	signature:(const int label, const int channels, const int height, const int width, const bool unique_pixels, Datum * datum)
caffe::FilterLayer::Backward_cpu	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::FilterLayer::Forward_cpu	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FilterLayer::LayerSetUp	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FilterLayer::Reshape	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FilterLayerTest	test/test_filter_layer.cpp	/^class FilterLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::FilterLayerTest::Dtype	test/test_filter_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FilterLayerTest	file:	access:private
caffe::FilterLayerTest::FilterLayerTest	test/test_filter_layer.cpp	/^  FilterLayerTest()$/;"	f	class:caffe::FilterLayerTest	access:protected	signature:()
caffe::FilterLayerTest::SetUp	test/test_filter_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::FilterLayerTest	access:protected	signature:()
caffe::FilterLayerTest::blob_bottom_data_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
caffe::FilterLayerTest::blob_bottom_labels_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_labels_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
caffe::FilterLayerTest::blob_bottom_selector_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_selector_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
caffe::FilterLayerTest::blob_bottom_vec_	test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
caffe::FilterLayerTest::blob_top_data_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
caffe::FilterLayerTest::blob_top_labels_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_labels_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
caffe::FilterLayerTest::blob_top_vec_	test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FilterLayerTest	file:	access:protected
caffe::FilterLayerTest::~FilterLayerTest	test/test_filter_layer.cpp	/^  virtual ~FilterLayerTest() {$/;"	f	class:caffe::FilterLayerTest	access:protected	signature:()
caffe::FilterNetTest	test/test_net.cpp	/^class FilterNetTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::FilterNetTest::RunFilterNetTest	test/test_net.cpp	/^  void RunFilterNetTest($/;"	f	class:caffe::FilterNetTest	access:protected	signature:( const string& input_param_string, const string& filtered_param_string)
caffe::FlattenLayer::Backward_cpu	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::FlattenLayer::Forward_cpu	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FlattenLayer::Reshape	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::FlattenLayerTest	test/test_flatten_layer.cpp	/^class FlattenLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::FlattenLayerTest::Dtype	test/test_flatten_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FlattenLayerTest	file:	access:private
caffe::FlattenLayerTest::FlattenLayerTest	test/test_flatten_layer.cpp	/^  FlattenLayerTest()$/;"	f	class:caffe::FlattenLayerTest	access:protected	signature:()
caffe::FlattenLayerTest::blob_bottom_	test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
caffe::FlattenLayerTest::blob_bottom_vec_	test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
caffe::FlattenLayerTest::blob_top_	test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
caffe::FlattenLayerTest::blob_top_vec_	test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:	access:protected
caffe::FlattenLayerTest::~FlattenLayerTest	test/test_flatten_layer.cpp	/^  virtual ~FlattenLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::FlattenLayerTest	access:protected	signature:()
caffe::GPUMathFunctionsTest	test/test_math_functions.cpp	/^class GPUMathFunctionsTest : public MathFunctionsTest<GPUDevice<Dtype> > {$/;"	c	namespace:caffe	file:	inherits:MathFunctionsTest
caffe::GPUParams::GPUParams	parallel.cpp	/^GPUParams<Dtype>::GPUParams(shared_ptr<Solver<Dtype> > root_solver, int device)$/;"	f	class:caffe::GPUParams	signature:(shared_ptr<Solver<Dtype> > root_solver, int device)
caffe::GPUParams::configure	parallel.cpp	/^void GPUParams<Dtype>::configure(Solver<Dtype>* solver) const {$/;"	f	class:caffe::GPUParams	signature:(Solver<Dtype>* solver) const
caffe::GPUParams::~GPUParams	parallel.cpp	/^GPUParams<Dtype>::~GPUParams() {$/;"	f	class:caffe::GPUParams	signature:()
caffe::GPUStochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class GPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:	inherits:StochasticPoolingLayerTest
caffe::GaussianFillerTest	test/test_filler.cpp	/^class GaussianFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::GaussianFillerTest::GaussianFillerTest	test/test_filler.cpp	/^  GaussianFillerTest()$/;"	f	class:caffe::GaussianFillerTest	access:protected	signature:()
caffe::GaussianFillerTest::blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::GaussianFillerTest	file:	access:protected
caffe::GaussianFillerTest::filler_	test/test_filler.cpp	/^  shared_ptr<GaussianFiller<Dtype> > filler_;$/;"	m	class:caffe::GaussianFillerTest	file:	access:protected
caffe::GaussianFillerTest::filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::GaussianFillerTest	file:	access:protected
caffe::GaussianFillerTest::~GaussianFillerTest	test/test_filler.cpp	/^  virtual ~GaussianFillerTest() { delete blob_; }$/;"	f	class:caffe::GaussianFillerTest	access:protected	signature:()
caffe::GemmTest	test/test_util_blas.cpp	/^class GemmTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::GetConvolutionLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetConvolutionLayer($/;"	f	namespace:caffe	signature:( const LayerParameter& param)
caffe::GetLRNLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetLRNLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
caffe::GetPoolingLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPoolingLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
caffe::GetPythonLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPythonLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
caffe::GetReLULayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetReLULayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
caffe::GetSigmoidLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSigmoidLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
caffe::GetSoftmaxLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSoftmaxLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
caffe::GetTanHLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetTanHLayer(const LayerParameter& param) {$/;"	f	namespace:caffe	signature:(const LayerParameter& param)
caffe::GlobalInit	common.cpp	/^void GlobalInit(int* pargc, char*** pargv) {$/;"	f	namespace:caffe	signature:(int* pargc, char*** pargv)
caffe::GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^class GradientBasedSolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::GradientBasedSolverTest::CheckAccumulation	test/test_gradient_based_solver.cpp	/^  void CheckAccumulation(const Dtype kLearningRate, const Dtype kWeightDecay,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype kLearningRate, const Dtype kWeightDecay, const Dtype kMomentum, const int kNumIters, const int kIterSize)
caffe::GradientBasedSolverTest::CheckLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void CheckLeastSquaresUpdate($/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:( const vector<shared_ptr<Blob<Dtype> > >& updated_params)
caffe::GradientBasedSolverTest::ComputeLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void ComputeLeastSquaresUpdate(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate, const Dtype weight_decay, const Dtype momentum, const int num_iters, vector<shared_ptr<Blob<Dtype> > >* updated_params)
caffe::GradientBasedSolverTest::Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::GradientBasedSolverTest	file:	access:private
caffe::GradientBasedSolverTest::GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^  GradientBasedSolverTest() :$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:()
caffe::GradientBasedSolverTest::InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) = 0;$/;"	p	class:caffe::GradientBasedSolverTest	file:	access:protected	signature:(const SolverParameter& param)
caffe::GradientBasedSolverTest::InitSolverFromProtoString	test/test_gradient_based_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const string& proto)
caffe::GradientBasedSolverTest::RunLeastSquaresSolver	test/test_gradient_based_solver.cpp	/^  string RunLeastSquaresSolver(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate, const Dtype weight_decay, const Dtype momentum, const int num_iters, const int iter_size = 1, const int devices = 1, const bool snapshot = false, const char* from_snapshot = NULL)
caffe::GradientBasedSolverTest::TestLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void TestLeastSquaresUpdate(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate = 1.0, const Dtype weight_decay = 0.0, const Dtype momentum = 0.0, const int iter_to_check = 0)
caffe::GradientBasedSolverTest::TestSnapshot	test/test_gradient_based_solver.cpp	/^  void TestSnapshot(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:(const Dtype learning_rate = 1.0, const Dtype weight_decay = 0.0, const Dtype momentum = 0.0, const int num_iters = 1)
caffe::GradientBasedSolverTest::channels_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::delta_	test/test_gradient_based_solver.cpp	/^  Dtype delta_;  \/\/ Stability constant for RMSProp, AdaGrad, AdaDelta and Adam$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::height_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::input_file_	test/test_gradient_based_solver.cpp	/^  string* input_file_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::num_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::seed_	test/test_gradient_based_solver.cpp	/^  int seed_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::share_	test/test_gradient_based_solver.cpp	/^  bool share_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::snapshot_prefix_	test/test_gradient_based_solver.cpp	/^  string snapshot_prefix_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::solver_	test/test_gradient_based_solver.cpp	/^  shared_ptr<SGDSolver<Dtype> > solver_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::sync_	test/test_gradient_based_solver.cpp	/^  shared_ptr<P2PSync<Dtype> > sync_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::width_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
caffe::GradientBasedSolverTest::~GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^  ~GradientBasedSolverTest() {$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:()
caffe::HDF5DataLayer::Forward_cpu	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5DataLayer::LayerSetUp	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5DataLayer::LoadHDF5FileData	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LoadHDF5FileData(const char* filename) {$/;"	f	class:caffe::HDF5DataLayer	signature:(const char* filename)
caffe::HDF5DataLayer::~HDF5DataLayer	layers/hdf5_data_layer.cpp	/^HDF5DataLayer<Dtype>::~HDF5DataLayer<Dtype>() { }$/;"	f	class:caffe::HDF5DataLayer	signature:()
caffe::HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^class HDF5DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::HDF5DataLayerTest::Dtype	test/test_hdf5data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5DataLayerTest	file:	access:private
caffe::HDF5DataLayerTest::HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^  HDF5DataLayerTest()$/;"	f	class:caffe::HDF5DataLayerTest	access:protected	signature:()
caffe::HDF5DataLayerTest::SetUp	test/test_hdf5data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::HDF5DataLayerTest	access:protected	signature:()
caffe::HDF5DataLayerTest::blob_bottom_vec_	test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
caffe::HDF5DataLayerTest::blob_top_data_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
caffe::HDF5DataLayerTest::blob_top_label2_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label2_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
caffe::HDF5DataLayerTest::blob_top_label_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
caffe::HDF5DataLayerTest::blob_top_vec_	test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
caffe::HDF5DataLayerTest::filename	test/test_hdf5data_layer.cpp	/^  string* filename;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
caffe::HDF5DataLayerTest::~HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^  virtual ~HDF5DataLayerTest() {$/;"	f	class:caffe::HDF5DataLayerTest	access:protected	signature:()
caffe::HDF5OutputLayer::Backward_cpu	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::HDF5OutputLayer::Forward_cpu	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5OutputLayer::LayerSetUp	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HDF5OutputLayer::SaveBlobs	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::SaveBlobs() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
caffe::HDF5OutputLayer::~HDF5OutputLayer	layers/hdf5_output_layer.cpp	/^HDF5OutputLayer<Dtype>::~HDF5OutputLayer<Dtype>() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
caffe::HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^class HDF5OutputLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::HDF5OutputLayerTest::CheckBlobEqual	test/test_hdf5_output_layer.cpp	/^  void CheckBlobEqual(const Blob<Dtype>& b1, const Blob<Dtype>& b2);$/;"	p	class:caffe::HDF5OutputLayerTest	file:	access:protected	signature:(const Blob<Dtype>& b1, const Blob<Dtype>& b2)
caffe::HDF5OutputLayerTest::CheckBlobEqual	test/test_hdf5_output_layer.cpp	/^void HDF5OutputLayerTest<TypeParam>::CheckBlobEqual(const Blob<Dtype>& b1,$/;"	f	class:caffe::HDF5OutputLayerTest	signature:(const Blob<Dtype>& b1, const Blob<Dtype>& b2)
caffe::HDF5OutputLayerTest::Dtype	test/test_hdf5_output_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5OutputLayerTest	file:	access:private
caffe::HDF5OutputLayerTest::HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^  HDF5OutputLayerTest()$/;"	f	class:caffe::HDF5OutputLayerTest	access:protected	signature:()
caffe::HDF5OutputLayerTest::blob_bottom_vec_	test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::blob_data_	test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_data_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::blob_label_	test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_label_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::blob_top_vec_	test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::channels_	test/test_hdf5_output_layer.cpp	/^  int channels_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::height_	test/test_hdf5_output_layer.cpp	/^  int height_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::input_file_name_	test/test_hdf5_output_layer.cpp	/^  string input_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::num_	test/test_hdf5_output_layer.cpp	/^  int num_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::output_file_name_	test/test_hdf5_output_layer.cpp	/^  string output_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::width_	test/test_hdf5_output_layer.cpp	/^  int width_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
caffe::HDF5OutputLayerTest::~HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^  virtual ~HDF5OutputLayerTest() {$/;"	f	class:caffe::HDF5OutputLayerTest	access:protected	signature:()
caffe::HingeLossLayer::Backward_cpu	layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::HingeLossLayer::Forward_cpu	layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HingeLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^class HingeLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::HingeLossLayerTest::Dtype	test/test_hinge_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HingeLossLayerTest	file:	access:private
caffe::HingeLossLayerTest::HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^  HingeLossLayerTest()$/;"	f	class:caffe::HingeLossLayerTest	access:protected	signature:()
caffe::HingeLossLayerTest::blob_bottom_data_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
caffe::HingeLossLayerTest::blob_bottom_label_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
caffe::HingeLossLayerTest::blob_bottom_vec_	test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
caffe::HingeLossLayerTest::blob_top_loss_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
caffe::HingeLossLayerTest::blob_top_vec_	test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:	access:protected
caffe::HingeLossLayerTest::~HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^  virtual ~HingeLossLayerTest() {$/;"	f	class:caffe::HingeLossLayerTest	access:protected	signature:()
caffe::INSTANTIATE_CLASS	blob.cpp	/^INSTANTIATE_CLASS(Blob);$/;"	p	namespace:caffe	file:	signature:(Blob)
caffe::INSTANTIATE_CLASS	data_transformer.cpp	/^INSTANTIATE_CLASS(DataTransformer);$/;"	p	namespace:caffe	file:	signature:(DataTransformer)
caffe::INSTANTIATE_CLASS	layer.cpp	/^INSTANTIATE_CLASS(Layer);$/;"	p	namespace:caffe	file:	signature:(Layer)
caffe::INSTANTIATE_CLASS	layers/absval_layer.cpp	/^INSTANTIATE_CLASS(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
caffe::INSTANTIATE_CLASS	layers/accuracy_layer.cpp	/^INSTANTIATE_CLASS(AccuracyLayer);$/;"	p	namespace:caffe	file:	signature:(AccuracyLayer)
caffe::INSTANTIATE_CLASS	layers/argmax_layer.cpp	/^INSTANTIATE_CLASS(ArgMaxLayer);$/;"	p	namespace:caffe	file:	signature:(ArgMaxLayer)
caffe::INSTANTIATE_CLASS	layers/base_conv_layer.cpp	/^INSTANTIATE_CLASS(BaseConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(BaseConvolutionLayer)
caffe::INSTANTIATE_CLASS	layers/base_data_layer.cpp	/^INSTANTIATE_CLASS(BaseDataLayer);$/;"	p	namespace:caffe	file:	signature:(BaseDataLayer)
caffe::INSTANTIATE_CLASS	layers/base_data_layer.cpp	/^INSTANTIATE_CLASS(BasePrefetchingDataLayer);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer)
caffe::INSTANTIATE_CLASS	layers/batch_norm_layer.cpp	/^INSTANTIATE_CLASS(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
caffe::INSTANTIATE_CLASS	layers/batch_reindex_layer.cpp	/^INSTANTIATE_CLASS(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
caffe::INSTANTIATE_CLASS	layers/bnll_layer.cpp	/^INSTANTIATE_CLASS(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
caffe::INSTANTIATE_CLASS	layers/concat_layer.cpp	/^INSTANTIATE_CLASS(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
caffe::INSTANTIATE_CLASS	layers/contrastive_loss_layer.cpp	/^INSTANTIATE_CLASS(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
caffe::INSTANTIATE_CLASS	layers/conv_layer.cpp	/^INSTANTIATE_CLASS(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_conv_layer.cpp	/^INSTANTIATE_CLASS(CuDNNConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNConvolutionLayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_lcn_layer.cpp	/^INSTANTIATE_CLASS(CuDNNLCNLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNLCNLayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_lrn_layer.cpp	/^INSTANTIATE_CLASS(CuDNNLRNLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNLRNLayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_pooling_layer.cpp	/^INSTANTIATE_CLASS(CuDNNPoolingLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNPoolingLayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_relu_layer.cpp	/^INSTANTIATE_CLASS(CuDNNReLULayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNReLULayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_sigmoid_layer.cpp	/^INSTANTIATE_CLASS(CuDNNSigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNSigmoidLayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_softmax_layer.cpp	/^INSTANTIATE_CLASS(CuDNNSoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNSoftmaxLayer)
caffe::INSTANTIATE_CLASS	layers/cudnn_tanh_layer.cpp	/^INSTANTIATE_CLASS(CuDNNTanHLayer);$/;"	p	namespace:caffe	file:	signature:(CuDNNTanHLayer)
caffe::INSTANTIATE_CLASS	layers/data_layer.cpp	/^INSTANTIATE_CLASS(DataLayer);$/;"	p	namespace:caffe	file:	signature:(DataLayer)
caffe::INSTANTIATE_CLASS	layers/deconv_layer.cpp	/^INSTANTIATE_CLASS(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
caffe::INSTANTIATE_CLASS	layers/dropout_layer.cpp	/^INSTANTIATE_CLASS(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
caffe::INSTANTIATE_CLASS	layers/dummy_data_layer.cpp	/^INSTANTIATE_CLASS(DummyDataLayer);$/;"	p	namespace:caffe	file:	signature:(DummyDataLayer)
caffe::INSTANTIATE_CLASS	layers/eltwise_layer.cpp	/^INSTANTIATE_CLASS(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
caffe::INSTANTIATE_CLASS	layers/embed_layer.cpp	/^INSTANTIATE_CLASS(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
caffe::INSTANTIATE_CLASS	layers/euclidean_loss_layer.cpp	/^INSTANTIATE_CLASS(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
caffe::INSTANTIATE_CLASS	layers/exp_layer.cpp	/^INSTANTIATE_CLASS(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
caffe::INSTANTIATE_CLASS	layers/filter_layer.cpp	/^INSTANTIATE_CLASS(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
caffe::INSTANTIATE_CLASS	layers/flatten_layer.cpp	/^INSTANTIATE_CLASS(FlattenLayer);$/;"	p	namespace:caffe	file:	signature:(FlattenLayer)
caffe::INSTANTIATE_CLASS	layers/hdf5_data_layer.cpp	/^INSTANTIATE_CLASS(HDF5DataLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer)
caffe::INSTANTIATE_CLASS	layers/hdf5_output_layer.cpp	/^INSTANTIATE_CLASS(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
caffe::INSTANTIATE_CLASS	layers/hinge_loss_layer.cpp	/^INSTANTIATE_CLASS(HingeLossLayer);$/;"	p	namespace:caffe	file:	signature:(HingeLossLayer)
caffe::INSTANTIATE_CLASS	layers/im2col_layer.cpp	/^INSTANTIATE_CLASS(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
caffe::INSTANTIATE_CLASS	layers/image_data_layer.cpp	/^INSTANTIATE_CLASS(ImageDataLayer);$/;"	p	namespace:caffe	file:	signature:(ImageDataLayer)
caffe::INSTANTIATE_CLASS	layers/infogain_loss_layer.cpp	/^INSTANTIATE_CLASS(InfogainLossLayer);$/;"	p	namespace:caffe	file:	signature:(InfogainLossLayer)
caffe::INSTANTIATE_CLASS	layers/inner_product_layer.cpp	/^INSTANTIATE_CLASS(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
caffe::INSTANTIATE_CLASS	layers/local_conv.cpp	/^INSTANTIATE_CLASS(LocalConvLayer);$/;"	p	namespace:caffe	file:	signature:(LocalConvLayer)
caffe::INSTANTIATE_CLASS	layers/log_layer.cpp	/^INSTANTIATE_CLASS(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
caffe::INSTANTIATE_CLASS	layers/loss_layer.cpp	/^INSTANTIATE_CLASS(LossLayer);$/;"	p	namespace:caffe	file:	signature:(LossLayer)
caffe::INSTANTIATE_CLASS	layers/lrn_layer.cpp	/^INSTANTIATE_CLASS(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
caffe::INSTANTIATE_CLASS	layers/memory_data_layer.cpp	/^INSTANTIATE_CLASS(MemoryDataLayer);$/;"	p	namespace:caffe	file:	signature:(MemoryDataLayer)
caffe::INSTANTIATE_CLASS	layers/multinomial_logistic_loss_layer.cpp	/^INSTANTIATE_CLASS(MultinomialLogisticLossLayer);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLossLayer)
caffe::INSTANTIATE_CLASS	layers/mvn_layer.cpp	/^INSTANTIATE_CLASS(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
caffe::INSTANTIATE_CLASS	layers/neuron_layer.cpp	/^INSTANTIATE_CLASS(NeuronLayer);$/;"	p	namespace:caffe	file:	signature:(NeuronLayer)
caffe::INSTANTIATE_CLASS	layers/pooling_layer.cpp	/^INSTANTIATE_CLASS(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
caffe::INSTANTIATE_CLASS	layers/power_layer.cpp	/^INSTANTIATE_CLASS(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
caffe::INSTANTIATE_CLASS	layers/prelu_layer.cpp	/^INSTANTIATE_CLASS(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
caffe::INSTANTIATE_CLASS	layers/reduction_layer.cpp	/^INSTANTIATE_CLASS(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
caffe::INSTANTIATE_CLASS	layers/relu_layer.cpp	/^INSTANTIATE_CLASS(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
caffe::INSTANTIATE_CLASS	layers/reshape_layer.cpp	/^INSTANTIATE_CLASS(ReshapeLayer);$/;"	p	namespace:caffe	file:	signature:(ReshapeLayer)
caffe::INSTANTIATE_CLASS	layers/sigmoid_cross_entropy_loss_layer.cpp	/^INSTANTIATE_CLASS(SigmoidCrossEntropyLossLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer)
caffe::INSTANTIATE_CLASS	layers/sigmoid_layer.cpp	/^INSTANTIATE_CLASS(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
caffe::INSTANTIATE_CLASS	layers/silence_layer.cpp	/^INSTANTIATE_CLASS(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
caffe::INSTANTIATE_CLASS	layers/slice_layer.cpp	/^INSTANTIATE_CLASS(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
caffe::INSTANTIATE_CLASS	layers/softmax_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
caffe::INSTANTIATE_CLASS	layers/softmax_loss_layer.cpp	/^INSTANTIATE_CLASS(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
caffe::INSTANTIATE_CLASS	layers/split_layer.cpp	/^INSTANTIATE_CLASS(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
caffe::INSTANTIATE_CLASS	layers/spp_layer.cpp	/^INSTANTIATE_CLASS(SPPLayer);$/;"	p	namespace:caffe	file:	signature:(SPPLayer)
caffe::INSTANTIATE_CLASS	layers/tanh_layer.cpp	/^INSTANTIATE_CLASS(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
caffe::INSTANTIATE_CLASS	layers/threshold_layer.cpp	/^INSTANTIATE_CLASS(ThresholdLayer);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer)
caffe::INSTANTIATE_CLASS	layers/tile_layer.cpp	/^INSTANTIATE_CLASS(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
caffe::INSTANTIATE_CLASS	layers/wangzhy_layer.cpp	/^INSTANTIATE_CLASS(WangzhyLayer);$/;"	p	namespace:caffe	file:	signature:(WangzhyLayer)
caffe::INSTANTIATE_CLASS	layers/window_data_layer.cpp	/^INSTANTIATE_CLASS(WindowDataLayer);$/;"	p	namespace:caffe	file:	signature:(WindowDataLayer)
caffe::INSTANTIATE_CLASS	net.cpp	/^INSTANTIATE_CLASS(Net);$/;"	p	namespace:caffe	file:	signature:(Net)
caffe::INSTANTIATE_CLASS	parallel.cpp	/^INSTANTIATE_CLASS(GPUParams);$/;"	p	namespace:caffe	file:	signature:(GPUParams)
caffe::INSTANTIATE_CLASS	parallel.cpp	/^INSTANTIATE_CLASS(P2PSync);$/;"	p	namespace:caffe	file:	signature:(P2PSync)
caffe::INSTANTIATE_CLASS	parallel.cpp	/^INSTANTIATE_CLASS(Params);$/;"	p	namespace:caffe	file:	signature:(Params)
caffe::INSTANTIATE_CLASS	solver.cpp	/^INSTANTIATE_CLASS(Solver);$/;"	p	namespace:caffe	file:	signature:(Solver)
caffe::INSTANTIATE_CLASS	solvers/adadelta_solver.cpp	/^INSTANTIATE_CLASS(AdaDeltaSolver);$/;"	p	namespace:caffe	file:	signature:(AdaDeltaSolver)
caffe::INSTANTIATE_CLASS	solvers/adagrad_solver.cpp	/^INSTANTIATE_CLASS(AdaGradSolver);$/;"	p	namespace:caffe	file:	signature:(AdaGradSolver)
caffe::INSTANTIATE_CLASS	solvers/adam_solver.cpp	/^INSTANTIATE_CLASS(AdamSolver);$/;"	p	namespace:caffe	file:	signature:(AdamSolver)
caffe::INSTANTIATE_CLASS	solvers/nesterov_solver.cpp	/^INSTANTIATE_CLASS(NesterovSolver);$/;"	p	namespace:caffe	file:	signature:(NesterovSolver)
caffe::INSTANTIATE_CLASS	solvers/rmsprop_solver.cpp	/^INSTANTIATE_CLASS(RMSPropSolver);$/;"	p	namespace:caffe	file:	signature:(RMSPropSolver)
caffe::INSTANTIATE_CLASS	solvers/sgd_solver.cpp	/^INSTANTIATE_CLASS(SGDSolver);$/;"	p	namespace:caffe	file:	signature:(SGDSolver)
caffe::IOTest	test/test_io.cpp	/^class IOTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::Im2colLayer::Backward_cpu	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::Im2colLayer::Forward_cpu	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::Im2colLayer::LayerSetUp	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::Im2colLayer::Reshape	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::Im2colLayerTest	test/test_im2col_layer.cpp	/^class Im2colLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::Im2colLayerTest::Dtype	test/test_im2col_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::Im2colLayerTest	file:	access:private
caffe::Im2colLayerTest::Im2colLayerTest	test/test_im2col_layer.cpp	/^  Im2colLayerTest()$/;"	f	class:caffe::Im2colLayerTest	access:protected	signature:()
caffe::Im2colLayerTest::blob_bottom_	test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
caffe::Im2colLayerTest::blob_bottom_vec_	test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
caffe::Im2colLayerTest::blob_top_	test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
caffe::Im2colLayerTest::blob_top_vec_	test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:	access:protected
caffe::Im2colLayerTest::~Im2colLayerTest	test/test_im2col_layer.cpp	/^  virtual ~Im2colLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::Im2colLayerTest	access:protected	signature:()
caffe::ImageDataLayer::DataLayerSetUp	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ImageDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ImageDataLayer::ShuffleImages	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::ShuffleImages() {$/;"	f	class:caffe::ImageDataLayer	signature:()
caffe::ImageDataLayer::load_batch	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::ImageDataLayer	signature:(Batch<Dtype>* batch)
caffe::ImageDataLayer::~ImageDataLayer	layers/image_data_layer.cpp	/^ImageDataLayer<Dtype>::~ImageDataLayer<Dtype>() {$/;"	f	class:caffe::ImageDataLayer	signature:()
caffe::ImageDataLayerTest	test/test_image_data_layer.cpp	/^class ImageDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::ImageDataLayerTest::Dtype	test/test_image_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ImageDataLayerTest	file:	access:private
caffe::ImageDataLayerTest::ImageDataLayerTest	test/test_image_data_layer.cpp	/^  ImageDataLayerTest()$/;"	f	class:caffe::ImageDataLayerTest	access:protected	signature:()
caffe::ImageDataLayerTest::SetUp	test/test_image_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ImageDataLayerTest	access:protected	signature:()
caffe::ImageDataLayerTest::blob_bottom_vec_	test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
caffe::ImageDataLayerTest::blob_top_data_	test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
caffe::ImageDataLayerTest::blob_top_label_	test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
caffe::ImageDataLayerTest::blob_top_vec_	test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
caffe::ImageDataLayerTest::filename_	test/test_image_data_layer.cpp	/^  string filename_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
caffe::ImageDataLayerTest::filename_reshape_	test/test_image_data_layer.cpp	/^  string filename_reshape_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
caffe::ImageDataLayerTest::seed_	test/test_image_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
caffe::ImageDataLayerTest::~ImageDataLayerTest	test/test_image_data_layer.cpp	/^  virtual ~ImageDataLayerTest() {$/;"	f	class:caffe::ImageDataLayerTest	access:protected	signature:()
caffe::InfogainLossLayer::Backward_cpu	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::InfogainLossLayer::Forward_cpu	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InfogainLossLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InfogainLossLayer::LayerSetUp	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InfogainLossLayer::Reshape	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Reshape($/;"	f	class:caffe::InfogainLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^class InfogainLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::InfogainLossLayerTest::Dtype	test/test_infogain_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InfogainLossLayerTest	file:	access:private
caffe::InfogainLossLayerTest::InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^  InfogainLossLayerTest()$/;"	f	class:caffe::InfogainLossLayerTest	access:protected	signature:()
caffe::InfogainLossLayerTest::blob_bottom_data_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
caffe::InfogainLossLayerTest::blob_bottom_infogain_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_infogain_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
caffe::InfogainLossLayerTest::blob_bottom_label_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
caffe::InfogainLossLayerTest::blob_bottom_vec_	test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
caffe::InfogainLossLayerTest::blob_top_loss_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
caffe::InfogainLossLayerTest::blob_top_vec_	test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:	access:protected
caffe::InfogainLossLayerTest::~InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^  virtual ~InfogainLossLayerTest() {$/;"	f	class:caffe::InfogainLossLayerTest	access:protected	signature:()
caffe::InnerProductLayer::Backward_cpu	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::InnerProductLayer::Forward_cpu	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InnerProductLayer::LayerSetUp	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InnerProductLayer::Reshape	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::InnerProductLayerTest	test/test_inner_product_layer.cpp	/^class InnerProductLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::InnerProductLayerTest::Dtype	test/test_inner_product_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InnerProductLayerTest	file:	access:private
caffe::InnerProductLayerTest::InnerProductLayerTest	test/test_inner_product_layer.cpp	/^  InnerProductLayerTest()$/;"	f	class:caffe::InnerProductLayerTest	access:protected	signature:()
caffe::InnerProductLayerTest::blob_bottom_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
caffe::InnerProductLayerTest::blob_bottom_nobatch_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_nobatch_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
caffe::InnerProductLayerTest::blob_bottom_vec_	test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
caffe::InnerProductLayerTest::blob_top_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
caffe::InnerProductLayerTest::blob_top_vec_	test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:	access:protected
caffe::InnerProductLayerTest::~InnerProductLayerTest	test/test_inner_product_layer.cpp	/^  virtual ~InnerProductLayerTest() {$/;"	f	class:caffe::InnerProductLayerTest	access:protected	signature:()
caffe::InsertSplits	util/insert_splits.cpp	/^void InsertSplits(const NetParameter& param, NetParameter* param_split) {$/;"	f	namespace:caffe	signature:(const NetParameter& param, NetParameter* param_split)
caffe::InternalThread::StartInternalThread	internal_thread.cpp	/^void InternalThread::StartInternalThread() {$/;"	f	class:caffe::InternalThread	signature:()
caffe::InternalThread::StopInternalThread	internal_thread.cpp	/^void InternalThread::StopInternalThread() {$/;"	f	class:caffe::InternalThread	signature:()
caffe::InternalThread::entry	internal_thread.cpp	/^void InternalThread::entry(int device, Caffe::Brew mode, int rand_seed,$/;"	f	class:caffe::InternalThread	signature:(int device, Caffe::Brew mode, int rand_seed, int solver_count, bool root_solver)
caffe::InternalThread::is_started	internal_thread.cpp	/^bool InternalThread::is_started() const {$/;"	f	class:caffe::InternalThread	signature:() const
caffe::InternalThread::must_stop	internal_thread.cpp	/^bool InternalThread::must_stop() {$/;"	f	class:caffe::InternalThread	signature:()
caffe::InternalThread::~InternalThread	internal_thread.cpp	/^InternalThread::~InternalThread() {$/;"	f	class:caffe::InternalThread	signature:()
caffe::InternalThreadTest	test/test_internal_thread.cpp	/^class InternalThreadTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::LRNLayer::Backward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LRNLayer::CrossChannelBackward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelBackward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LRNLayer::CrossChannelForward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelForward_cpu($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::Forward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::LayerSetUp	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::Reshape	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayer::WithinChannelBackward	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelBackward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LRNLayer::WithinChannelForward	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelForward($/;"	f	class:caffe::LRNLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LRNLayerTest	test/test_lrn_layer.cpp	/^class LRNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::LRNLayerTest::Dtype	test/test_lrn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LRNLayerTest	file:	access:private
caffe::LRNLayerTest::LRNLayerTest	test/test_lrn_layer.cpp	/^  LRNLayerTest()$/;"	f	class:caffe::LRNLayerTest	access:protected	signature:()
caffe::LRNLayerTest::ReferenceLRNForward	test/test_lrn_layer.cpp	/^  void ReferenceLRNForward(const Blob<Dtype>& blob_bottom,$/;"	p	class:caffe::LRNLayerTest	file:	access:protected	signature:(const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param, Blob<Dtype>* blob_top)
caffe::LRNLayerTest::ReferenceLRNForward	test/test_lrn_layer.cpp	/^void LRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::LRNLayerTest	signature:( const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param, Blob<Dtype>* blob_top)
caffe::LRNLayerTest::SetUp	test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::LRNLayerTest	access:protected	signature:()
caffe::LRNLayerTest::blob_bottom_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
caffe::LRNLayerTest::blob_bottom_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
caffe::LRNLayerTest::blob_top_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
caffe::LRNLayerTest::blob_top_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
caffe::LRNLayerTest::epsilon_	test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
caffe::LRNLayerTest::~LRNLayerTest	test/test_lrn_layer.cpp	/^  virtual ~LRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::LRNLayerTest	access:protected	signature:()
caffe::Layer::InitMutex	layer.cpp	/^void Layer<Dtype>::InitMutex() {$/;"	f	class:caffe::Layer	signature:()
caffe::Layer::Lock	layer.cpp	/^void Layer<Dtype>::Lock() {$/;"	f	class:caffe::Layer	signature:()
caffe::Layer::Unlock	layer.cpp	/^void Layer<Dtype>::Unlock() {$/;"	f	class:caffe::Layer	signature:()
caffe::LayerFactoryTest	test/test_layer_factory.cpp	/^class LayerFactoryTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::LocalConvLayer::Backward_cpu	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector< Blob<Dtype>*>& bottom)
caffe::LocalConvLayer::Forward_cpu	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LocalConvLayer::LayerSetUp	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LocalConvLayer::Reshape	layers/local_conv.cpp	/^void LocalConvLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LocalConvLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LocalConvLayerTest	test/test_local_conv_layer.cpp	/^class LocalConvLayerTest : public MultiDeviceTest<TypeParam>$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::LocalConvLayerTest::Dtype	test/test_local_conv_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LocalConvLayerTest	file:	access:private
caffe::LocalConvLayerTest::LocalConvLayerTest	test/test_local_conv_layer.cpp	/^  LocalConvLayerTest()$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:()
caffe::LocalConvLayerTest::MakeReferenceTop	test/test_local_conv_layer.cpp	/^  MakeReferenceTop(Blob<Dtype>* top)$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:(Blob<Dtype>* top)
caffe::LocalConvLayerTest::SetUp	test/test_local_conv_layer.cpp	/^  SetUp()$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:()
caffe::LocalConvLayerTest::blob_bottom_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
caffe::LocalConvLayerTest::blob_bottom_2_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
caffe::LocalConvLayerTest::blob_bottom_vec_	test/test_local_conv_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
caffe::LocalConvLayerTest::blob_top_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
caffe::LocalConvLayerTest::blob_top_2_	test/test_local_conv_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
caffe::LocalConvLayerTest::blob_top_vec_	test/test_local_conv_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
caffe::LocalConvLayerTest::ref_blob_top_	test/test_local_conv_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
caffe::LocalConvLayerTest::~LocalConvLayerTest	test/test_local_conv_layer.cpp	/^  ~LocalConvLayerTest()$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:()
caffe::LogLayer::Backward_cpu	layers/log_layer.cpp	/^void LogLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::LogLayer::Forward_cpu	layers/log_layer.cpp	/^void LogLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LogLayer::LayerSetUp	layers/log_layer.cpp	/^void LogLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LossLayer::LayerSetUp	layers/loss_layer.cpp	/^void LossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::LossLayer::Reshape	layers/loss_layer.cpp	/^void LossLayer<Dtype>::Reshape($/;"	f	class:caffe::LossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MSRAFillerTest	test/test_filler.cpp	/^class MSRAFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::MSRAFillerTest::MSRAFillerTest	test/test_filler.cpp	/^  MSRAFillerTest()$/;"	f	class:caffe::MSRAFillerTest	access:protected	signature:()
caffe::MSRAFillerTest::blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::MSRAFillerTest	file:	access:protected
caffe::MSRAFillerTest::filler_	test/test_filler.cpp	/^  shared_ptr<MSRAFiller<Dtype> > filler_;$/;"	m	class:caffe::MSRAFillerTest	file:	access:protected
caffe::MSRAFillerTest::filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::MSRAFillerTest	file:	access:protected
caffe::MSRAFillerTest::test_params	test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::MSRAFillerTest	access:protected	signature:(FillerParameter_VarianceNorm variance_norm, Dtype n)
caffe::MSRAFillerTest::~MSRAFillerTest	test/test_filler.cpp	/^  virtual ~MSRAFillerTest() { delete blob_; }$/;"	f	class:caffe::MSRAFillerTest	access:protected	signature:()
caffe::MVNLayer::Backward_cpu	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::MVNLayer::Forward_cpu	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MVNLayer::Reshape	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MVNLayerTest	test/test_mvn_layer.cpp	/^class MVNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::MVNLayerTest::Dtype	test/test_mvn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MVNLayerTest	file:	access:private
caffe::MVNLayerTest::MVNLayerTest	test/test_mvn_layer.cpp	/^  MVNLayerTest()$/;"	f	class:caffe::MVNLayerTest	access:protected	signature:()
caffe::MVNLayerTest::blob_bottom_	test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
caffe::MVNLayerTest::blob_bottom_vec_	test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
caffe::MVNLayerTest::blob_top_	test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
caffe::MVNLayerTest::blob_top_vec_	test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MVNLayerTest	file:	access:protected
caffe::MVNLayerTest::~MVNLayerTest	test/test_mvn_layer.cpp	/^  virtual ~MVNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MVNLayerTest	access:protected	signature:()
caffe::MathFunctionsTest	test/test_math_functions.cpp	/^class MathFunctionsTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::MathFunctionsTest::Dtype	test/test_math_functions.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MathFunctionsTest	file:	access:private
caffe::MathFunctionsTest::MathFunctionsTest	test/test_math_functions.cpp	/^  MathFunctionsTest()$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:()
caffe::MathFunctionsTest::ReferenceHammingDistance	test/test_math_functions.cpp	/^  int ReferenceHammingDistance(const int n, const Dtype* x, const Dtype* y) {$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:(const int n, const Dtype* x, const Dtype* y)
caffe::MathFunctionsTest::SetUp	test/test_math_functions.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:()
caffe::MathFunctionsTest::blob_bottom_	test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MathFunctionsTest	file:	access:protected
caffe::MathFunctionsTest::blob_top_	test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MathFunctionsTest	file:	access:protected
caffe::MathFunctionsTest::~MathFunctionsTest	test/test_math_functions.cpp	/^  virtual ~MathFunctionsTest() {$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:()
caffe::MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^class MaxPoolingDropoutTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::MaxPoolingDropoutTest::Dtype	test/test_maxpool_dropout_layers.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MaxPoolingDropoutTest	file:	access:private
caffe::MaxPoolingDropoutTest::MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^  MaxPoolingDropoutTest()$/;"	f	class:caffe::MaxPoolingDropoutTest	access:protected	signature:()
caffe::MaxPoolingDropoutTest::SetUp	test/test_maxpool_dropout_layers.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MaxPoolingDropoutTest	access:protected	signature:()
caffe::MaxPoolingDropoutTest::blob_bottom_	test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
caffe::MaxPoolingDropoutTest::blob_bottom_vec_	test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
caffe::MaxPoolingDropoutTest::blob_top_	test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
caffe::MaxPoolingDropoutTest::blob_top_vec_	test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:	access:protected
caffe::MaxPoolingDropoutTest::~MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^  virtual ~MaxPoolingDropoutTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MaxPoolingDropoutTest	access:protected	signature:()
caffe::MemoryDataLayer::AddDatumVector	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddDatumVector(const vector<Datum>& datum_vector) {$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Datum>& datum_vector)
caffe::MemoryDataLayer::AddMatVector	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddMatVector(const vector<cv::Mat>& mat_vector,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<cv::Mat>& mat_vector, const vector<int>& labels)
caffe::MemoryDataLayer::DataLayerSetUp	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MemoryDataLayer::Forward_cpu	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MemoryDataLayer::Reset	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Reset(Dtype* data, Dtype* labels, int n) {$/;"	f	class:caffe::MemoryDataLayer	signature:(Dtype* data, Dtype* labels, int n)
caffe::MemoryDataLayer::set_batch_size	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::set_batch_size(int new_size) {$/;"	f	class:caffe::MemoryDataLayer	signature:(int new_size)
caffe::MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^class MemoryDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::MemoryDataLayerTest::Dtype	test/test_memory_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MemoryDataLayerTest	file:	access:private
caffe::MemoryDataLayerTest::MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^  MemoryDataLayerTest()$/;"	f	class:caffe::MemoryDataLayerTest	access:protected	signature:()
caffe::MemoryDataLayerTest::SetUp	test/test_memory_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MemoryDataLayerTest	access:protected	signature:()
caffe::MemoryDataLayerTest::batch_size_	test/test_memory_data_layer.cpp	/^  int batch_size_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::batches_	test/test_memory_data_layer.cpp	/^  int batches_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::blob_bottom_vec_	test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::blob_top_vec_	test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::channels_	test/test_memory_data_layer.cpp	/^  int channels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::data_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::data_blob_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::height_	test/test_memory_data_layer.cpp	/^  int height_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::label_blob_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const label_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::labels_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const labels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::width_	test/test_memory_data_layer.cpp	/^  int width_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
caffe::MemoryDataLayerTest::~MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^  virtual ~MemoryDataLayerTest() {$/;"	f	class:caffe::MemoryDataLayerTest	access:protected	signature:()
caffe::MultinomialLogisticLossLayer::Backward_cpu	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::MultinomialLogisticLossLayer::Forward_cpu	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MultinomialLogisticLossLayer::Reshape	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Reshape($/;"	f	class:caffe::MultinomialLogisticLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^class MultinomialLogisticLossLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:	inherits:CPUDeviceTest
caffe::MultinomialLogisticLossLayerTest::MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^  MultinomialLogisticLossLayerTest()$/;"	f	class:caffe::MultinomialLogisticLossLayerTest	access:protected	signature:()
caffe::MultinomialLogisticLossLayerTest::blob_bottom_data_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
caffe::MultinomialLogisticLossLayerTest::blob_bottom_label_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
caffe::MultinomialLogisticLossLayerTest::blob_bottom_vec_	test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
caffe::MultinomialLogisticLossLayerTest::blob_top_loss_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
caffe::MultinomialLogisticLossLayerTest::blob_top_vec_	test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:	access:protected
caffe::MultinomialLogisticLossLayerTest::~MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^  virtual ~MultinomialLogisticLossLayerTest() {$/;"	f	class:caffe::MultinomialLogisticLossLayerTest	access:protected	signature:()
caffe::NesterovSolver::ComputeUpdateValue	solvers/nesterov_solver.cpp	/^void NesterovSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::NesterovSolver	signature:(int param_id, Dtype rate)
caffe::NesterovSolverTest	test/test_gradient_based_solver.cpp	/^class NesterovSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
caffe::NesterovSolverTest::Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NesterovSolverTest	file:	access:private
caffe::NesterovSolverTest::InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::NesterovSolverTest	access:protected	signature:(const SolverParameter& param)
caffe::Net::AppendBottom	net.cpp	/^int Net<Dtype>::AppendBottom(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const int layer_id, const int bottom_id, set<string>* available_blobs, map<string, int>* blob_name_to_idx)
caffe::Net::AppendParam	net.cpp	/^void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const int layer_id, const int param_id)
caffe::Net::AppendTop	net.cpp	/^void Net<Dtype>::AppendTop(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const int layer_id, const int top_id, set<string>* available_blobs, map<string, int>* blob_name_to_idx)
caffe::Net::Backward	net.cpp	/^void Net<Dtype>::Backward() {$/;"	f	class:caffe::Net	signature:()
caffe::Net::BackwardDebugInfo	net.cpp	/^void Net<Dtype>::BackwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net	signature:(const int layer_id)
caffe::Net::BackwardFrom	net.cpp	/^void Net<Dtype>::BackwardFrom(int start) {$/;"	f	class:caffe::Net	signature:(int start)
caffe::Net::BackwardFromTo	net.cpp	/^void Net<Dtype>::BackwardFromTo(int start, int end) {$/;"	f	class:caffe::Net	signature:(int start, int end)
caffe::Net::BackwardTo	net.cpp	/^void Net<Dtype>::BackwardTo(int end) {$/;"	f	class:caffe::Net	signature:(int end)
caffe::Net::ClearParamDiffs	net.cpp	/^void Net<Dtype>::ClearParamDiffs() {$/;"	f	class:caffe::Net	signature:()
caffe::Net::CopyTrainedLayersFrom	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const NetParameter& param) {$/;"	f	class:caffe::Net	signature:(const NetParameter& param)
caffe::Net::CopyTrainedLayersFrom	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const string trained_filename) {$/;"	f	class:caffe::Net	signature:(const string trained_filename)
caffe::Net::CopyTrainedLayersFromBinaryProto	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromBinaryProto($/;"	f	class:caffe::Net	signature:( const string trained_filename)
caffe::Net::CopyTrainedLayersFromHDF5	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromHDF5(const string trained_filename) {$/;"	f	class:caffe::Net	signature:(const string trained_filename)
caffe::Net::FilterNet	net.cpp	/^void Net<Dtype>::FilterNet(const NetParameter& param,$/;"	f	class:caffe::Net	signature:(const NetParameter& param, NetParameter* param_filtered)
caffe::Net::Forward	net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::Forward($/;"	f	class:caffe::Net	signature:( const vector<Blob<Dtype>*> & bottom, Dtype* loss)
caffe::Net::Forward	net.cpp	/^string Net<Dtype>::Forward(const string& input_blob_protos, Dtype* loss) {$/;"	f	class:caffe::Net	signature:(const string& input_blob_protos, Dtype* loss)
caffe::Net::ForwardDebugInfo	net.cpp	/^void Net<Dtype>::ForwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net	signature:(const int layer_id)
caffe::Net::ForwardFrom	net.cpp	/^Dtype Net<Dtype>::ForwardFrom(int start) {$/;"	f	class:caffe::Net	signature:(int start)
caffe::Net::ForwardFromTo	net.cpp	/^Dtype Net<Dtype>::ForwardFromTo(int start, int end) {$/;"	f	class:caffe::Net	signature:(int start, int end)
caffe::Net::ForwardPrefilled	net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::ForwardPrefilled(Dtype* loss) {$/;"	f	class:caffe::Net	signature:(Dtype* loss)
caffe::Net::ForwardTo	net.cpp	/^Dtype Net<Dtype>::ForwardTo(int end) {$/;"	f	class:caffe::Net	signature:(int end)
caffe::Net::Init	net.cpp	/^void Net<Dtype>::Init(const NetParameter& in_param) {$/;"	f	class:caffe::Net	signature:(const NetParameter& in_param)
caffe::Net::InputDebugInfo	net.cpp	/^void Net<Dtype>::InputDebugInfo(const int input_id) {$/;"	f	class:caffe::Net	signature:(const int input_id)
caffe::Net::Net	net.cpp	/^Net<Dtype>::Net(const NetParameter& param, const Net* root_net)$/;"	f	class:caffe::Net	signature:(const NetParameter& param, const Net* root_net)
caffe::Net::Net	net.cpp	/^Net<Dtype>::Net(const string& param_file, Phase phase, const Net* root_net)$/;"	f	class:caffe::Net	signature:(const string& param_file, Phase phase, const Net* root_net)
caffe::Net::Reshape	net.cpp	/^void Net<Dtype>::Reshape() {$/;"	f	class:caffe::Net	signature:()
caffe::Net::ShareTrainedLayersWith	net.cpp	/^void Net<Dtype>::ShareTrainedLayersWith(const Net* other) {$/;"	f	class:caffe::Net	signature:(const Net* other)
caffe::Net::ShareWeights	net.cpp	/^void Net<Dtype>::ShareWeights() {$/;"	f	class:caffe::Net	signature:()
caffe::Net::StateMeetsRule	net.cpp	/^bool Net<Dtype>::StateMeetsRule(const NetState& state,$/;"	f	class:caffe::Net	signature:(const NetState& state, const NetStateRule& rule, const string& layer_name)
caffe::Net::ToHDF5	net.cpp	/^void Net<Dtype>::ToHDF5(const string& filename, bool write_diff) const {$/;"	f	class:caffe::Net	signature:(const string& filename, bool write_diff) const
caffe::Net::ToProto	net.cpp	/^void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {$/;"	f	class:caffe::Net	signature:(NetParameter* param, bool write_diff) const
caffe::Net::Update	net.cpp	/^void Net<Dtype>::Update() {$/;"	f	class:caffe::Net	signature:()
caffe::Net::UpdateDebugInfo	net.cpp	/^void Net<Dtype>::UpdateDebugInfo(const int param_id) {$/;"	f	class:caffe::Net	signature:(const int param_id)
caffe::Net::blob_by_name	net.cpp	/^const shared_ptr<Blob<Dtype> > Net<Dtype>::blob_by_name($/;"	f	class:caffe::Net	signature:( const string& blob_name) const
caffe::Net::has_blob	net.cpp	/^bool Net<Dtype>::has_blob(const string& blob_name) const {$/;"	f	class:caffe::Net	signature:(const string& blob_name) const
caffe::Net::has_layer	net.cpp	/^bool Net<Dtype>::has_layer(const string& layer_name) const {$/;"	f	class:caffe::Net	signature:(const string& layer_name) const
caffe::Net::layer_by_name	net.cpp	/^const shared_ptr<Layer<Dtype> > Net<Dtype>::layer_by_name($/;"	f	class:caffe::Net	signature:( const string& layer_name) const
caffe::NetNeedsDataUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsDataUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
caffe::NetNeedsUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
caffe::NetNeedsV0ToV1Upgrade	util/upgrade_proto.cpp	/^bool NetNeedsV0ToV1Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
caffe::NetNeedsV1ToV2Upgrade	util/upgrade_proto.cpp	/^bool NetNeedsV1ToV2Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& net_param)
caffe::NetTest	test/test_net.cpp	/^class NetTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::NetTest::CopyNetBlobs	test/test_net.cpp	/^  virtual void CopyNetBlobs(const bool copy_diff,$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool copy_diff, vector<shared_ptr<Blob<Dtype> > >* blobs_copy)
caffe::NetTest::CopyNetParams	test/test_net.cpp	/^  virtual void CopyNetParams(const bool copy_diff,$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool copy_diff, vector<shared_ptr<Blob<Dtype> > >* params_copy)
caffe::NetTest::Dtype	test/test_net.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NetTest	file:	access:private
caffe::NetTest::InitDiffDataSharedWeightsNet	test/test_net.cpp	/^  virtual void InitDiffDataSharedWeightsNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
caffe::NetTest::InitDiffDataUnsharedWeightsNet	test/test_net.cpp	/^  virtual void InitDiffDataUnsharedWeightsNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
caffe::NetTest::InitNetFromProtoString	test/test_net.cpp	/^  virtual void InitNetFromProtoString(const string& proto) {$/;"	f	class:caffe::NetTest	access:protected	signature:(const string& proto)
caffe::NetTest::InitReshapableNet	test/test_net.cpp	/^  virtual void InitReshapableNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
caffe::NetTest::InitSharedWeightsNet	test/test_net.cpp	/^  virtual void InitSharedWeightsNet() {$/;"	f	class:caffe::NetTest	access:protected	signature:()
caffe::NetTest::InitSkipPropNet	test/test_net.cpp	/^  virtual void InitSkipPropNet(bool test_skip_true) {$/;"	f	class:caffe::NetTest	access:protected	signature:(bool test_skip_true)
caffe::NetTest::InitTinyNet	test/test_net.cpp	/^  virtual void InitTinyNet(const bool force_backward = false,$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool force_backward = false, const bool accuracy_layer = false)
caffe::NetTest::InitTinyNetEuclidean	test/test_net.cpp	/^  virtual void InitTinyNetEuclidean(const bool force_backward = false) {$/;"	f	class:caffe::NetTest	access:protected	signature:(const bool force_backward = false)
caffe::NetTest::InitTrickyNet	test/test_net.cpp	/^  virtual void InitTrickyNet(Dtype* loss_weight = NULL) {$/;"	f	class:caffe::NetTest	access:protected	signature:(Dtype* loss_weight = NULL)
caffe::NetTest::InitUnsharedWeightsNet	test/test_net.cpp	/^  virtual void InitUnsharedWeightsNet(const Dtype* loss_weight = NULL,$/;"	f	class:caffe::NetTest	access:protected	signature:(const Dtype* loss_weight = NULL, const Dtype* midnet_loss_weight = NULL, const bool force_backward = false, const bool bias_term = false, const Dtype blobs_lr_w1 = 1, const Dtype blobs_lr_b1 = 2, const Dtype blobs_lr_w2 = 1, const Dtype blobs_lr_b2 = 2)
caffe::NetTest::NetTest	test/test_net.cpp	/^  NetTest() : seed_(1701) {}$/;"	f	class:caffe::NetTest	access:protected	signature:()
caffe::NetTest::net_	test/test_net.cpp	/^  shared_ptr<Net<Dtype> > net_;$/;"	m	class:caffe::NetTest	file:	access:protected
caffe::NetTest::seed_	test/test_net.cpp	/^  int seed_;$/;"	m	class:caffe::NetTest	file:	access:protected
caffe::NetUpgradeTest	test/test_upgrade_proto.cpp	/^class NetUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::NetUpgradeTest::RunV0UpgradeTest	test/test_upgrade_proto.cpp	/^  void RunV0UpgradeTest($/;"	f	class:caffe::NetUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
caffe::NetUpgradeTest::RunV1UpgradeTest	test/test_upgrade_proto.cpp	/^  void RunV1UpgradeTest($/;"	f	class:caffe::NetUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
caffe::NeuronLayer::Reshape	layers/neuron_layer.cpp	/^void NeuronLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NeuronLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::NeuronLayerTest	test/test_neuron_layer.cpp	/^class NeuronLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::NeuronLayerTest::Dtype	test/test_neuron_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NeuronLayerTest	file:	access:private
caffe::NeuronLayerTest::LogBottomInit	test/test_neuron_layer.cpp	/^  void LogBottomInit() {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:()
caffe::NeuronLayerTest::NeuronLayerTest	test/test_neuron_layer.cpp	/^  NeuronLayerTest()$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:()
caffe::NeuronLayerTest::TestDropoutForward	test/test_neuron_layer.cpp	/^  void TestDropoutForward(const float dropout_ratio) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float dropout_ratio)
caffe::NeuronLayerTest::TestExpForward	test/test_neuron_layer.cpp	/^  void TestExpForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
caffe::NeuronLayerTest::TestExpGradient	test/test_neuron_layer.cpp	/^  void TestExpGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
caffe::NeuronLayerTest::TestLogForward	test/test_neuron_layer.cpp	/^  void TestLogForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
caffe::NeuronLayerTest::TestLogGradient	test/test_neuron_layer.cpp	/^  void TestLogGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(const float base, const float scale, const float shift)
caffe::NeuronLayerTest::TestPReLU	test/test_neuron_layer.cpp	/^  void TestPReLU(PReLULayer<Dtype> *layer) {$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:(PReLULayer<Dtype> *layer)
caffe::NeuronLayerTest::blob_bottom_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
caffe::NeuronLayerTest::blob_bottom_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
caffe::NeuronLayerTest::blob_top_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
caffe::NeuronLayerTest::blob_top_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:	access:protected
caffe::NeuronLayerTest::~NeuronLayerTest	test/test_neuron_layer.cpp	/^  virtual ~NeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:()
caffe::Op	parallel.cpp	/^enum Op {$/;"	g	namespace:caffe	file:
caffe::P2PSync::InternalThreadEntry	parallel.cpp	/^void P2PSync<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::P2PSync	signature:()
caffe::P2PSync::P2PSync	parallel.cpp	/^P2PSync<Dtype>::P2PSync(shared_ptr<Solver<Dtype> > root_solver,$/;"	f	class:caffe::P2PSync	signature:(shared_ptr<Solver<Dtype> > root_solver, P2PSync<Dtype>* parent, const SolverParameter& param)
caffe::P2PSync::on_gradients_ready	parallel.cpp	/^void P2PSync<Dtype>::on_gradients_ready() {$/;"	f	class:caffe::P2PSync	signature:()
caffe::P2PSync::on_start	parallel.cpp	/^void P2PSync<Dtype>::on_start() {$/;"	f	class:caffe::P2PSync	signature:()
caffe::P2PSync::run	parallel.cpp	/^void P2PSync<Dtype>::run(const vector<int>& gpus) {$/;"	f	class:caffe::P2PSync	signature:(const vector<int>& gpus)
caffe::P2PSync::~P2PSync	parallel.cpp	/^P2PSync<Dtype>::~P2PSync() {$/;"	f	class:caffe::P2PSync	signature:()
caffe::PReLULayer::Backward_cpu	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::PReLULayer::Forward_cpu	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PReLULayer::LayerSetUp	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PReLULayer::Reshape	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PaddingLayerUpgradeTest	test/test_upgrade_proto.cpp	/^class PaddingLayerUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::PaddingLayerUpgradeTest::RunPaddingUpgradeTest	test/test_upgrade_proto.cpp	/^  void RunPaddingUpgradeTest($/;"	f	class:caffe::PaddingLayerUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
caffe::Params::Params	parallel.cpp	/^Params<Dtype>::Params(shared_ptr<Solver<Dtype> > root_solver)$/;"	f	class:caffe::Params	signature:(shared_ptr<Solver<Dtype> > root_solver)
caffe::PlatformTest	test/test_platform.cpp	/^class PlatformTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::PoolingLayer::Backward_cpu	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::PoolingLayer::Forward_cpu	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PoolingLayer::LayerSetUp	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PoolingLayer::Reshape	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PoolingLayerTest	test/test_pooling_layer.cpp	/^class PoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::PoolingLayerTest::Dtype	test/test_pooling_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PoolingLayerTest	file:	access:private
caffe::PoolingLayerTest::PoolingLayerTest	test/test_pooling_layer.cpp	/^  PoolingLayerTest()$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
caffe::PoolingLayerTest::SetUp	test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
caffe::PoolingLayerTest::TestForwardRectHigh	test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
caffe::PoolingLayerTest::TestForwardRectWide	test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
caffe::PoolingLayerTest::TestForwardSquare	test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
caffe::PoolingLayerTest::blob_bottom_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
caffe::PoolingLayerTest::blob_bottom_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
caffe::PoolingLayerTest::blob_top_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
caffe::PoolingLayerTest::blob_top_mask_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
caffe::PoolingLayerTest::blob_top_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:	access:protected
caffe::PoolingLayerTest::~PoolingLayerTest	test/test_pooling_layer.cpp	/^  virtual ~PoolingLayerTest() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
caffe::PositiveUnitballFillerTest	test/test_filler.cpp	/^class PositiveUnitballFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::PositiveUnitballFillerTest::PositiveUnitballFillerTest	test/test_filler.cpp	/^  PositiveUnitballFillerTest()$/;"	f	class:caffe::PositiveUnitballFillerTest	access:protected	signature:()
caffe::PositiveUnitballFillerTest::blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:	access:protected
caffe::PositiveUnitballFillerTest::filler_	test/test_filler.cpp	/^  shared_ptr<PositiveUnitballFiller<Dtype> > filler_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:	access:protected
caffe::PositiveUnitballFillerTest::filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:	access:protected
caffe::PositiveUnitballFillerTest::~PositiveUnitballFillerTest	test/test_filler.cpp	/^  virtual ~PositiveUnitballFillerTest() { delete blob_; }$/;"	f	class:caffe::PositiveUnitballFillerTest	access:protected	signature:()
caffe::PowerLayer::Backward_cpu	layers/power_layer.cpp	/^void PowerLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::PowerLayer::Forward_cpu	layers/power_layer.cpp	/^void PowerLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PowerLayer::LayerSetUp	layers/power_layer.cpp	/^void PowerLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::PowerLayerTest	test/test_power_layer.cpp	/^class PowerLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::PowerLayerTest::Dtype	test/test_power_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PowerLayerTest	file:	access:private
caffe::PowerLayerTest::PowerLayerTest	test/test_power_layer.cpp	/^  PowerLayerTest()$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:()
caffe::PowerLayerTest::TestBackward	test/test_power_layer.cpp	/^  void TestBackward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:(Dtype power, Dtype scale, Dtype shift)
caffe::PowerLayerTest::TestForward	test/test_power_layer.cpp	/^  void TestForward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:(Dtype power, Dtype scale, Dtype shift)
caffe::PowerLayerTest::blob_bottom_	test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
caffe::PowerLayerTest::blob_bottom_vec_	test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
caffe::PowerLayerTest::blob_top_	test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
caffe::PowerLayerTest::blob_top_vec_	test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PowerLayerTest	file:	access:protected
caffe::PowerLayerTest::~PowerLayerTest	test/test_power_layer.cpp	/^  virtual ~PowerLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:()
caffe::ProtoTest	test/test_protobuf.cpp	/^class ProtoTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::REGISTER_LAYER_CLASS	layers/absval_layer.cpp	/^REGISTER_LAYER_CLASS(AbsVal);$/;"	p	namespace:caffe	file:	signature:(AbsVal)
caffe::REGISTER_LAYER_CLASS	layers/accuracy_layer.cpp	/^REGISTER_LAYER_CLASS(Accuracy);$/;"	p	namespace:caffe	file:	signature:(Accuracy)
caffe::REGISTER_LAYER_CLASS	layers/argmax_layer.cpp	/^REGISTER_LAYER_CLASS(ArgMax);$/;"	p	namespace:caffe	file:	signature:(ArgMax)
caffe::REGISTER_LAYER_CLASS	layers/batch_norm_layer.cpp	/^REGISTER_LAYER_CLASS(BatchNorm);$/;"	p	namespace:caffe	file:	signature:(BatchNorm)
caffe::REGISTER_LAYER_CLASS	layers/batch_reindex_layer.cpp	/^REGISTER_LAYER_CLASS(BatchReindex);$/;"	p	namespace:caffe	file:	signature:(BatchReindex)
caffe::REGISTER_LAYER_CLASS	layers/bnll_layer.cpp	/^REGISTER_LAYER_CLASS(BNLL);$/;"	p	namespace:caffe	file:	signature:(BNLL)
caffe::REGISTER_LAYER_CLASS	layers/concat_layer.cpp	/^REGISTER_LAYER_CLASS(Concat);$/;"	p	namespace:caffe	file:	signature:(Concat)
caffe::REGISTER_LAYER_CLASS	layers/contrastive_loss_layer.cpp	/^REGISTER_LAYER_CLASS(ContrastiveLoss);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLoss)
caffe::REGISTER_LAYER_CLASS	layers/data_layer.cpp	/^REGISTER_LAYER_CLASS(Data);$/;"	p	namespace:caffe	file:	signature:(Data)
caffe::REGISTER_LAYER_CLASS	layers/deconv_layer.cpp	/^REGISTER_LAYER_CLASS(Deconvolution);$/;"	p	namespace:caffe	file:	signature:(Deconvolution)
caffe::REGISTER_LAYER_CLASS	layers/dropout_layer.cpp	/^REGISTER_LAYER_CLASS(Dropout);$/;"	p	namespace:caffe	file:	signature:(Dropout)
caffe::REGISTER_LAYER_CLASS	layers/dummy_data_layer.cpp	/^REGISTER_LAYER_CLASS(DummyData);$/;"	p	namespace:caffe	file:	signature:(DummyData)
caffe::REGISTER_LAYER_CLASS	layers/eltwise_layer.cpp	/^REGISTER_LAYER_CLASS(Eltwise);$/;"	p	namespace:caffe	file:	signature:(Eltwise)
caffe::REGISTER_LAYER_CLASS	layers/embed_layer.cpp	/^REGISTER_LAYER_CLASS(Embed);$/;"	p	namespace:caffe	file:	signature:(Embed)
caffe::REGISTER_LAYER_CLASS	layers/euclidean_loss_layer.cpp	/^REGISTER_LAYER_CLASS(EuclideanLoss);$/;"	p	namespace:caffe	file:	signature:(EuclideanLoss)
caffe::REGISTER_LAYER_CLASS	layers/exp_layer.cpp	/^REGISTER_LAYER_CLASS(Exp);$/;"	p	namespace:caffe	file:	signature:(Exp)
caffe::REGISTER_LAYER_CLASS	layers/filter_layer.cpp	/^REGISTER_LAYER_CLASS(Filter);$/;"	p	namespace:caffe	file:	signature:(Filter)
caffe::REGISTER_LAYER_CLASS	layers/flatten_layer.cpp	/^REGISTER_LAYER_CLASS(Flatten);$/;"	p	namespace:caffe	file:	signature:(Flatten)
caffe::REGISTER_LAYER_CLASS	layers/hdf5_data_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Data);$/;"	p	namespace:caffe	file:	signature:(HDF5Data)
caffe::REGISTER_LAYER_CLASS	layers/hdf5_output_layer.cpp	/^REGISTER_LAYER_CLASS(HDF5Output);$/;"	p	namespace:caffe	file:	signature:(HDF5Output)
caffe::REGISTER_LAYER_CLASS	layers/hinge_loss_layer.cpp	/^REGISTER_LAYER_CLASS(HingeLoss);$/;"	p	namespace:caffe	file:	signature:(HingeLoss)
caffe::REGISTER_LAYER_CLASS	layers/im2col_layer.cpp	/^REGISTER_LAYER_CLASS(Im2col);$/;"	p	namespace:caffe	file:	signature:(Im2col)
caffe::REGISTER_LAYER_CLASS	layers/image_data_layer.cpp	/^REGISTER_LAYER_CLASS(ImageData);$/;"	p	namespace:caffe	file:	signature:(ImageData)
caffe::REGISTER_LAYER_CLASS	layers/infogain_loss_layer.cpp	/^REGISTER_LAYER_CLASS(InfogainLoss);$/;"	p	namespace:caffe	file:	signature:(InfogainLoss)
caffe::REGISTER_LAYER_CLASS	layers/inner_product_layer.cpp	/^REGISTER_LAYER_CLASS(InnerProduct);$/;"	p	namespace:caffe	file:	signature:(InnerProduct)
caffe::REGISTER_LAYER_CLASS	layers/local_conv.cpp	/^REGISTER_LAYER_CLASS(LocalConv);$/;"	p	namespace:caffe	file:	signature:(LocalConv)
caffe::REGISTER_LAYER_CLASS	layers/log_layer.cpp	/^REGISTER_LAYER_CLASS(Log);$/;"	p	namespace:caffe	file:	signature:(Log)
caffe::REGISTER_LAYER_CLASS	layers/memory_data_layer.cpp	/^REGISTER_LAYER_CLASS(MemoryData);$/;"	p	namespace:caffe	file:	signature:(MemoryData)
caffe::REGISTER_LAYER_CLASS	layers/multinomial_logistic_loss_layer.cpp	/^REGISTER_LAYER_CLASS(MultinomialLogisticLoss);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLoss)
caffe::REGISTER_LAYER_CLASS	layers/mvn_layer.cpp	/^REGISTER_LAYER_CLASS(MVN);$/;"	p	namespace:caffe	file:	signature:(MVN)
caffe::REGISTER_LAYER_CLASS	layers/power_layer.cpp	/^REGISTER_LAYER_CLASS(Power);$/;"	p	namespace:caffe	file:	signature:(Power)
caffe::REGISTER_LAYER_CLASS	layers/prelu_layer.cpp	/^REGISTER_LAYER_CLASS(PReLU);$/;"	p	namespace:caffe	file:	signature:(PReLU)
caffe::REGISTER_LAYER_CLASS	layers/reduction_layer.cpp	/^REGISTER_LAYER_CLASS(Reduction);$/;"	p	namespace:caffe	file:	signature:(Reduction)
caffe::REGISTER_LAYER_CLASS	layers/reshape_layer.cpp	/^REGISTER_LAYER_CLASS(Reshape);$/;"	p	namespace:caffe	file:	signature:(Reshape)
caffe::REGISTER_LAYER_CLASS	layers/sigmoid_cross_entropy_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SigmoidCrossEntropyLoss);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLoss)
caffe::REGISTER_LAYER_CLASS	layers/silence_layer.cpp	/^REGISTER_LAYER_CLASS(Silence);$/;"	p	namespace:caffe	file:	signature:(Silence)
caffe::REGISTER_LAYER_CLASS	layers/slice_layer.cpp	/^REGISTER_LAYER_CLASS(Slice);$/;"	p	namespace:caffe	file:	signature:(Slice)
caffe::REGISTER_LAYER_CLASS	layers/softmax_loss_layer.cpp	/^REGISTER_LAYER_CLASS(SoftmaxWithLoss);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLoss)
caffe::REGISTER_LAYER_CLASS	layers/split_layer.cpp	/^REGISTER_LAYER_CLASS(Split);$/;"	p	namespace:caffe	file:	signature:(Split)
caffe::REGISTER_LAYER_CLASS	layers/spp_layer.cpp	/^REGISTER_LAYER_CLASS(SPP);$/;"	p	namespace:caffe	file:	signature:(SPP)
caffe::REGISTER_LAYER_CLASS	layers/threshold_layer.cpp	/^REGISTER_LAYER_CLASS(Threshold);$/;"	p	namespace:caffe	file:	signature:(Threshold)
caffe::REGISTER_LAYER_CLASS	layers/tile_layer.cpp	/^REGISTER_LAYER_CLASS(Tile);$/;"	p	namespace:caffe	file:	signature:(Tile)
caffe::REGISTER_LAYER_CLASS	layers/wangzhy_layer.cpp	/^REGISTER_LAYER_CLASS(Wangzhy);$/;"	p	namespace:caffe	file:	signature:(Wangzhy)
caffe::REGISTER_LAYER_CLASS	layers/window_data_layer.cpp	/^REGISTER_LAYER_CLASS(WindowData);$/;"	p	namespace:caffe	file:	signature:(WindowData)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Convolution, GetConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(Convolution, GetConvolutionLayer)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(LRN, GetLRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRN, GetLRNLayer)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Pooling, GetPoolingLayer);$/;"	p	namespace:caffe	file:	signature:(Pooling, GetPoolingLayer)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Python, GetPythonLayer);$/;"	p	namespace:caffe	file:	signature:(Python, GetPythonLayer)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(ReLU, GetReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLU, GetReLULayer)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Sigmoid, GetSigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(Sigmoid, GetSigmoidLayer)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(Softmax, GetSoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(Softmax, GetSoftmaxLayer)
caffe::REGISTER_LAYER_CREATOR	layer_factory.cpp	/^REGISTER_LAYER_CREATOR(TanH, GetTanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanH, GetTanHLayer)
caffe::REGISTER_SOLVER_CLASS	solvers/adadelta_solver.cpp	/^REGISTER_SOLVER_CLASS(AdaDelta);$/;"	p	namespace:caffe	file:	signature:(AdaDelta)
caffe::REGISTER_SOLVER_CLASS	solvers/adagrad_solver.cpp	/^REGISTER_SOLVER_CLASS(AdaGrad);$/;"	p	namespace:caffe	file:	signature:(AdaGrad)
caffe::REGISTER_SOLVER_CLASS	solvers/adam_solver.cpp	/^REGISTER_SOLVER_CLASS(Adam);$/;"	p	namespace:caffe	file:	signature:(Adam)
caffe::REGISTER_SOLVER_CLASS	solvers/nesterov_solver.cpp	/^REGISTER_SOLVER_CLASS(Nesterov);$/;"	p	namespace:caffe	file:	signature:(Nesterov)
caffe::REGISTER_SOLVER_CLASS	solvers/rmsprop_solver.cpp	/^REGISTER_SOLVER_CLASS(RMSProp);$/;"	p	namespace:caffe	file:	signature:(RMSProp)
caffe::REGISTER_SOLVER_CLASS	solvers/sgd_solver.cpp	/^REGISTER_SOLVER_CLASS(SGD);$/;"	p	namespace:caffe	file:	signature:(SGD)
caffe::RMSPropSolver::ComputeUpdateValue	solvers/rmsprop_solver.cpp	/^void RMSPropSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::RMSPropSolver	signature:(int param_id, Dtype rate)
caffe::RMSPropSolverTest	test/test_gradient_based_solver.cpp	/^class RMSPropSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
caffe::RMSPropSolverTest::Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::RMSPropSolverTest	file:	access:private
caffe::RMSPropSolverTest::InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::RMSPropSolverTest	access:protected	signature:(const SolverParameter& param)
caffe::RandomNumberGeneratorTest	test/test_random_number_generator.cpp	/^class RandomNumberGeneratorTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::RandomNumberGeneratorTest::RandomNumberGeneratorTest	test/test_random_number_generator.cpp	/^  RandomNumberGeneratorTest()$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:()
caffe::RandomNumberGeneratorTest::RngBernoulliChecks	test/test_random_number_generator.cpp	/^  void RngBernoulliChecks(const Dtype p, const void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype p, const void* cpu_data)
caffe::RandomNumberGeneratorTest::RngBernoulliFill	test/test_random_number_generator.cpp	/^  void RngBernoulliFill(const Dtype p, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype p, void* cpu_data)
caffe::RandomNumberGeneratorTest::RngGaussianChecks	test/test_random_number_generator.cpp	/^  void RngGaussianChecks(const Dtype mu, const Dtype sigma,$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype mu, const Dtype sigma, const void* cpu_data, const Dtype sparse_p = 0)
caffe::RandomNumberGeneratorTest::RngGaussianFill	test/test_random_number_generator.cpp	/^  void RngGaussianFill(const Dtype mu, const Dtype sigma, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype mu, const Dtype sigma, void* cpu_data)
caffe::RandomNumberGeneratorTest::RngGaussianFillGPU	test/test_random_number_generator.cpp	/^  void RngGaussianFillGPU(const Dtype mu, const Dtype sigma, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype mu, const Dtype sigma, void* gpu_data)
caffe::RandomNumberGeneratorTest::RngUniformChecks	test/test_random_number_generator.cpp	/^  void RngUniformChecks(const Dtype lower, const Dtype upper,$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype lower, const Dtype upper, const void* cpu_data, const Dtype sparse_p = 0)
caffe::RandomNumberGeneratorTest::RngUniformFill	test/test_random_number_generator.cpp	/^  void RngUniformFill(const Dtype lower, const Dtype upper, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype lower, const Dtype upper, void* cpu_data)
caffe::RandomNumberGeneratorTest::RngUniformFillGPU	test/test_random_number_generator.cpp	/^  void RngUniformFillGPU(const Dtype lower, const Dtype upper, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype lower, const Dtype upper, void* gpu_data)
caffe::RandomNumberGeneratorTest::RngUniformIntFillGPU	test/test_random_number_generator.cpp	/^  void RngUniformIntFillGPU(void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(void* gpu_data)
caffe::RandomNumberGeneratorTest::SetUp	test/test_random_number_generator.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:()
caffe::RandomNumberGeneratorTest::data_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::data_2_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::int_data_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::int_data_2_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::mean_bound	test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype std)
caffe::RandomNumberGeneratorTest::mean_bound	test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype std, const int sample_size)
caffe::RandomNumberGeneratorTest::mean_bound_multiplier_	test/test_random_number_generator.cpp	/^  Dtype mean_bound_multiplier_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::num_above_mean	test/test_random_number_generator.cpp	/^  int num_above_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::num_below_mean	test/test_random_number_generator.cpp	/^  int num_below_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype* const seqs)
caffe::RandomNumberGeneratorTest::sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype* const seqs, const int sample_size)
caffe::RandomNumberGeneratorTest::sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const int* const seqs)
caffe::RandomNumberGeneratorTest::sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const int* const seqs, const int sample_size)
caffe::RandomNumberGeneratorTest::sample_size_	test/test_random_number_generator.cpp	/^  size_t sample_size_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::RandomNumberGeneratorTest::seed_	test/test_random_number_generator.cpp	/^  uint32_t seed_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
caffe::ReLULayer::Backward_cpu	layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ReLULayer::Forward_cpu	layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReLULayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReadFileToDatum	util/io.cpp	/^bool ReadFileToDatum(const string& filename, const int label,$/;"	f	namespace:caffe	signature:(const string& filename, const int label, Datum* datum)
caffe::ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename) {$/;"	f	namespace:caffe	signature:(const string& filename)
caffe::ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe	signature:(const string& filename, const bool is_color)
caffe::ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe	signature:(const string& filename, const int height, const int width)
caffe::ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe	signature:(const string& filename, const int height, const int width, const bool is_color)
caffe::ReadImageToDatum	util/io.cpp	/^bool ReadImageToDatum(const string& filename, const int label,$/;"	f	namespace:caffe	signature:(const string& filename, const int label, const int height, const int width, const bool is_color, const std::string & encoding, Datum* datum)
caffe::ReadImageToDatumReference	test/test_io.cpp	/^bool ReadImageToDatumReference(const string& filename, const int label,$/;"	f	namespace:caffe	signature:(const string& filename, const int label, const int height, const int width, const bool is_color, Datum* datum)
caffe::ReadNetParamsFromBinaryFileOrDie	util/upgrade_proto.cpp	/^void ReadNetParamsFromBinaryFileOrDie(const string& param_file,$/;"	f	namespace:caffe	signature:(const string& param_file, NetParameter* param)
caffe::ReadNetParamsFromTextFileOrDie	util/upgrade_proto.cpp	/^void ReadNetParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe	signature:(const string& param_file, NetParameter* param)
caffe::ReadProtoFromBinaryFile	util/io.cpp	/^bool ReadProtoFromBinaryFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe	signature:(const char* filename, Message* proto)
caffe::ReadProtoFromTextFile	util/io.cpp	/^bool ReadProtoFromTextFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe	signature:(const char* filename, Message* proto)
caffe::ReadSolverParamsFromTextFileOrDie	util/upgrade_proto.cpp	/^void ReadSolverParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe	signature:(const string& param_file, SolverParameter* param)
caffe::ReductionLayer::Backward_cpu	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::ReductionLayer::Forward_cpu	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ReductionLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReductionLayer::LayerSetUp	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReductionLayer::Reshape	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReductionLayerTest	test/test_reduction_layer.cpp	/^class ReductionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::ReductionLayerTest::Dtype	test/test_reduction_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReductionLayerTest	file:	access:private
caffe::ReductionLayerTest::ReductionLayerTest	test/test_reduction_layer.cpp	/^  ReductionLayerTest()$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:()
caffe::ReductionLayerTest::TestForward	test/test_reduction_layer.cpp	/^  void TestForward(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:(ReductionParameter_ReductionOp op, float coeff = 1, int axis = 0)
caffe::ReductionLayerTest::TestGradient	test/test_reduction_layer.cpp	/^  void TestGradient(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:(ReductionParameter_ReductionOp op, float coeff = 1, int axis = 0)
caffe::ReductionLayerTest::blob_bottom_	test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
caffe::ReductionLayerTest::blob_bottom_vec_	test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
caffe::ReductionLayerTest::blob_top_	test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
caffe::ReductionLayerTest::blob_top_vec_	test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:	access:protected
caffe::ReductionLayerTest::~ReductionLayerTest	test/test_reduction_layer.cpp	/^  virtual ~ReductionLayerTest() {$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:()
caffe::ReshapeLayer::LayerSetUp	layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReshapeLayer::Reshape	layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ReshapeLayerTest	test/test_reshape_layer.cpp	/^class ReshapeLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::ReshapeLayerTest::Dtype	test/test_reshape_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReshapeLayerTest	file:	access:private
caffe::ReshapeLayerTest::ReshapeLayerTest	test/test_reshape_layer.cpp	/^  ReshapeLayerTest()$/;"	f	class:caffe::ReshapeLayerTest	access:protected	signature:()
caffe::ReshapeLayerTest::blob_bottom_	test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
caffe::ReshapeLayerTest::blob_bottom_vec_	test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
caffe::ReshapeLayerTest::blob_top_	test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
caffe::ReshapeLayerTest::blob_top_vec_	test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:	access:protected
caffe::ReshapeLayerTest::~ReshapeLayerTest	test/test_reshape_layer.cpp	/^  virtual ~ReshapeLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ReshapeLayerTest	access:protected	signature:()
caffe::SGDSolver::ApplyUpdate	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ApplyUpdate() {$/;"	f	class:caffe::SGDSolver	signature:()
caffe::SGDSolver::ClipGradients	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ClipGradients() {$/;"	f	class:caffe::SGDSolver	signature:()
caffe::SGDSolver::ComputeUpdateValue	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::SGDSolver	signature:(int param_id, Dtype rate)
caffe::SGDSolver::GetLearningRate	solvers/sgd_solver.cpp	/^Dtype SGDSolver<Dtype>::GetLearningRate() {$/;"	f	class:caffe::SGDSolver	signature:()
caffe::SGDSolver::Normalize	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Normalize(int param_id) {$/;"	f	class:caffe::SGDSolver	signature:(int param_id)
caffe::SGDSolver::PreSolve	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::PreSolve() {$/;"	f	class:caffe::SGDSolver	signature:()
caffe::SGDSolver::Regularize	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Regularize(int param_id) {$/;"	f	class:caffe::SGDSolver	signature:(int param_id)
caffe::SGDSolver::RestoreSolverStateFromBinaryProto	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromBinaryProto($/;"	f	class:caffe::SGDSolver	signature:( const string& state_file)
caffe::SGDSolver::RestoreSolverStateFromHDF5	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromHDF5(const string& state_file) {$/;"	f	class:caffe::SGDSolver	signature:(const string& state_file)
caffe::SGDSolver::SnapshotSolverState	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverState(const string& model_filename) {$/;"	f	class:caffe::SGDSolver	signature:(const string& model_filename)
caffe::SGDSolver::SnapshotSolverStateToBinaryProto	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToBinaryProto($/;"	f	class:caffe::SGDSolver	signature:( const string& model_filename)
caffe::SGDSolver::SnapshotSolverStateToHDF5	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToHDF5($/;"	f	class:caffe::SGDSolver	signature:( const string& model_filename)
caffe::SGDSolverTest	test/test_gradient_based_solver.cpp	/^class SGDSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:GradientBasedSolverTest
caffe::SGDSolverTest::Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SGDSolverTest	file:	access:private
caffe::SGDSolverTest::InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::SGDSolverTest	access:protected	signature:(const SolverParameter& param)
caffe::SPPLayer::Backward_cpu	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SPPLayer::Forward_cpu	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SPPLayer::GetPoolingParam	layers/spp_layer.cpp	/^LayerParameter SPPLayer<Dtype>::GetPoolingParam(const int pyramid_level,$/;"	f	class:caffe::SPPLayer	signature:(const int pyramid_level, const int bottom_h, const int bottom_w, const SPPParameter spp_param)
caffe::SPPLayer::LayerSetUp	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SPPLayer::Reshape	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SPPLayerTest	test/test_spp_layer.cpp	/^class SPPLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SPPLayerTest::Dtype	test/test_spp_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SPPLayerTest	file:	access:private
caffe::SPPLayerTest::SPPLayerTest	test/test_spp_layer.cpp	/^  SPPLayerTest()$/;"	f	class:caffe::SPPLayerTest	access:protected	signature:()
caffe::SPPLayerTest::SetUp	test/test_spp_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SPPLayerTest	access:protected	signature:()
caffe::SPPLayerTest::blob_bottom_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::blob_bottom_2_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::blob_bottom_3_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_3_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::blob_bottom_vec_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::blob_bottom_vec_2_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_2_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::blob_bottom_vec_3_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_3_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::blob_top_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::blob_top_vec_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SPPLayerTest	file:	access:protected
caffe::SPPLayerTest::~SPPLayerTest	test/test_spp_layer.cpp	/^  virtual ~SPPLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SPPLayerTest	access:protected	signature:()
caffe::STUB_GPU	layers/absval_layer.cpp	/^STUB_GPU(AbsValLayer);$/;"	p	namespace:caffe	file:	signature:(AbsValLayer)
caffe::STUB_GPU	layers/batch_norm_layer.cpp	/^STUB_GPU(BatchNormLayer);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayer)
caffe::STUB_GPU	layers/batch_reindex_layer.cpp	/^STUB_GPU(BatchReindexLayer);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayer)
caffe::STUB_GPU	layers/bnll_layer.cpp	/^STUB_GPU(BNLLLayer);$/;"	p	namespace:caffe	file:	signature:(BNLLLayer)
caffe::STUB_GPU	layers/concat_layer.cpp	/^STUB_GPU(ConcatLayer);$/;"	p	namespace:caffe	file:	signature:(ConcatLayer)
caffe::STUB_GPU	layers/contrastive_loss_layer.cpp	/^STUB_GPU(ContrastiveLossLayer);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayer)
caffe::STUB_GPU	layers/conv_layer.cpp	/^STUB_GPU(ConvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayer)
caffe::STUB_GPU	layers/deconv_layer.cpp	/^STUB_GPU(DeconvolutionLayer);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayer)
caffe::STUB_GPU	layers/dropout_layer.cpp	/^STUB_GPU(DropoutLayer);$/;"	p	namespace:caffe	file:	signature:(DropoutLayer)
caffe::STUB_GPU	layers/eltwise_layer.cpp	/^STUB_GPU(EltwiseLayer);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayer)
caffe::STUB_GPU	layers/embed_layer.cpp	/^STUB_GPU(EmbedLayer);$/;"	p	namespace:caffe	file:	signature:(EmbedLayer)
caffe::STUB_GPU	layers/euclidean_loss_layer.cpp	/^STUB_GPU(EuclideanLossLayer);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayer)
caffe::STUB_GPU	layers/exp_layer.cpp	/^STUB_GPU(ExpLayer);$/;"	p	namespace:caffe	file:	signature:(ExpLayer)
caffe::STUB_GPU	layers/filter_layer.cpp	/^STUB_GPU(FilterLayer);$/;"	p	namespace:caffe	file:	signature:(FilterLayer)
caffe::STUB_GPU	layers/hdf5_output_layer.cpp	/^STUB_GPU(HDF5OutputLayer);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayer)
caffe::STUB_GPU	layers/im2col_layer.cpp	/^STUB_GPU(Im2colLayer);$/;"	p	namespace:caffe	file:	signature:(Im2colLayer)
caffe::STUB_GPU	layers/inner_product_layer.cpp	/^STUB_GPU(InnerProductLayer);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayer)
caffe::STUB_GPU	layers/local_conv.cpp	/^STUB_GPU(LocalConvLayer);$/;"	p	namespace:caffe	file:	signature:(LocalConvLayer)
caffe::STUB_GPU	layers/log_layer.cpp	/^STUB_GPU(LogLayer);$/;"	p	namespace:caffe	file:	signature:(LogLayer)
caffe::STUB_GPU	layers/lrn_layer.cpp	/^STUB_GPU(LRNLayer);$/;"	p	namespace:caffe	file:	signature:(LRNLayer)
caffe::STUB_GPU	layers/mvn_layer.cpp	/^STUB_GPU(MVNLayer);$/;"	p	namespace:caffe	file:	signature:(MVNLayer)
caffe::STUB_GPU	layers/pooling_layer.cpp	/^STUB_GPU(PoolingLayer);$/;"	p	namespace:caffe	file:	signature:(PoolingLayer)
caffe::STUB_GPU	layers/power_layer.cpp	/^STUB_GPU(PowerLayer);$/;"	p	namespace:caffe	file:	signature:(PowerLayer)
caffe::STUB_GPU	layers/prelu_layer.cpp	/^STUB_GPU(PReLULayer);$/;"	p	namespace:caffe	file:	signature:(PReLULayer)
caffe::STUB_GPU	layers/reduction_layer.cpp	/^STUB_GPU(ReductionLayer);$/;"	p	namespace:caffe	file:	signature:(ReductionLayer)
caffe::STUB_GPU	layers/relu_layer.cpp	/^STUB_GPU(ReLULayer);$/;"	p	namespace:caffe	file:	signature:(ReLULayer)
caffe::STUB_GPU	layers/sigmoid_layer.cpp	/^STUB_GPU(SigmoidLayer);$/;"	p	namespace:caffe	file:	signature:(SigmoidLayer)
caffe::STUB_GPU	layers/silence_layer.cpp	/^STUB_GPU(SilenceLayer);$/;"	p	namespace:caffe	file:	signature:(SilenceLayer)
caffe::STUB_GPU	layers/slice_layer.cpp	/^STUB_GPU(SliceLayer);$/;"	p	namespace:caffe	file:	signature:(SliceLayer)
caffe::STUB_GPU	layers/softmax_layer.cpp	/^STUB_GPU(SoftmaxLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayer)
caffe::STUB_GPU	layers/softmax_loss_layer.cpp	/^STUB_GPU(SoftmaxWithLossLayer);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayer)
caffe::STUB_GPU	layers/split_layer.cpp	/^STUB_GPU(SplitLayer);$/;"	p	namespace:caffe	file:	signature:(SplitLayer)
caffe::STUB_GPU	layers/tanh_layer.cpp	/^STUB_GPU(TanHLayer);$/;"	p	namespace:caffe	file:	signature:(TanHLayer)
caffe::STUB_GPU	layers/tile_layer.cpp	/^STUB_GPU(TileLayer);$/;"	p	namespace:caffe	file:	signature:(TileLayer)
caffe::STUB_GPU	layers/wangzhy_layer.cpp	/^STUB_GPU(WangzhyLayer);$/;"	p	namespace:caffe	file:	signature:(WangzhyLayer)
caffe::STUB_GPU_BACKWARD	layers/lrn_layer.cpp	/^STUB_GPU_BACKWARD(LRNLayer, CrossChannelBackward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelBackward)
caffe::STUB_GPU_BACKWARD	layers/sigmoid_cross_entropy_loss_layer.cpp	/^STUB_GPU_BACKWARD(SigmoidCrossEntropyLossLayer, Backward);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayer, Backward)
caffe::STUB_GPU_FORWARD	layers/base_data_layer.cpp	/^STUB_GPU_FORWARD(BasePrefetchingDataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(BasePrefetchingDataLayer, Forward)
caffe::STUB_GPU_FORWARD	layers/hdf5_data_layer.cpp	/^STUB_GPU_FORWARD(HDF5DataLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayer, Forward)
caffe::STUB_GPU_FORWARD	layers/lrn_layer.cpp	/^STUB_GPU_FORWARD(LRNLayer, CrossChannelForward);$/;"	p	namespace:caffe	file:	signature:(LRNLayer, CrossChannelForward)
caffe::STUB_GPU_FORWARD	layers/threshold_layer.cpp	/^STUB_GPU_FORWARD(ThresholdLayer, Forward);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayer, Forward)
caffe::SigmoidCrossEntropyLossLayer::Backward_cpu	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SigmoidCrossEntropyLossLayer::Forward_cpu	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SigmoidCrossEntropyLossLayer::LayerSetUp	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SigmoidCrossEntropyLossLayer::Reshape	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^class SigmoidCrossEntropyLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SigmoidCrossEntropyLossLayerTest::Dtype	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:private
caffe::SigmoidCrossEntropyLossLayerTest::SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  SigmoidCrossEntropyLossLayerTest()$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:()
caffe::SigmoidCrossEntropyLossLayerTest::SigmoidCrossEntropyLossReference	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Dtype SigmoidCrossEntropyLossReference(const int count, const int num,$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:(const int count, const int num, const Dtype* input, const Dtype* target)
caffe::SigmoidCrossEntropyLossLayerTest::TestForward	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:()
caffe::SigmoidCrossEntropyLossLayerTest::blob_bottom_data_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
caffe::SigmoidCrossEntropyLossLayerTest::blob_bottom_targets_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_targets_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
caffe::SigmoidCrossEntropyLossLayerTest::blob_bottom_vec_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
caffe::SigmoidCrossEntropyLossLayerTest::blob_top_loss_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
caffe::SigmoidCrossEntropyLossLayerTest::blob_top_vec_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:	access:protected
caffe::SigmoidCrossEntropyLossLayerTest::~SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  virtual ~SigmoidCrossEntropyLossLayerTest() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:()
caffe::SigmoidLayer::Backward_cpu	layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SigmoidLayer::Forward_cpu	layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SigmoidLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SignalHandler::CheckForSignals	util/signal_handler.cpp	/^SolverAction::Enum SignalHandler::CheckForSignals() const {$/;"	f	class:caffe::SignalHandler	signature:() const
caffe::SignalHandler::GetActionFunction	util/signal_handler.cpp	/^ActionCallback SignalHandler::GetActionFunction() {$/;"	f	class:caffe::SignalHandler	signature:()
caffe::SignalHandler::SignalHandler	util/signal_handler.cpp	/^SignalHandler::SignalHandler(SolverAction::Enum SIGINT_action,$/;"	f	class:caffe::SignalHandler	signature:(SolverAction::Enum SIGINT_action, SolverAction::Enum SIGHUP_action)
caffe::SignalHandler::~SignalHandler	util/signal_handler.cpp	/^SignalHandler::~SignalHandler() {$/;"	f	class:caffe::SignalHandler	signature:()
caffe::SilenceLayer::Backward_cpu	layers/silence_layer.cpp	/^void SilenceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SilenceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SliceLayer::Backward_cpu	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SliceLayer::Forward_cpu	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SliceLayer::LayerSetUp	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SliceLayer::Reshape	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SliceLayerTest	test/test_slice_layer.cpp	/^class SliceLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SliceLayerTest::Dtype	test/test_slice_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SliceLayerTest	file:	access:private
caffe::SliceLayerTest::ReduceBottomBlobSize	test/test_slice_layer.cpp	/^  virtual void ReduceBottomBlobSize() {$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
caffe::SliceLayerTest::SetUp	test/test_slice_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
caffe::SliceLayerTest::SliceLayerTest	test/test_slice_layer.cpp	/^  SliceLayerTest()$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
caffe::SliceLayerTest::blob_bottom_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
caffe::SliceLayerTest::blob_bottom_vec_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
caffe::SliceLayerTest::blob_top_0_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_0_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
caffe::SliceLayerTest::blob_top_1_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_1_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
caffe::SliceLayerTest::blob_top_2_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
caffe::SliceLayerTest::blob_top_vec_0_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
caffe::SliceLayerTest::blob_top_vec_1_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:	access:protected
caffe::SliceLayerTest::~SliceLayerTest	test/test_slice_layer.cpp	/^  virtual ~SliceLayerTest() {$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
caffe::SoftmaxLayer::Backward_cpu	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SoftmaxLayer::Forward_cpu	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxLayer::Reshape	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxLayerTest	test/test_softmax_layer.cpp	/^class SoftmaxLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SoftmaxLayerTest::Dtype	test/test_softmax_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxLayerTest	file:	access:private
caffe::SoftmaxLayerTest::SoftmaxLayerTest	test/test_softmax_layer.cpp	/^  SoftmaxLayerTest()$/;"	f	class:caffe::SoftmaxLayerTest	access:protected	signature:()
caffe::SoftmaxLayerTest::blob_bottom_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
caffe::SoftmaxLayerTest::blob_bottom_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
caffe::SoftmaxLayerTest::blob_top_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
caffe::SoftmaxLayerTest::blob_top_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:	access:protected
caffe::SoftmaxLayerTest::~SoftmaxLayerTest	test/test_softmax_layer.cpp	/^  virtual ~SoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SoftmaxLayerTest	access:protected	signature:()
caffe::SoftmaxWithLossLayer::Backward_cpu	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxWithLossLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SoftmaxWithLossLayer::Forward_cpu	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxWithLossLayer::LayerSetUp	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxWithLossLayer::Reshape	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SoftmaxWithLossLayer::get_normalizer	layers/softmax_loss_layer.cpp	/^Dtype SoftmaxWithLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( LossParameter_NormalizationMode normalization_mode, int valid_count)
caffe::SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^class SoftmaxWithLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SoftmaxWithLossLayerTest::Dtype	test/test_softmax_with_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxWithLossLayerTest	file:	access:private
caffe::SoftmaxWithLossLayerTest::SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^  SoftmaxWithLossLayerTest()$/;"	f	class:caffe::SoftmaxWithLossLayerTest	access:protected	signature:()
caffe::SoftmaxWithLossLayerTest::blob_bottom_data_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
caffe::SoftmaxWithLossLayerTest::blob_bottom_label_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
caffe::SoftmaxWithLossLayerTest::blob_bottom_vec_	test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
caffe::SoftmaxWithLossLayerTest::blob_top_loss_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
caffe::SoftmaxWithLossLayerTest::blob_top_vec_	test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:	access:protected
caffe::SoftmaxWithLossLayerTest::~SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^  virtual ~SoftmaxWithLossLayerTest() {$/;"	f	class:caffe::SoftmaxWithLossLayerTest	access:protected	signature:()
caffe::Solver::CheckSnapshotWritePermissions	solver.cpp	/^void Solver<Dtype>::CheckSnapshotWritePermissions() {$/;"	f	class:caffe::Solver	signature:()
caffe::Solver::GetRequestedAction	solver.cpp	/^SolverAction::Enum Solver<Dtype>::GetRequestedAction() {$/;"	f	class:caffe::Solver	signature:()
caffe::Solver::Init	solver.cpp	/^void Solver<Dtype>::Init(const SolverParameter& param) {$/;"	f	class:caffe::Solver	signature:(const SolverParameter& param)
caffe::Solver::InitTestNets	solver.cpp	/^void Solver<Dtype>::InitTestNets() {$/;"	f	class:caffe::Solver	signature:()
caffe::Solver::InitTrainNet	solver.cpp	/^void Solver<Dtype>::InitTrainNet() {$/;"	f	class:caffe::Solver	signature:()
caffe::Solver::Restore	solver.cpp	/^void Solver<Dtype>::Restore(const char* state_file) {$/;"	f	class:caffe::Solver	signature:(const char* state_file)
caffe::Solver::SetActionFunction	solver.cpp	/^void Solver<Dtype>::SetActionFunction(ActionCallback func) {$/;"	f	class:caffe::Solver	signature:(ActionCallback func)
caffe::Solver::Snapshot	solver.cpp	/^void Solver<Dtype>::Snapshot() {$/;"	f	class:caffe::Solver	signature:()
caffe::Solver::SnapshotFilename	solver.cpp	/^string Solver<Dtype>::SnapshotFilename(const string extension) {$/;"	f	class:caffe::Solver	signature:(const string extension)
caffe::Solver::SnapshotToBinaryProto	solver.cpp	/^string Solver<Dtype>::SnapshotToBinaryProto() {$/;"	f	class:caffe::Solver	signature:()
caffe::Solver::SnapshotToHDF5	solver.cpp	/^string Solver<Dtype>::SnapshotToHDF5() {$/;"	f	class:caffe::Solver	signature:()
caffe::Solver::Solve	solver.cpp	/^void Solver<Dtype>::Solve(const char* resume_file) {$/;"	f	class:caffe::Solver	signature:(const char* resume_file)
caffe::Solver::Solver	solver.cpp	/^Solver<Dtype>::Solver(const SolverParameter& param, const Solver* root_solver)$/;"	f	class:caffe::Solver	signature:(const SolverParameter& param, const Solver* root_solver)
caffe::Solver::Solver	solver.cpp	/^Solver<Dtype>::Solver(const string& param_file, const Solver* root_solver)$/;"	f	class:caffe::Solver	signature:(const string& param_file, const Solver* root_solver)
caffe::Solver::Step	solver.cpp	/^void Solver<Dtype>::Step(int iters) {$/;"	f	class:caffe::Solver	signature:(int iters)
caffe::Solver::Test	solver.cpp	/^void Solver<Dtype>::Test(const int test_net_id) {$/;"	f	class:caffe::Solver	signature:(const int test_net_id)
caffe::Solver::TestAll	solver.cpp	/^void Solver<Dtype>::TestAll() {$/;"	f	class:caffe::Solver	signature:()
caffe::SolverFactoryTest	test/test_solver_factory.cpp	/^class SolverFactoryTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SolverFactoryTest::simple_solver_param	test/test_solver_factory.cpp	/^  SolverParameter simple_solver_param() {$/;"	f	class:caffe::SolverFactoryTest	access:protected	signature:()
caffe::SolverNeedsTypeUpgrade	util/upgrade_proto.cpp	/^bool SolverNeedsTypeUpgrade(const SolverParameter& solver_param) {$/;"	f	namespace:caffe	signature:(const SolverParameter& solver_param)
caffe::SolverTest	test/test_solver.cpp	/^class SolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SolverTest::Dtype	test/test_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SolverTest	file:	access:private
caffe::SolverTest::InitSolverFromProtoString	test/test_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::SolverTest	access:protected	signature:(const string& proto)
caffe::SolverTest::solver_	test/test_solver.cpp	/^  shared_ptr<Solver<Dtype> > solver_;$/;"	m	class:caffe::SolverTest	file:	access:protected
caffe::SolverTypeUpgradeTest	test/test_upgrade_proto.cpp	/^class SolverTypeUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::SolverTypeUpgradeTest::RunSolverTypeUpgradeTest	test/test_upgrade_proto.cpp	/^  void RunSolverTypeUpgradeTest($/;"	f	class:caffe::SolverTypeUpgradeTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
caffe::SplitBlobName	util/insert_splits.cpp	/^string SplitBlobName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe	signature:(const string& layer_name, const string& blob_name, const int blob_idx, const int split_idx)
caffe::SplitLayer::Backward_cpu	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::SplitLayer::Forward_cpu	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SplitLayer::Reshape	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::SplitLayerInsertionTest	test/test_split_layer.cpp	/^class SplitLayerInsertionTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::SplitLayerInsertionTest::RunInsertionTest	test/test_split_layer.cpp	/^  void RunInsertionTest($/;"	f	class:caffe::SplitLayerInsertionTest	access:protected	signature:( const string& input_param_string, const string& output_param_string)
caffe::SplitLayerName	util/insert_splits.cpp	/^string SplitLayerName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe	signature:(const string& layer_name, const string& blob_name, const int blob_idx)
caffe::SplitLayerTest	test/test_split_layer.cpp	/^class SplitLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::SplitLayerTest::Dtype	test/test_split_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SplitLayerTest	file:	access:private
caffe::SplitLayerTest::SplitLayerTest	test/test_split_layer.cpp	/^  SplitLayerTest()$/;"	f	class:caffe::SplitLayerTest	access:protected	signature:()
caffe::SplitLayerTest::blob_bottom_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
caffe::SplitLayerTest::blob_bottom_vec_	test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
caffe::SplitLayerTest::blob_top_a_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
caffe::SplitLayerTest::blob_top_b_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
caffe::SplitLayerTest::blob_top_vec_	test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SplitLayerTest	file:	access:protected
caffe::SplitLayerTest::~SplitLayerTest	test/test_split_layer.cpp	/^  virtual ~SplitLayerTest() {$/;"	f	class:caffe::SplitLayerTest	access:protected	signature:()
caffe::StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class StochasticPoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::StochasticPoolingLayerTest::Dtype	test/test_stochastic_pooling.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::StochasticPoolingLayerTest	file:	access:private
caffe::StochasticPoolingLayerTest::SetUp	test/test_stochastic_pooling.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::StochasticPoolingLayerTest	access:protected	signature:()
caffe::StochasticPoolingLayerTest::StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^  StochasticPoolingLayerTest()$/;"	f	class:caffe::StochasticPoolingLayerTest	access:protected	signature:()
caffe::StochasticPoolingLayerTest::blob_bottom_	test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
caffe::StochasticPoolingLayerTest::blob_bottom_vec_	test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
caffe::StochasticPoolingLayerTest::blob_top_	test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
caffe::StochasticPoolingLayerTest::blob_top_vec_	test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:	access:protected
caffe::StochasticPoolingLayerTest::~StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^  virtual ~StochasticPoolingLayerTest() {$/;"	f	class:caffe::StochasticPoolingLayerTest	access:protected	signature:()
caffe::SyncedMemory::async_gpu_push	syncedmem.cpp	/^void SyncedMemory::async_gpu_push(const cudaStream_t& stream) {$/;"	f	class:caffe::SyncedMemory	signature:(const cudaStream_t& stream)
caffe::SyncedMemory::cpu_data	syncedmem.cpp	/^const void* SyncedMemory::cpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
caffe::SyncedMemory::gpu_data	syncedmem.cpp	/^const void* SyncedMemory::gpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
caffe::SyncedMemory::mutable_cpu_data	syncedmem.cpp	/^void* SyncedMemory::mutable_cpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
caffe::SyncedMemory::mutable_gpu_data	syncedmem.cpp	/^void* SyncedMemory::mutable_gpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
caffe::SyncedMemory::set_cpu_data	syncedmem.cpp	/^void SyncedMemory::set_cpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory	signature:(void* data)
caffe::SyncedMemory::set_gpu_data	syncedmem.cpp	/^void SyncedMemory::set_gpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory	signature:(void* data)
caffe::SyncedMemory::to_cpu	syncedmem.cpp	/^inline void SyncedMemory::to_cpu() {$/;"	f	class:caffe::SyncedMemory	signature:()
caffe::SyncedMemory::to_gpu	syncedmem.cpp	/^inline void SyncedMemory::to_gpu() {$/;"	f	class:caffe::SyncedMemory	signature:()
caffe::SyncedMemory::~SyncedMemory	syncedmem.cpp	/^SyncedMemory::~SyncedMemory() {$/;"	f	class:caffe::SyncedMemory	signature:()
caffe::SyncedMemoryTest	test/test_syncedmem.cpp	/^class SyncedMemoryTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestBrewMode) {$/;"	f	namespace:caffe	signature:(CommonTest, TestBrewMode)
caffe::TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestCublasHandlerGPU) {$/;"	f	namespace:caffe	signature:(CommonTest, TestCublasHandlerGPU)
caffe::TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedCPU) {$/;"	f	namespace:caffe	signature:(CommonTest, TestRandSeedCPU)
caffe::TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedGPU) {$/;"	f	namespace:caffe	signature:(CommonTest, TestRandSeedGPU)
caffe::TEST_F	test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestRandomSeed) {$/;"	f	namespace:caffe	signature:(InternalThreadTest, TestRandomSeed)
caffe::TEST_F	test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestStartAndExit) {$/;"	f	namespace:caffe	signature:(InternalThreadTest, TestStartAndExit)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestCVMatToDatum)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumContent) {$/;"	f	namespace:caffe	signature:(IOTest, TestCVMatToDatumContent)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumReference) {$/;"	f	namespace:caffe	signature:(IOTest, TestCVMatToDatumReference)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatum)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNative) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumNative)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNativeGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumNativeGray)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMat) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMat)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContent) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatContent)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContentNative) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatContentNative)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNative) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatNative)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNativeGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestDecodeDatumToCVMatNativeGray)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadFileToDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadFileToDatum)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMat) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMat)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatGray)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResized) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatResized)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatResizedGray)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedSquare) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToCVMatResizedSquare)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatum) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatum)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContent) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumContent)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContentGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumContentGray)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumGray)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReference) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumReference)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReferenceResized) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumReferenceResized)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResized) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumResized)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedGray) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumResizedGray)
caffe::TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedSquare) {$/;"	f	namespace:caffe	signature:(IOTest, TestReadImageToDatumResizedSquare)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByIncludeMultiRule) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByIncludeMultiRule)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMaxLevel)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMaxLevel2)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMinLevel)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMinLevel2)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMultipleStage)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByMultipleStage2)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByNotStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByNotStage)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByStage)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInByStage2)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByExcludeMultiRule) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInOutByExcludeMultiRule)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByIncludeMultiRule) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterInOutByIncludeMultiRule)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterLeNetTrainTest) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterLeNetTrainTest)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMaxLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByMaxLevel)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMinLevel) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByMinLevel)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMultipleStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByMultipleStage)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByNotStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByNotStage)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByStage)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage2) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestFilterOutByStage2)
caffe::TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestNoFilter) {$/;"	f	namespace:caffe	signature:(FilterNetTest, TestNoFilter)
caffe::TEST_F	test/test_platform.cpp	/^TEST_F(PlatformTest, TestInitialization) {$/;"	f	namespace:caffe	signature:(PlatformTest, TestInitialization)
caffe::TEST_F	test/test_protobuf.cpp	/^TEST_F(ProtoTest, TestSerialization) {$/;"	f	namespace:caffe	signature:(ProtoTest, TestSerialization)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInputInsertion) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestInputInsertion)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertion) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestInsertion)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertionTwoTop) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestInsertionTwoTop)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestLossInsertion) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestLossInsertion)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion1) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertion1)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion2) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertion2)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionImageNet) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertionImageNet)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionWithInPlace) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestNoInsertionWithInPlace)
caffe::TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestWithInPlace) {$/;"	f	namespace:caffe	signature:(SplitLayerInsertionTest, TestWithInPlace)
caffe::TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPU) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestAllocationCPU)
caffe::TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPUGPU) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestAllocationCPUGPU)
caffe::TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationGPU) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestAllocationGPU)
caffe::TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestCPUWrite) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestCPUWrite)
caffe::TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPURead) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestGPURead)
caffe::TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPUWrite) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestGPUWrite)
caffe::TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestInitialization) {$/;"	f	namespace:caffe	signature:(SyncedMemoryTest, TestInitialization)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestAllParams) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestAllParams)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestImageNet)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestSimple) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestSimple)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestUpgradeV1LayerType) {$/;"	f	namespace:caffe	signature:(NetUpgradeTest, TestUpgradeV1LayerType)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe	signature:(PaddingLayerUpgradeTest, TestImageNet)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestSimple) {$/;"	f	namespace:caffe	signature:(PaddingLayerUpgradeTest, TestSimple)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestTwoTops) {$/;"	f	namespace:caffe	signature:(PaddingLayerUpgradeTest, TestTwoTops)
caffe::TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(SolverTypeUpgradeTest, TestSimple) {$/;"	f	namespace:caffe	signature:(SolverTypeUpgradeTest, TestSimple)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPU) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPU)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClass) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPUPerClass)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClassWithIgnoreLabel) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPUPerClassWithIgnoreLabel)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUTopK) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardCPUTopK)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardIgnoreLabel)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardWithSpatialAxes) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestForwardWithSpatialAxes)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupOutputPerClass) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestSetupOutputPerClass)
caffe::TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupTopK) {$/;"	f	namespace:caffe	signature:(AccuracyLayerTest, TestSetupTopK)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPU) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPU)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxis) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUAxis)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisMaxValTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUAxisMaxValTopK)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUAxisTopK)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxVal) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUMaxVal)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxValTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUMaxValTopK)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUTopK) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestCPUTopK)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxis) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupAxis)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisMaxVal) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupAxisMaxVal)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisNegativeIndexing) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupAxisNegativeIndexing)
caffe::TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupMaxVal) {$/;"	f	namespace:caffe	signature:(ArgMaxLayerTest, TestSetupMaxVal)
caffe::TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(BatchNormLayerTest, TestForward)
caffe::TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForwardInplace) {$/;"	f	namespace:caffe	signature:(BatchNormLayerTest, TestForwardInplace)
caffe::TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(BatchNormLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(BatchReindexLayerTest, TestForward)
caffe::TYPED_TEST	test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(BatchReindexLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerConstructor) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerConstructor)
caffe::TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerMilliSeconds) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerMilliSeconds)
caffe::TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerSeconds) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerSeconds)
caffe::TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStart) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerStart)
caffe::TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStop) {$/;"	f	namespace:caffe	signature:(BenchmarkTest, TestTimerStop)
caffe::TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestAsum) {$/;"	f	namespace:caffe	signature:(BlobMathTest, TestAsum)
caffe::TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestScaleData) {$/;"	f	namespace:caffe	signature:(BlobMathTest, TestScaleData)
caffe::TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestSumOfSquares) {$/;"	f	namespace:caffe	signature:(BlobMathTest, TestSumOfSquares)
caffe::TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestInitialization) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestInitialization)
caffe::TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestLegacyBlobProtoShapeEquals) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestLegacyBlobProtoShapeEquals)
caffe::TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestPointersCPUGPU) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestPointersCPUGPU)
caffe::TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestReshape) {$/;"	f	namespace:caffe	signature:(BlobSimpleTest, TestReshape)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestForwardChannels)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardNum) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestForwardNum)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardTrivial) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestForwardTrivial)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientChannels)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannelsBottomOneOnly) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientChannelsBottomOneOnly)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientNum) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientNum)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestGradientTrivial)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestSetupChannels)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannelsNegativeIndexing) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestSetupChannelsNegativeIndexing)
caffe::TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupNum) {$/;"	f	namespace:caffe	signature:(ConcatLayerTest, TestSetupNum)
caffe::TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestForward)
caffe::TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForwardLegacy) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestForwardLegacy)
caffe::TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradientLegacy) {$/;"	f	namespace:caffe	signature:(ContrastiveLossLayerTest, TestGradientLegacy)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test0DConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, Test0DConvolution)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Convolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, Test1x1Convolution)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Gradient) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, Test1x1Gradient)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestGradient3D)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradientGroup) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestGradientGroup)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestNDAgainst2D)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimple3DConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSimple3DConvolution)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSimpleConvolution)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolutionGroup) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSimpleConvolutionGroup)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSobelConvolution) {$/;"	f	namespace:caffe	signature:(ConvolutionLayerTest, TestSobelConvolution)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestGradientCuDNN)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientGroupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestGradientGroupCuDNN)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSetupCuDNN)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSimpleConvolutionCuDNN)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionGroupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSimpleConvolutionGroupCuDNN)
caffe::TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSobelConvolutionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNConvolutionLayerTest, TestSobelConvolutionCuDNN)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTestLMDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTestLevelDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainLMDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainLevelDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceSeededLMDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceSeededLevelDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceUnseededLMDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadCropTrainSequenceUnseededLevelDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadLMDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReadLevelDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLMDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReshapeLMDB)
caffe::TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLevelDB) {$/;"	f	namespace:caffe	signature:(DataLayerTest, TestReshapeLevelDB)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTest) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropMirrorTest)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTrain) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropMirrorTrain)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropSize) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropSize)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTest) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropTest)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTrain) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestCropTrain)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransform) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestEmptyTransform)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransformUniquePixels) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestEmptyTransformUniquePixels)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanFile) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMeanFile)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValue) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMeanValue)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValues) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMeanValues)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTest) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMirrorTest)
caffe::TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTrain) {$/;"	f	namespace:caffe	signature:(DataTransformTest, TestMirrorTrain)
caffe::TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestGetDB) {$/;"	f	namespace:caffe	signature:(DBTest, TestGetDB)
caffe::TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestKeyValue) {$/;"	f	namespace:caffe	signature:(DBTest, TestKeyValue)
caffe::TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestNext) {$/;"	f	namespace:caffe	signature:(DBTest, TestNext)
caffe::TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestSeekToFirst) {$/;"	f	namespace:caffe	signature:(DBTest, TestSeekToFirst)
caffe::TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestWrite) {$/;"	f	namespace:caffe	signature:(DBTest, TestWrite)
caffe::TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestGradient3D)
caffe::TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestNDAgainst2D)
caffe::TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSimpleDeconvolution) {$/;"	f	namespace:caffe	signature:(DeconvolutionLayerTest, TestSimpleDeconvolution)
caffe::TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestOneTopConstant) {$/;"	f	namespace:caffe	signature:(DummyDataLayerTest, TestOneTopConstant)
caffe::TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestThreeTopConstantGaussianConstant) {$/;"	f	namespace:caffe	signature:(DummyDataLayerTest, TestThreeTopConstantGaussianConstant)
caffe::TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestTwoTopConstant) {$/;"	f	namespace:caffe	signature:(DummyDataLayerTest, TestTwoTopConstant)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMax) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestMax)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMaxGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestMaxGradient)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestProd) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestProd)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSetUp)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestStableProdGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestStableProdGradient)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSum) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSum)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSumCoeff)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSumCoeffGradient)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestSumGradient)
caffe::TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestUnstableProdGradient) {$/;"	f	namespace:caffe	signature:(EltwiseLayerTest, TestUnstableProdGradient)
caffe::TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestForward)
caffe::TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForwardWithBias) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestForwardWithBias)
caffe::TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradientWithBias) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestGradientWithBias)
caffe::TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(EmbedLayerTest, TestSetUp)
caffe::TYPED_TEST	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(EuclideanLossLayerTest, TestForward)
caffe::TYPED_TEST	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(EuclideanLossLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(ConstantFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(ConstantFillerTest, TestFill)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(GaussianFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(GaussianFillerTest, TestFill)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillAverage) {$/;"	f	namespace:caffe	signature:(MSRAFillerTest, TestFillAverage)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe	signature:(MSRAFillerTest, TestFillFanIn)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe	signature:(MSRAFillerTest, TestFillFanOut)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(PositiveUnitballFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(PositiveUnitballFillerTest, TestFill)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(UniformFillerTest, TestFill) {$/;"	f	namespace:caffe	signature:(UniformFillerTest, TestFill)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillAverage) {$/;"	f	namespace:caffe	signature:(XavierFillerTest, TestFillAverage)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe	signature:(XavierFillerTest, TestFillFanIn)
caffe::TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe	signature:(XavierFillerTest, TestFillFanOut)
caffe::TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(FilterLayerTest, TestForward)
caffe::TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(FilterLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestReshape) {$/;"	f	namespace:caffe	signature:(FilterLayerTest, TestReshape)
caffe::TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestForward)
caffe::TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithAxis) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetupWithAxis)
caffe::TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithEndAxis) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetupWithEndAxis)
caffe::TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithStartAndEndAxis) {$/;"	f	namespace:caffe	signature:(FlattenLayerTest, TestSetupWithStartAndEndAxis)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdate)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverything)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithHalfMomentum) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithHalfMomentum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithMomentum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithWeightDecay)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestSnapshot)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestSnapshotShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest,$/;"	f	namespace:caffe	signature:(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverythingShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdate)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateLROneHundredth)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverything)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithWeightDecay)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestSnapshot)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestSnapshotShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest,$/;"	f	namespace:caffe	signature:(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverythingShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdate)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverything)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverythingShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestAdamLeastSquaresUpdateWithWeightDecay)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestSnapshot)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(AdamSolverTest, TestSnapshotShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdate)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateLROneHundredth)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverything)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithMomentum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecay)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestSnapshot)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestSnapshotShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest,$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverythingShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest,$/;"	f	namespace:caffe	signature:(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecayMultiIter)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverything)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithRmsDecay) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithRmsDecay)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithWeightDecay)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestSnapshot)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestSnapshotShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest,$/;"	f	namespace:caffe	signature:(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverythingShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdate) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdate)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateLROneHundredth)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverything)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithEverythingShare)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithMomentum)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecayMultiIter) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecayMultiIter)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshot) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestSnapshot)
caffe::TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe	signature:(SGDSolverTest, TestSnapshotShare)
caffe::TYPED_TEST	test/test_hdf5_output_layer.cpp	/^TYPED_TEST(HDF5OutputLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(HDF5OutputLayerTest, TestForward)
caffe::TYPED_TEST	test/test_hdf5data_layer.cpp	/^TYPED_TEST(HDF5DataLayerTest, TestRead) {$/;"	f	namespace:caffe	signature:(HDF5DataLayerTest, TestRead)
caffe::TYPED_TEST	test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL1) {$/;"	f	namespace:caffe	signature:(HingeLossLayerTest, TestGradientL1)
caffe::TYPED_TEST	test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL2) {$/;"	f	namespace:caffe	signature:(HingeLossLayerTest, TestGradientL2)
caffe::TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestForward)
caffe::TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradientForceND) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestGradientForceND)
caffe::TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRect) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestRect)
caffe::TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRectGradient) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestRectGradient)
caffe::TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(Im2colLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestRead) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestRead)
caffe::TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestReshape) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestReshape)
caffe::TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestResize) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestResize)
caffe::TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestShuffle) {$/;"	f	namespace:caffe	signature:(ImageDataLayerTest, TestShuffle)
caffe::TYPED_TEST	test/test_infogain_loss_layer.cpp	/^TYPED_TEST(InfogainLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(InfogainLossLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestForward)
caffe::TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForwardNoBatch) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestForwardNoBatch)
caffe::TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(InnerProductLayerTest, TestSetUp)
caffe::TYPED_TEST	test/test_layer_factory.cpp	/^TYPED_TEST(LayerFactoryTest, TestCreateLayer) {$/;"	f	namespace:caffe	signature:(LayerFactoryTest, TestCreateLayer)
caffe::TYPED_TEST	test/test_local_conv_layer.cpp	/^ TYPED_TEST(LocalConvLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_local_conv_layer.cpp	/^ TYPED_TEST(LocalConvLayerTest, TestSimpleConvolution) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestSimpleConvolution)
caffe::TYPED_TEST	test/test_local_conv_layer.cpp	/^ TYPED_TEST(LocalConvLayerTest, TestSimpleConvolutionGroup) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestSimpleConvolutionGroup)
caffe::TYPED_TEST	test/test_local_conv_layer.cpp	/^TYPED_TEST(LocalConvLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_local_conv_layer.cpp	/^TYPED_TEST(LocalConvLayerTest, TestGradientGroup) {$/;"	f	namespace:caffe	signature:(LocalConvLayerTest, TestGradientGroup)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestForwardAcrossChannelsCuDNN)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestForwardAcrossChannelsLargeRegionCuDNN)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestForwardWithinChannel)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestGradientAcrossChannelsCuDNN)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestGradientAcrossChannelsLargeRegionCuDNN)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe	signature:(CuDNNLRNLayerTest, TestGradientWithinChannel)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestForwardAcrossChannels)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestForwardAcrossChannelsLargeRegion)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestForwardWithinChannel)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestGradientAcrossChannels)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestGradientAcrossChannelsLargeRegion)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestGradientWithinChannel)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupAcrossChannels) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestSetupAcrossChannels)
caffe::TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupWithinChannel) {$/;"	f	namespace:caffe	signature:(LRNLayerTest, TestSetupWithinChannel)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestAsum)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestCopy)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestFabs)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestHammingDistance) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestHammingDistance)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestNothing) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestNothing)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestScale)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestSgnbit)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe	signature:(CPUMathFunctionsTest, TestSign)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, DISABLED_TestHammingDistance) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, DISABLED_TestHammingDistance)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestAsum)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestCopy)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestFabs)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestScale)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestSgnbit)
caffe::TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe	signature:(GPUMathFunctionsTest, TestSign)
caffe::TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestBackward) {$/;"	f	namespace:caffe	signature:(MaxPoolingDropoutTest, TestBackward)
caffe::TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestForward) {$/;"	f	namespace:caffe	signature:(MaxPoolingDropoutTest, TestForward)
caffe::TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestSetup) {$/;"	f	namespace:caffe	signature:(MaxPoolingDropoutTest, TestSetup)
caffe::TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddDatumVectorDefaultTransform) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, AddDatumVectorDefaultTransform)
caffe::TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddMatVectorDefaultTransform) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, AddMatVectorDefaultTransform)
caffe::TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, TestForward)
caffe::TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetBatchSize) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, TestSetBatchSize)
caffe::TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(MemoryDataLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_multinomial_logistic_loss_layer.cpp	/^TYPED_TEST(MultinomialLogisticLossLayerTest, TestGradientCPU) {$/;"	f	namespace:caffe	signature:(MultinomialLogisticLossLayerTest, TestGradientCPU)
caffe::TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestForward)
caffe::TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestForwardAcrossChannels)
caffe::TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardMeanOnly) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestForwardMeanOnly)
caffe::TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestGradientAcrossChannels)
caffe::TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientMeanOnly) {$/;"	f	namespace:caffe	signature:(MVNLayerTest, TestGradientMeanOnly)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBackwardWithAccuracyLayer) {$/;"	f	namespace:caffe	signature:(NetTest, TestBackwardWithAccuracyLayer)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackward) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackward)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardEuclideanForce) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackwardEuclideanForce)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardForce) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackwardForce)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardTricky) {$/;"	f	namespace:caffe	signature:(NetTest, TestBottomNeedBackwardTricky)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestComboLossWeight) {$/;"	f	namespace:caffe	signature:(NetTest, TestComboLossWeight)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestFromTo) {$/;"	f	namespace:caffe	signature:(NetTest, TestFromTo)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetBlob) {$/;"	f	namespace:caffe	signature:(NetTest, TestGetBlob)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetLayerByName) {$/;"	f	namespace:caffe	signature:(NetTest, TestGetLayerByName)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasBlob) {$/;"	f	namespace:caffe	signature:(NetTest, TestHasBlob)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasLayer) {$/;"	f	namespace:caffe	signature:(NetTest, TestHasLayer)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeight) {$/;"	f	namespace:caffe	signature:(NetTest, TestLossWeight)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeightMidNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestLossWeightMidNet)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestParamPropagateDown) {$/;"	f	namespace:caffe	signature:(NetTest, TestParamPropagateDown)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestReshape) {$/;"	f	namespace:caffe	signature:(NetTest, TestReshape)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDataNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsDataNet)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDiffNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsDiffNet)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsResume) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsResume)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsUpdate) {$/;"	f	namespace:caffe	signature:(NetTest, TestSharedWeightsUpdate)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSkipPropagateDown) {$/;"	f	namespace:caffe	signature:(NetTest, TestSkipPropagateDown)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDataNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestUnsharedWeightsDataNet)
caffe::TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDiffNet) {$/;"	f	namespace:caffe	signature:(NetTest, TestUnsharedWeightsDiffNet)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUGradientCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUGradientWithNegativeSlopeCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestReLUWithNegativeSlopeCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestSigmoidCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestSigmoidGradientCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestTanHCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNNeuronLayerTest, TestTanHGradientCuDNN)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestAbsGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsVal) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestAbsVal)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLL) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestBNLL)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLLGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestBNLLGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradientTest) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutGradientTest)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutHalf) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutHalf)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutTestPhase) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutTestPhase)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutThreeQuarters) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestDropoutThreeQuarters)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2Shift1)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpGradientBase2Shift1Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayer) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayer)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2Shift1)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestExpLayerBase2Shift1Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2Shift1)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogGradientBase2Shift1Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayer) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayer)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2Shift1)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestLogLayerBase2Shift1Scale3)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUConsistencyReLU) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUConsistencyReLU)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForward) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUForward)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForwardChannelShared) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUForwardChannelShared)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradientChannelShared) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUGradientChannelShared)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUInPlace) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUInPlace)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUParam) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestPReLUParam)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLU) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLU)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLUGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradientWithNegativeSlope) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLUGradientWithNegativeSlope)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUWithNegativeSlope) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestReLUWithNegativeSlope)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoid) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestSigmoid)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoidGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestSigmoidGradient)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanH) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestTanH)
caffe::TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe	signature:(NeuronLayerTest, TestTanHGradient)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardAveCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestForwardAveCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestForwardMaxCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxPaddedCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestForwardMaxPaddedCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAveCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestGradientAveCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAvePaddedCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestGradientAvePaddedCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientMaxCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestGradientMaxCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestSetupCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupPaddedCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNPoolingLayerTest, TestSetupPaddedCuDNN)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardAve) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardAve)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMax) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardMax)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxPadded) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardMaxPadded)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxTopMask) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestForwardMaxTopMask)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAve) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientAve)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAvePadded) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientAvePadded)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMax) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientMax)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMaxTopMask) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestGradientMaxTopMask)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupGlobalPooling) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestSetupGlobalPooling)
caffe::TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupPadded) {$/;"	f	namespace:caffe	signature:(PoolingLayerTest, TestSetupPadded)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPower) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPower)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerGradient)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradientShiftZero) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerGradientShiftZero)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOne) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerOne)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOneGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerOneGradient)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwo) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerTwo)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerTwoGradient)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoScaleHalfGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerTwoScaleHalfGradient)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZero) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerZero)
caffe::TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZeroGradient) {$/;"	f	namespace:caffe	signature:(PowerLayerTest, TestPowerZeroGradient)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngBernoulli)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli2) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngBernoulli2)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulliTimesBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngBernoulliTimesBernoulli)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussian)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussian2)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2GPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussian2GPU)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianGPU)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianTimesBernoulli)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussian) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianTimesGaussian)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussianGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngGaussianTimesGaussianGPU)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniform)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniform2)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2GPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniform2GPU)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformGPU)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformIntGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformIntGPU)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesBernoulli) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformTimesBernoulli)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniform) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformTimesUniform)
caffe::TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniformGPU) {$/;"	f	namespace:caffe	signature:(RandomNumberGeneratorTest, TestRngUniformTimesUniformGPU)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSum) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSum)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeff)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeffAxis1)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeffAxis1Gradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumCoeffGradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestAbsSumGradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMean) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMean)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeff)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeffAxis1)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeffGradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradientAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanCoeffGradientAxis1)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestMeanGradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUp) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSetUp)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSetUpWithAxis1)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis2) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSetUpWithAxis2)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSum) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSum)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeff)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeffAxis1)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeffAxis1Gradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumCoeffGradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumGradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquares) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquares)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeff) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeff)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeffAxis1)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1Gradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeffAxis1Gradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresCoeffGradient)
caffe::TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresGradient) {$/;"	f	namespace:caffe	signature:(ReductionLayerTest, TestSumOfSquaresGradient)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestCopyDimensions) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestCopyDimensions)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenMiddle) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestFlattenMiddle)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenOutputSizes) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestFlattenOutputSizes)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenValues) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestFlattenValues)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestForward)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForwardAfterReshape) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestForwardAfterReshape)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecified) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInferenceOfUnspecified)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecifiedWithStartAxis) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInferenceOfUnspecifiedWithStartAxis)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesEnd) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInsertSingletonAxesEnd)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesMiddle) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInsertSingletonAxesMiddle)
caffe::TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesStart) {$/;"	f	namespace:caffe	signature:(ReshapeLayerTest, TestInsertSingletonAxesStart)
caffe::TYPED_TEST	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SigmoidCrossEntropyLossLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestSigmoidCrossEntropyLoss) {$/;"	f	namespace:caffe	signature:(SigmoidCrossEntropyLossLayerTest, TestSigmoidCrossEntropyLoss)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestGradientAcrossChannels)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossNum) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestGradientAcrossNum)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestGradientTrivial)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSetupChannels)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupNum) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSetupNum)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossChannels) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSliceAcrossChannels)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossNum) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestSliceAcrossNum)
caffe::TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestTrivialSlice) {$/;"	f	namespace:caffe	signature:(SliceLayerTest, TestTrivialSlice)
caffe::TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestForwardCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNSoftmaxLayerTest, TestForwardCuDNN)
caffe::TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe	signature:(CuDNNSoftmaxLayerTest, TestGradientCuDNN)
caffe::TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestForward) {$/;"	f	namespace:caffe	signature:(SoftmaxLayerTest, TestForward)
caffe::TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SoftmaxLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestForwardIgnoreLabel)
caffe::TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientIgnoreLabel) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestGradientIgnoreLabel)
caffe::TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientUnnormalized) {$/;"	f	namespace:caffe	signature:(SoftmaxWithLossLayerTest, TestGradientUnnormalized)
caffe::TYPED_TEST	test/test_solver.cpp	/^TYPED_TEST(SolverTest, TestInitTrainTestNets) {$/;"	f	namespace:caffe	signature:(SolverTest, TestInitTrainTestNets)
caffe::TYPED_TEST	test/test_solver_factory.cpp	/^TYPED_TEST(SolverFactoryTest, TestCreateSolver) {$/;"	f	namespace:caffe	signature:(SolverFactoryTest, TestCreateSolver)
caffe::TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, Test) {$/;"	f	namespace:caffe	signature:(SplitLayerTest, Test)
caffe::TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SplitLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(SplitLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestEqualOutputDims)
caffe::TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims2) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestEqualOutputDims2)
caffe::TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestForwardBackward) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestForwardBackward)
caffe::TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(SPPLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(CPUStochasticPoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(CPUStochasticPoolingLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestGradient) {$/;"	f	namespace:caffe	signature:(GPUStochasticPoolingLayerTest, TestGradient)
caffe::TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochastic) {$/;"	f	namespace:caffe	signature:(GPUStochasticPoolingLayerTest, TestStochastic)
caffe::TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochasticTestPhase) {$/;"	f	namespace:caffe	signature:(GPUStochasticPoolingLayerTest, TestStochasticTestPhase)
caffe::TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanH) {$/;"	f	namespace:caffe	signature:(TanHLayerTest, TestTanH)
caffe::TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe	signature:(TanHLayerTest, TestTanHGradient)
caffe::TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHOverflow) {$/;"	f	namespace:caffe	signature:(TanHLayerTest, TestTanHOverflow)
caffe::TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test) {$/;"	f	namespace:caffe	signature:(ThresholdLayerTest, Test)
caffe::TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test2) {$/;"	f	namespace:caffe	signature:(ThresholdLayerTest, Test2)
caffe::TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(ThresholdLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestForwardChannels)
caffe::TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardNum) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestForwardNum)
caffe::TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestGradientChannels)
caffe::TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientNum) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestGradientNum)
caffe::TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestSetup) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestSetup)
caffe::TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialGradient) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestTrivialGradient)
caffe::TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialSetup) {$/;"	f	namespace:caffe	signature:(TileLayerTest, TestTrivialSetup)
caffe::TYPED_TEST	test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemmCPUGPU) {$/;"	f	namespace:caffe	signature:(GemmTest, TestGemmCPUGPU)
caffe::TYPED_TEST	test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemvCPUGPU) {$/;"	f	namespace:caffe	signature:(GemmTest, TestGemvCPUGPU)
caffe::TYPED_TEST_CASE	test/test_accuracy_layer.cpp	/^TYPED_TEST_CASE(AccuracyLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(AccuracyLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_argmax_layer.cpp	/^TYPED_TEST_CASE(ArgMaxLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(ArgMaxLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_batch_norm_layer.cpp	/^  TYPED_TEST_CASE(BatchNormLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BatchNormLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_batch_reindex_layer.cpp	/^TYPED_TEST_CASE(BatchReindexLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BatchReindexLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_benchmark.cpp	/^TYPED_TEST_CASE(BenchmarkTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BenchmarkTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_blob.cpp	/^TYPED_TEST_CASE(BlobMathTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(BlobMathTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_blob.cpp	/^TYPED_TEST_CASE(BlobSimpleTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(BlobSimpleTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_concat_layer.cpp	/^TYPED_TEST_CASE(ConcatLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ConcatLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST_CASE(ContrastiveLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ContrastiveLossLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_convolution_layer.cpp	/^TYPED_TEST_CASE(ConvolutionLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ConvolutionLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_convolution_layer.cpp	/^TYPED_TEST_CASE(CuDNNConvolutionLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNConvolutionLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_data_layer.cpp	/^TYPED_TEST_CASE(DataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(DataLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_data_transformer.cpp	/^TYPED_TEST_CASE(DataTransformTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(DataTransformTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_db.cpp	/^TYPED_TEST_CASE(DBTest, TestTypes);$/;"	p	namespace:caffe	file:	signature:(DBTest, TestTypes)
caffe::TYPED_TEST_CASE	test/test_deconvolution_layer.cpp	/^TYPED_TEST_CASE(DeconvolutionLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(DeconvolutionLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_dummy_data_layer.cpp	/^TYPED_TEST_CASE(DummyDataLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(DummyDataLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_eltwise_layer.cpp	/^TYPED_TEST_CASE(EltwiseLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(EltwiseLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_embed_layer.cpp	/^TYPED_TEST_CASE(EmbedLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(EmbedLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST_CASE(EuclideanLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(EuclideanLossLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(ConstantFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(ConstantFillerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(GaussianFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GaussianFillerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(MSRAFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(MSRAFillerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(PositiveUnitballFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(PositiveUnitballFillerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(UniformFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(UniformFillerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_filler.cpp	/^TYPED_TEST_CASE(XavierFillerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(XavierFillerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_filter_layer.cpp	/^TYPED_TEST_CASE(FilterLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(FilterLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_flatten_layer.cpp	/^TYPED_TEST_CASE(FlattenLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(FlattenLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(AdaDeltaSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(AdaDeltaSolverTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(AdaGradSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(AdaGradSolverTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(AdamSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(AdamSolverTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(NesterovSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(NesterovSolverTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(RMSPropSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(RMSPropSolverTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_gradient_based_solver.cpp	/^TYPED_TEST_CASE(SGDSolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SGDSolverTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_hdf5_output_layer.cpp	/^TYPED_TEST_CASE(HDF5OutputLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(HDF5OutputLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_hdf5data_layer.cpp	/^TYPED_TEST_CASE(HDF5DataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(HDF5DataLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_hinge_loss_layer.cpp	/^TYPED_TEST_CASE(HingeLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(HingeLossLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_im2col_layer.cpp	/^TYPED_TEST_CASE(Im2colLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(Im2colLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_image_data_layer.cpp	/^TYPED_TEST_CASE(ImageDataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ImageDataLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_infogain_loss_layer.cpp	/^TYPED_TEST_CASE(InfogainLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(InfogainLossLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_inner_product_layer.cpp	/^TYPED_TEST_CASE(InnerProductLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(InnerProductLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_layer_factory.cpp	/^TYPED_TEST_CASE(LayerFactoryTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(LayerFactoryTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_local_conv_layer.cpp	/^TYPED_TEST_CASE(LocalConvLayerTest, TestType);$/;"	p	namespace:caffe	file:	signature:(LocalConvLayerTest, TestType)
caffe::TYPED_TEST_CASE	test/test_lrn_layer.cpp	/^TYPED_TEST_CASE(CuDNNLRNLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNLRNLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_lrn_layer.cpp	/^TYPED_TEST_CASE(LRNLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(LRNLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_math_functions.cpp	/^TYPED_TEST_CASE(CPUMathFunctionsTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CPUMathFunctionsTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_math_functions.cpp	/^TYPED_TEST_CASE(GPUMathFunctionsTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GPUMathFunctionsTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST_CASE(MaxPoolingDropoutTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(MaxPoolingDropoutTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_memory_data_layer.cpp	/^TYPED_TEST_CASE(MemoryDataLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(MemoryDataLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_multinomial_logistic_loss_layer.cpp	/^TYPED_TEST_CASE(MultinomialLogisticLossLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(MultinomialLogisticLossLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_mvn_layer.cpp	/^TYPED_TEST_CASE(MVNLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(MVNLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_net.cpp	/^TYPED_TEST_CASE(NetTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(NetTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_neuron_layer.cpp	/^TYPED_TEST_CASE(CuDNNNeuronLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNNeuronLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_neuron_layer.cpp	/^TYPED_TEST_CASE(NeuronLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(NeuronLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_pooling_layer.cpp	/^TYPED_TEST_CASE(CuDNNPoolingLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNPoolingLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_pooling_layer.cpp	/^TYPED_TEST_CASE(PoolingLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(PoolingLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_power_layer.cpp	/^TYPED_TEST_CASE(PowerLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(PowerLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_random_number_generator.cpp	/^TYPED_TEST_CASE(RandomNumberGeneratorTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(RandomNumberGeneratorTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_reduction_layer.cpp	/^TYPED_TEST_CASE(ReductionLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ReductionLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_reshape_layer.cpp	/^TYPED_TEST_CASE(ReshapeLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ReshapeLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST_CASE(SigmoidCrossEntropyLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SigmoidCrossEntropyLossLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_slice_layer.cpp	/^TYPED_TEST_CASE(SliceLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SliceLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_softmax_layer.cpp	/^TYPED_TEST_CASE(CuDNNSoftmaxLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CuDNNSoftmaxLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_softmax_layer.cpp	/^TYPED_TEST_CASE(SoftmaxLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SoftmaxLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST_CASE(SoftmaxWithLossLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SoftmaxWithLossLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_solver.cpp	/^TYPED_TEST_CASE(SolverTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SolverTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_solver_factory.cpp	/^TYPED_TEST_CASE(SolverFactoryTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SolverFactoryTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_split_layer.cpp	/^TYPED_TEST_CASE(SplitLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SplitLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_spp_layer.cpp	/^TYPED_TEST_CASE(SPPLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(SPPLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_stochastic_pooling.cpp	/^TYPED_TEST_CASE(CPUStochasticPoolingLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(CPUStochasticPoolingLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_stochastic_pooling.cpp	/^TYPED_TEST_CASE(GPUStochasticPoolingLayerTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GPUStochasticPoolingLayerTest, TestDtypes)
caffe::TYPED_TEST_CASE	test/test_tanh_layer.cpp	/^TYPED_TEST_CASE(TanHLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(TanHLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_threshold_layer.cpp	/^TYPED_TEST_CASE(ThresholdLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(ThresholdLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_tile_layer.cpp	/^TYPED_TEST_CASE(TileLayerTest, TestDtypesAndDevices);$/;"	p	namespace:caffe	file:	signature:(TileLayerTest, TestDtypesAndDevices)
caffe::TYPED_TEST_CASE	test/test_util_blas.cpp	/^TYPED_TEST_CASE(GemmTest, TestDtypes);$/;"	p	namespace:caffe	file:	signature:(GemmTest, TestDtypes)
caffe::TanHLayer::Backward_cpu	layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::TanHLayer::Forward_cpu	layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::TanHLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::TanHLayerTest	test/test_tanh_layer.cpp	/^class TanHLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::TanHLayerTest::Dtype	test/test_tanh_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TanHLayerTest	file:	access:private
caffe::TanHLayerTest::TanHLayerTest	test/test_tanh_layer.cpp	/^  TanHLayerTest()$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:()
caffe::TanHLayerTest::TestBackward	test/test_tanh_layer.cpp	/^  void TestBackward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:(Dtype filler_std)
caffe::TanHLayerTest::TestForward	test/test_tanh_layer.cpp	/^  void TestForward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:(Dtype filler_std)
caffe::TanHLayerTest::blob_bottom_	test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
caffe::TanHLayerTest::blob_bottom_vec_	test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
caffe::TanHLayerTest::blob_top_	test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
caffe::TanHLayerTest::blob_top_vec_	test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TanHLayerTest	file:	access:protected
caffe::TanHLayerTest::~TanHLayerTest	test/test_tanh_layer.cpp	/^  virtual ~TanHLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:()
caffe::TestThreadA	test/test_internal_thread.cpp	/^class TestThreadA : public InternalThread {$/;"	c	namespace:caffe	file:	inherits:InternalThread
caffe::TestThreadA::InternalThreadEntry	test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadA	file:	access:private	signature:()
caffe::TestThreadB	test/test_internal_thread.cpp	/^class TestThreadB : public InternalThread {$/;"	c	namespace:caffe	file:	inherits:InternalThread
caffe::TestThreadB::InternalThreadEntry	test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadB	file:	access:private	signature:()
caffe::TestType	test/test_local_conv_layer.cpp	/^typedef ::testing::Types<FloatGPU> TestType;$/;"	t	namespace:caffe	file:
caffe::TestTypes	test/test_db.cpp	/^typedef ::testing::Types<TypeLevelDB, TypeLMDB> TestTypes;$/;"	t	namespace:caffe	file:
caffe::ThresholdLayer::Forward_cpu	layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ThresholdLayer::LayerSetUp	layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::ThresholdLayerTest	test/test_threshold_layer.cpp	/^class ThresholdLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::ThresholdLayerTest::Dtype	test/test_threshold_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ThresholdLayerTest	file:	access:private
caffe::ThresholdLayerTest::ThresholdLayerTest	test/test_threshold_layer.cpp	/^  ThresholdLayerTest()$/;"	f	class:caffe::ThresholdLayerTest	access:protected	signature:()
caffe::ThresholdLayerTest::blob_bottom_	test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
caffe::ThresholdLayerTest::blob_bottom_vec_	test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
caffe::ThresholdLayerTest::blob_top_	test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
caffe::ThresholdLayerTest::blob_top_vec_	test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:	access:protected
caffe::ThresholdLayerTest::~ThresholdLayerTest	test/test_threshold_layer.cpp	/^  virtual ~ThresholdLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ThresholdLayerTest	access:protected	signature:()
caffe::TileLayer::Backward_cpu	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TileLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::TileLayer::Forward_cpu	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::TileLayer::Reshape	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Reshape($/;"	f	class:caffe::TileLayer	signature:( const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::TileLayerTest	test/test_tile_layer.cpp	/^class TileLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:	inherits:MultiDeviceTest
caffe::TileLayerTest::Dtype	test/test_tile_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TileLayerTest	file:	access:private
caffe::TileLayerTest::SetUp	test/test_tile_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::TileLayerTest	access:protected	signature:()
caffe::TileLayerTest::TileLayerTest	test/test_tile_layer.cpp	/^  TileLayerTest()$/;"	f	class:caffe::TileLayerTest	access:protected	signature:()
caffe::TileLayerTest::blob_bottom_	test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
caffe::TileLayerTest::blob_bottom_vec_	test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
caffe::TileLayerTest::blob_top_	test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
caffe::TileLayerTest::blob_top_vec_	test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TileLayerTest	file:	access:protected
caffe::TileLayerTest::~TileLayerTest	test/test_tile_layer.cpp	/^  virtual ~TileLayerTest() {$/;"	f	class:caffe::TileLayerTest	access:protected	signature:()
caffe::Timer::Init	util/benchmark.cpp	/^void Timer::Init() {$/;"	f	class:caffe::Timer	signature:()
caffe::Timer::MicroSeconds	util/benchmark.cpp	/^float Timer::MicroSeconds() {$/;"	f	class:caffe::Timer	signature:()
caffe::Timer::MilliSeconds	util/benchmark.cpp	/^float Timer::MilliSeconds() {$/;"	f	class:caffe::Timer	signature:()
caffe::Timer::Seconds	util/benchmark.cpp	/^float Timer::Seconds() {$/;"	f	class:caffe::Timer	signature:()
caffe::Timer::Start	util/benchmark.cpp	/^void Timer::Start() {$/;"	f	class:caffe::Timer	signature:()
caffe::Timer::Stop	util/benchmark.cpp	/^void Timer::Stop() {$/;"	f	class:caffe::Timer	signature:()
caffe::Timer::Timer	util/benchmark.cpp	/^Timer::Timer()$/;"	f	class:caffe::Timer	signature:()
caffe::Timer::~Timer	util/benchmark.cpp	/^Timer::~Timer() {$/;"	f	class:caffe::Timer	signature:()
caffe::TypeLMDB	test/test_db.cpp	/^struct TypeLMDB {$/;"	s	namespace:caffe	file:
caffe::TypeLMDB::backend	test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLMDB	file:	access:public
caffe::TypeLMDB::backend	test/test_db.cpp	/^DataParameter_DB TypeLMDB::backend = DataParameter_DB_LMDB;$/;"	m	class:caffe::TypeLMDB	file:
caffe::TypeLevelDB	test/test_db.cpp	/^struct TypeLevelDB {$/;"	s	namespace:caffe	file:
caffe::TypeLevelDB::backend	test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLevelDB	file:	access:public
caffe::TypeLevelDB::backend	test/test_db.cpp	/^DataParameter_DB TypeLevelDB::backend = DataParameter_DB_LEVELDB;$/;"	m	class:caffe::TypeLevelDB	file:
caffe::UniformFillerTest	test/test_filler.cpp	/^class UniformFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::UniformFillerTest::UniformFillerTest	test/test_filler.cpp	/^  UniformFillerTest()$/;"	f	class:caffe::UniformFillerTest	access:protected	signature:()
caffe::UniformFillerTest::blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::UniformFillerTest	file:	access:protected
caffe::UniformFillerTest::filler_	test/test_filler.cpp	/^  shared_ptr<UniformFiller<Dtype> > filler_;$/;"	m	class:caffe::UniformFillerTest	file:	access:protected
caffe::UniformFillerTest::filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::UniformFillerTest	file:	access:protected
caffe::UniformFillerTest::~UniformFillerTest	test/test_filler.cpp	/^  virtual ~UniformFillerTest() { delete blob_; }$/;"	f	class:caffe::UniformFillerTest	access:protected	signature:()
caffe::UpgradeNetAsNeeded	util/upgrade_proto.cpp	/^bool UpgradeNetAsNeeded(const string& param_file, NetParameter* param) {$/;"	f	namespace:caffe	signature:(const string& param_file, NetParameter* param)
caffe::UpgradeNetDataTransformation	util/upgrade_proto.cpp	/^void UpgradeNetDataTransformation(NetParameter* net_param) {$/;"	f	namespace:caffe	signature:(NetParameter* net_param)
caffe::UpgradeSolverAsNeeded	util/upgrade_proto.cpp	/^bool UpgradeSolverAsNeeded(const string& param_file, SolverParameter* param) {$/;"	f	namespace:caffe	signature:(const string& param_file, SolverParameter* param)
caffe::UpgradeSolverType	util/upgrade_proto.cpp	/^bool UpgradeSolverType(SolverParameter* solver_param) {$/;"	f	namespace:caffe	signature:(SolverParameter* solver_param)
caffe::UpgradeV0LayerParameter	util/upgrade_proto.cpp	/^bool UpgradeV0LayerParameter(const V1LayerParameter& v0_layer_connection,$/;"	f	namespace:caffe	signature:(const V1LayerParameter& v0_layer_connection, V1LayerParameter* layer_param)
caffe::UpgradeV0LayerType	util/upgrade_proto.cpp	/^V1LayerParameter_LayerType UpgradeV0LayerType(const string& type) {$/;"	f	namespace:caffe	signature:(const string& type)
caffe::UpgradeV0Net	util/upgrade_proto.cpp	/^bool UpgradeV0Net(const NetParameter& v0_net_param_padding_layers,$/;"	f	namespace:caffe	signature:(const NetParameter& v0_net_param_padding_layers, NetParameter* net_param)
caffe::UpgradeV0PaddingLayers	util/upgrade_proto.cpp	/^void UpgradeV0PaddingLayers(const NetParameter& param,$/;"	f	namespace:caffe	signature:(const NetParameter& param, NetParameter* param_upgraded_pad)
caffe::UpgradeV1LayerParameter	util/upgrade_proto.cpp	/^bool UpgradeV1LayerParameter(const V1LayerParameter& v1_layer_param,$/;"	f	namespace:caffe	signature:(const V1LayerParameter& v1_layer_param, LayerParameter* layer_param)
caffe::UpgradeV1LayerType	util/upgrade_proto.cpp	/^const char* UpgradeV1LayerType(const V1LayerParameter_LayerType type) {$/;"	f	namespace:caffe	signature:(const V1LayerParameter_LayerType type)
caffe::UpgradeV1Net	util/upgrade_proto.cpp	/^bool UpgradeV1Net(const NetParameter& v1_net_param, NetParameter* net_param) {$/;"	f	namespace:caffe	signature:(const NetParameter& v1_net_param, NetParameter* net_param)
caffe::WangzhyLayer::Backward_cpu	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& top, const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom)
caffe::WangzhyLayer::Forward_cpu	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::WangzhyLayer::LayerSetUp	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::WangzhyLayer::Reshape	layers/wangzhy_layer.cpp	/^void WangzhyLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WangzhyLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::WindowDataLayer::DataLayerSetUp	layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WindowDataLayer	signature:(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
caffe::WindowDataLayer::PrefetchRand	layers/window_data_layer.cpp	/^unsigned int WindowDataLayer<Dtype>::PrefetchRand() {$/;"	f	class:caffe::WindowDataLayer	signature:()
caffe::WindowDataLayer::load_batch	layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::WindowDataLayer	signature:(Batch<Dtype>* batch)
caffe::WindowDataLayer::~WindowDataLayer	layers/window_data_layer.cpp	/^WindowDataLayer<Dtype>::~WindowDataLayer<Dtype>() {$/;"	f	class:caffe::WindowDataLayer	signature:()
caffe::WriteProtoToBinaryFile	util/io.cpp	/^void WriteProtoToBinaryFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe	signature:(const Message& proto, const char* filename)
caffe::WriteProtoToTextFile	util/io.cpp	/^void WriteProtoToTextFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe	signature:(const Message& proto, const char* filename)
caffe::XavierFillerTest	test/test_filler.cpp	/^class XavierFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:	inherits:::testing::Test
caffe::XavierFillerTest::XavierFillerTest	test/test_filler.cpp	/^  XavierFillerTest()$/;"	f	class:caffe::XavierFillerTest	access:protected	signature:()
caffe::XavierFillerTest::blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::XavierFillerTest	file:	access:protected
caffe::XavierFillerTest::filler_	test/test_filler.cpp	/^  shared_ptr<XavierFiller<Dtype> > filler_;$/;"	m	class:caffe::XavierFillerTest	file:	access:protected
caffe::XavierFillerTest::filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::XavierFillerTest	file:	access:protected
caffe::XavierFillerTest::test_params	test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::XavierFillerTest	access:protected	signature:(FillerParameter_VarianceNorm variance_norm, Dtype n)
caffe::XavierFillerTest::~XavierFillerTest	test/test_filler.cpp	/^  virtual ~XavierFillerTest() { delete blob_; }$/;"	f	class:caffe::XavierFillerTest	access:protected	signature:()
caffe::apply_buffers	parallel.cpp	/^static void apply_buffers(const vector<Blob<Dtype>*>& blobs,$/;"	f	namespace:caffe	signature:(const vector<Blob<Dtype>*>& blobs, Dtype* buffer, size_t total_size, Op op)
caffe::bodies_mutex_	data_reader.cpp	/^static boost::mutex bodies_mutex_;$/;"	m	namespace:caffe	file:
caffe::caffe_abs	util/math_functions.cpp	/^void caffe_abs<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe::caffe_abs	util/math_functions.cpp	/^void caffe_abs<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe::caffe_add	util/math_functions.cpp	/^void caffe_add<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe::caffe_add	util/math_functions.cpp	/^void caffe_add<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
caffe::caffe_add_scalar	util/math_functions.cpp	/^void caffe_add_scalar(const int N, const double alpha, double* Y) {$/;"	f	namespace:caffe	signature:(const int N, const double alpha, double* Y)
caffe::caffe_add_scalar	util/math_functions.cpp	/^void caffe_add_scalar(const int N, const float alpha, float* Y) {$/;"	f	namespace:caffe	signature:(const int N, const float alpha, float* Y)
caffe::caffe_axpy	util/math_functions.cpp	/^void caffe_axpy<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe	signature:(const int N, const double alpha, const double* X, double* Y)
caffe::caffe_axpy	util/math_functions.cpp	/^void caffe_axpy<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe	signature:(const int N, const float alpha, const float* X, float* Y)
caffe::caffe_conv	test/test_convolution_layer.cpp	/^template void caffe_conv(const Blob<double>* in,$/;"	p	namespace:caffe	file:	signature:(const Blob<double>* in, ConvolutionParameter* conv_param, const vector<shared_ptr<Blob<double> > >& weights, Blob<double>* out)
caffe::caffe_conv	test/test_convolution_layer.cpp	/^template void caffe_conv(const Blob<float>* in,$/;"	p	namespace:caffe	file:	signature:(const Blob<float>* in, ConvolutionParameter* conv_param, const vector<shared_ptr<Blob<float> > >& weights, Blob<float>* out)
caffe::caffe_conv	test/test_convolution_layer.cpp	/^void caffe_conv(const Blob<Dtype>* in, ConvolutionParameter* conv_param,$/;"	f	namespace:caffe	signature:(const Blob<Dtype>* in, ConvolutionParameter* conv_param, const vector<shared_ptr<Blob<Dtype> > >& weights, Blob<Dtype>* out)
caffe::caffe_copy	util/math_functions.cpp	/^template void caffe_copy<double>(const int N, const double* X, double* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const double* X, double* Y)
caffe::caffe_copy	util/math_functions.cpp	/^template void caffe_copy<float>(const int N, const float* X, float* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const float* X, float* Y)
caffe::caffe_copy	util/math_functions.cpp	/^template void caffe_copy<int>(const int N, const int* X, int* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const int* X, int* Y)
caffe::caffe_copy	util/math_functions.cpp	/^template void caffe_copy<unsigned int>(const int N, const unsigned int* X,$/;"	p	namespace:caffe	file:	signature:(const int N, const unsigned int* X, unsigned int* Y)
caffe::caffe_copy	util/math_functions.cpp	/^void caffe_copy(const int N, const Dtype* X, Dtype* Y) {$/;"	f	namespace:caffe	signature:(const int N, const Dtype* X, Dtype* Y)
caffe::caffe_cpu_asum	util/math_functions.cpp	/^double caffe_cpu_asum<double>(const int n, const double* x) {$/;"	f	namespace:caffe	signature:(const int n, const double* x)
caffe::caffe_cpu_asum	util/math_functions.cpp	/^float caffe_cpu_asum<float>(const int n, const float* x) {$/;"	f	namespace:caffe	signature:(const int n, const float* x)
caffe::caffe_cpu_axpby	util/math_functions.cpp	/^void caffe_cpu_axpby<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe	signature:(const int N, const double alpha, const double* X, const double beta, double* Y)
caffe::caffe_cpu_axpby	util/math_functions.cpp	/^void caffe_cpu_axpby<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe	signature:(const int N, const float alpha, const float* X, const float beta, float* Y)
caffe::caffe_cpu_dot	util/math_functions.cpp	/^Dtype caffe_cpu_dot(const int n, const Dtype* x, const Dtype* y) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype* x, const Dtype* y)
caffe::caffe_cpu_dot	util/math_functions.cpp	/^double caffe_cpu_dot<double>(const int n, const double* x, const double* y);$/;"	p	namespace:caffe	file:	signature:(const int n, const double* x, const double* y)
caffe::caffe_cpu_dot	util/math_functions.cpp	/^float caffe_cpu_dot<float>(const int n, const float* x, const float* y);$/;"	p	namespace:caffe	file:	signature:(const int n, const float* x, const float* y)
caffe::caffe_cpu_gemm	util/math_functions.cpp	/^void caffe_cpu_gemm<double>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const double alpha, const double* A, const double* B, const double beta, double* C)
caffe::caffe_cpu_gemm	util/math_functions.cpp	/^void caffe_cpu_gemm<float>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const float alpha, const float* A, const float* B, const float beta, float* C)
caffe::caffe_cpu_gemv	util/math_functions.cpp	/^void caffe_cpu_gemv<double>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const int M, const int N, const double alpha, const double* A, const double* x, const double beta, double* y)
caffe::caffe_cpu_gemv	util/math_functions.cpp	/^void caffe_cpu_gemv<float>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const int M, const int N, const float alpha, const float* A, const float* x, const float beta, float* y)
caffe::caffe_cpu_hamming_distance	util/math_functions.cpp	/^int caffe_cpu_hamming_distance<double>(const int n, const double* x,$/;"	f	namespace:caffe	signature:(const int n, const double* x, const double* y)
caffe::caffe_cpu_hamming_distance	util/math_functions.cpp	/^int caffe_cpu_hamming_distance<float>(const int n, const float* x,$/;"	f	namespace:caffe	signature:(const int n, const float* x, const float* y)
caffe::caffe_cpu_scale	util/math_functions.cpp	/^void caffe_cpu_scale<double>(const int n, const double alpha, const double *x,$/;"	f	namespace:caffe	signature:(const int n, const double alpha, const double *x, double* y)
caffe::caffe_cpu_scale	util/math_functions.cpp	/^void caffe_cpu_scale<float>(const int n, const float alpha, const float *x,$/;"	f	namespace:caffe	signature:(const int n, const float alpha, const float *x, float* y)
caffe::caffe_cpu_strided_dot	util/math_functions.cpp	/^double caffe_cpu_strided_dot<double>(const int n, const double* x,$/;"	f	namespace:caffe	signature:(const int n, const double* x, const int incx, const double* y, const int incy)
caffe::caffe_cpu_strided_dot	util/math_functions.cpp	/^float caffe_cpu_strided_dot<float>(const int n, const float* x, const int incx,$/;"	f	namespace:caffe	signature:(const int n, const float* x, const int incx, const float* y, const int incy)
caffe::caffe_div	util/math_functions.cpp	/^void caffe_div<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe::caffe_div	util/math_functions.cpp	/^void caffe_div<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
caffe::caffe_exp	util/math_functions.cpp	/^void caffe_exp<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe::caffe_exp	util/math_functions.cpp	/^void caffe_exp<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe::caffe_local_conv	test/test_local_conv_layer.cpp	/^caffe_local_conv(const Blob<double>* in, LocalConvParameter* local_conv_param,$/;"	p	namespace:caffe	file:	signature:(const Blob<double>* in, LocalConvParameter* local_conv_param, const vector<shared_ptr<Blob<double> > >& weights, Blob<double>* out)
caffe::caffe_local_conv	test/test_local_conv_layer.cpp	/^caffe_local_conv(const Blob<float>* in, LocalConvParameter* local_conv_param,$/;"	p	namespace:caffe	file:	signature:(const Blob<float>* in, LocalConvParameter* local_conv_param, const vector<shared_ptr<Blob<float> > >& weights, Blob<float>* out)
caffe::caffe_local_conv	test/test_local_conv_layer.cpp	/^void caffe_local_conv(const Blob<Dtype>* in, LocalConvParameter* local_conv_param,$/;"	f	namespace:caffe	signature:(const Blob<Dtype>* in, LocalConvParameter* local_conv_param, const vector<shared_ptr<Blob<Dtype> > >& weights, Blob< Dtype>* out)
caffe::caffe_log	util/math_functions.cpp	/^void caffe_log<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe::caffe_log	util/math_functions.cpp	/^void caffe_log<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe::caffe_mul	util/math_functions.cpp	/^void caffe_mul<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe::caffe_mul	util/math_functions.cpp	/^void caffe_mul<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
caffe::caffe_nextafter	util/math_functions.cpp	/^Dtype caffe_nextafter(const Dtype b) {$/;"	f	namespace:caffe	signature:(const Dtype b)
caffe::caffe_nextafter	util/math_functions.cpp	/^double caffe_nextafter(const double b);$/;"	p	namespace:caffe	file:	signature:(const double b)
caffe::caffe_nextafter	util/math_functions.cpp	/^float caffe_nextafter(const float b);$/;"	p	namespace:caffe	file:	signature:(const float b)
caffe::caffe_powx	util/math_functions.cpp	/^void caffe_powx<double>(const int n, const double* a, const double b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double b, double* y)
caffe::caffe_powx	util/math_functions.cpp	/^void caffe_powx<float>(const int n, const float* a, const float b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float b, float* y)
caffe::caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, int* r) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype p, int* r)
caffe::caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, unsigned int* r) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype p, unsigned int* r)
caffe::caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<double>(const int n, const double p, int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const double p, int* r)
caffe::caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<double>(const int n, const double p, unsigned int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const double p, unsigned int* r)
caffe::caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<float>(const int n, const float p, int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const float p, int* r)
caffe::caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<float>(const int n, const float p, unsigned int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const float p, unsigned int* r)
caffe::caffe_rng_gaussian	util/math_functions.cpp	/^void caffe_rng_gaussian(const int n, const Dtype a,$/;"	f	namespace:caffe	signature:(const int n, const Dtype a, const Dtype sigma, Dtype* r)
caffe::caffe_rng_gaussian	util/math_functions.cpp	/^void caffe_rng_gaussian<double>(const int n, const double mu,$/;"	p	namespace:caffe	file:	signature:(const int n, const double mu, const double sigma, double* r)
caffe::caffe_rng_gaussian	util/math_functions.cpp	/^void caffe_rng_gaussian<float>(const int n, const float mu,$/;"	p	namespace:caffe	file:	signature:(const int n, const float mu, const float sigma, float* r)
caffe::caffe_rng_rand	util/math_functions.cpp	/^unsigned int caffe_rng_rand() {$/;"	f	namespace:caffe	signature:()
caffe::caffe_rng_uniform	util/math_functions.cpp	/^void caffe_rng_uniform(const int n, const Dtype a, const Dtype b, Dtype* r) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype a, const Dtype b, Dtype* r)
caffe::caffe_rng_uniform	util/math_functions.cpp	/^void caffe_rng_uniform<double>(const int n, const double a, const double b,$/;"	p	namespace:caffe	file:	signature:(const int n, const double a, const double b, double* r)
caffe::caffe_rng_uniform	util/math_functions.cpp	/^void caffe_rng_uniform<float>(const int n, const float a, const float b,$/;"	p	namespace:caffe	file:	signature:(const int n, const float a, const float b, float* r)
caffe::caffe_scal	util/math_functions.cpp	/^void caffe_scal<double>(const int N, const double alpha, double *X) {$/;"	f	namespace:caffe	signature:(const int N, const double alpha, double *X)
caffe::caffe_scal	util/math_functions.cpp	/^void caffe_scal<float>(const int N, const float alpha, float *X) {$/;"	f	namespace:caffe	signature:(const int N, const float alpha, float *X)
caffe::caffe_set	util/math_functions.cpp	/^template void caffe_set<double>(const int N, const double alpha, double* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const double alpha, double* Y)
caffe::caffe_set	util/math_functions.cpp	/^template void caffe_set<float>(const int N, const float alpha, float* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const float alpha, float* Y)
caffe::caffe_set	util/math_functions.cpp	/^template void caffe_set<int>(const int N, const int alpha, int* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const int alpha, int* Y)
caffe::caffe_set	util/math_functions.cpp	/^void caffe_set(const int N, const Dtype alpha, Dtype* Y) {$/;"	f	namespace:caffe	signature:(const int N, const Dtype alpha, Dtype* Y)
caffe::caffe_sqr	util/math_functions.cpp	/^void caffe_sqr<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe::caffe_sqr	util/math_functions.cpp	/^void caffe_sqr<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe::caffe_sub	util/math_functions.cpp	/^void caffe_sub<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe::caffe_sub	util/math_functions.cpp	/^void caffe_sub<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
caffe::cluster_seedgen	common.cpp	/^int64_t cluster_seedgen(void) {$/;"	f	namespace:caffe	signature:(void)
caffe::col2im_cpu	util/im2col.cpp	/^template void col2im_cpu<double>(const double* data_col, const int channels,$/;"	p	namespace:caffe	file:	signature:(const double* data_col, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, double* data_im)
caffe::col2im_cpu	util/im2col.cpp	/^template void col2im_cpu<float>(const float* data_col, const int channels,$/;"	p	namespace:caffe	file:	signature:(const float* data_col, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, float* data_im)
caffe::col2im_cpu	util/im2col.cpp	/^void col2im_cpu(const Dtype* data_col, const int channels,$/;"	f	namespace:caffe	signature:(const Dtype* data_col, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, Dtype* data_im)
caffe::col2im_nd_cpu	util/im2col.cpp	/^template void col2im_nd_cpu<double>(const double* data_col,$/;"	p	namespace:caffe	file:	signature:(const double* data_col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, double* data_im)
caffe::col2im_nd_cpu	util/im2col.cpp	/^template void col2im_nd_cpu<float>(const float* data_col,$/;"	p	namespace:caffe	file:	signature:(const float* data_col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, float* data_im)
caffe::col2im_nd_cpu	util/im2col.cpp	/^void col2im_nd_cpu(const Dtype* data_col, const int num_spatial_axes,$/;"	f	namespace:caffe	signature:(const Dtype* data_col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, Dtype* data_im)
caffe::copy	parallel.cpp	/^  copy,$/;"	e	enum:caffe::Op	file:
caffe::cublasGetErrorString	common.cpp	/^const char* cublasGetErrorString(cublasStatus_t error) {$/;"	f	namespace:caffe	signature:(cublasStatus_t error)
caffe::cudnn	util/cudnn.cpp	/^namespace cudnn {$/;"	n	namespace:caffe	file:
caffe::cudnn::dataType::one	util/cudnn.cpp	/^const void* dataType<double>::one =$/;"	m	class:caffe::cudnn::dataType	file:
caffe::cudnn::dataType::one	util/cudnn.cpp	/^const void* dataType<float>::one =$/;"	m	class:caffe::cudnn::dataType	file:
caffe::cudnn::dataType::oneval	util/cudnn.cpp	/^double dataType<double>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
caffe::cudnn::dataType::oneval	util/cudnn.cpp	/^float dataType<float>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
caffe::cudnn::dataType::zero	util/cudnn.cpp	/^const void* dataType<double>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
caffe::cudnn::dataType::zero	util/cudnn.cpp	/^const void* dataType<float>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
caffe::cudnn::dataType::zeroval	util/cudnn.cpp	/^double dataType<double>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
caffe::cudnn::dataType::zeroval	util/cudnn.cpp	/^float dataType<float>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
caffe::curandGetErrorString	common.cpp	/^const char* curandGetErrorString(curandStatus_t error) {$/;"	f	namespace:caffe	signature:(curandStatus_t error)
caffe::db	util/db.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
caffe::db	util/db_leveldb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
caffe::db	util/db_lmdb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
caffe::db::GetDB	util/db.cpp	/^DB* GetDB(DataParameter::DB backend) {$/;"	f	namespace:caffe::db	signature:(DataParameter::DB backend)
caffe::db::GetDB	util/db.cpp	/^DB* GetDB(const string& backend) {$/;"	f	namespace:caffe::db	signature:(const string& backend)
caffe::db::LMDB::NewCursor	util/db_lmdb.cpp	/^LMDBCursor* LMDB::NewCursor() {$/;"	f	class:caffe::db::LMDB	signature:()
caffe::db::LMDB::NewTransaction	util/db_lmdb.cpp	/^LMDBTransaction* LMDB::NewTransaction() {$/;"	f	class:caffe::db::LMDB	signature:()
caffe::db::LMDB::Open	util/db_lmdb.cpp	/^void LMDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LMDB	signature:(const string& source, Mode mode)
caffe::db::LMDBTransaction::Put	util/db_lmdb.cpp	/^void LMDBTransaction::Put(const string& key, const string& value) {$/;"	f	class:caffe::db::LMDBTransaction	signature:(const string& key, const string& value)
caffe::db::LMDB_MAP_SIZE	util/db_lmdb.cpp	/^const size_t LMDB_MAP_SIZE = 1099511627776;  \/\/ 1 TB$/;"	m	namespace:caffe::db	file:
caffe::db::LevelDB::Open	util/db_leveldb.cpp	/^void LevelDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LevelDB	signature:(const string& source, Mode mode)
caffe::hdf5_get_name_by_idx	util/hdf5.cpp	/^string hdf5_get_name_by_idx(hid_t loc_id, int idx) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, int idx)
caffe::hdf5_get_num_links	util/hdf5.cpp	/^int hdf5_get_num_links(hid_t loc_id) {$/;"	f	namespace:caffe	signature:(hid_t loc_id)
caffe::hdf5_load_int	util/hdf5.cpp	/^int hdf5_load_int(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name)
caffe::hdf5_load_nd_dataset	util/hdf5.cpp	/^void hdf5_load_nd_dataset<double>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe	signature:(hid_t file_id, const char* dataset_name_, int min_dim, int max_dim, Blob<double>* blob)
caffe::hdf5_load_nd_dataset	util/hdf5.cpp	/^void hdf5_load_nd_dataset<float>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe	signature:(hid_t file_id, const char* dataset_name_, int min_dim, int max_dim, Blob<float>* blob)
caffe::hdf5_load_nd_dataset_helper	util/hdf5.cpp	/^void hdf5_load_nd_dataset_helper($/;"	f	namespace:caffe	signature:( hid_t file_id, const char* dataset_name_, int min_dim, int max_dim, Blob<Dtype>* blob)
caffe::hdf5_load_string	util/hdf5.cpp	/^string hdf5_load_string(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name)
caffe::hdf5_save_int	util/hdf5.cpp	/^void hdf5_save_int(hid_t loc_id, const string& dataset_name, int i) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name, int i)
caffe::hdf5_save_nd_dataset	util/hdf5.cpp	/^void hdf5_save_nd_dataset<double>($/;"	f	namespace:caffe	signature:( hid_t file_id, const string& dataset_name, const Blob<double>& blob, bool write_diff)
caffe::hdf5_save_nd_dataset	util/hdf5.cpp	/^void hdf5_save_nd_dataset<float>($/;"	f	namespace:caffe	signature:( const hid_t file_id, const string& dataset_name, const Blob<float>& blob, bool write_diff)
caffe::hdf5_save_string	util/hdf5.cpp	/^void hdf5_save_string(hid_t loc_id, const string& dataset_name,$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name, const string& s)
caffe::im2col_cpu	util/im2col.cpp	/^template void im2col_cpu<double>(const double* data_im, const int channels,$/;"	p	namespace:caffe	file:	signature:(const double* data_im, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, double* data_col)
caffe::im2col_cpu	util/im2col.cpp	/^template void im2col_cpu<float>(const float* data_im, const int channels,$/;"	p	namespace:caffe	file:	signature:(const float* data_im, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, float* data_col)
caffe::im2col_cpu	util/im2col.cpp	/^void im2col_cpu(const Dtype* data_im, const int channels,$/;"	f	namespace:caffe	signature:(const Dtype* data_im, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, Dtype* data_col)
caffe::im2col_nd_core_cpu	util/im2col.cpp	/^inline void im2col_nd_core_cpu(const Dtype* data_input, const bool im2col,$/;"	f	namespace:caffe	signature:(const Dtype* data_input, const bool im2col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, Dtype* data_output)
caffe::im2col_nd_cpu	util/im2col.cpp	/^template void im2col_nd_cpu<double>(const double* data_im,$/;"	p	namespace:caffe	file:	signature:(const double* data_im, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, double* data_col)
caffe::im2col_nd_cpu	util/im2col.cpp	/^template void im2col_nd_cpu<float>(const float* data_im,$/;"	p	namespace:caffe	file:	signature:(const float* data_im, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, float* data_col)
caffe::im2col_nd_cpu	util/im2col.cpp	/^void im2col_nd_cpu(const Dtype* data_im, const int num_spatial_axes,$/;"	f	namespace:caffe	signature:(const Dtype* data_im, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, Dtype* data_col)
caffe::kBNLL_THRESHOLD	layers/bnll_layer.cpp	/^const float kBNLL_THRESHOLD = 50.;$/;"	m	namespace:caffe	file:
caffe::kMillisecondsThreshold	test/test_benchmark.cpp	/^const float kMillisecondsThreshold = 30;$/;"	m	namespace:caffe	file:
caffe::matchExt	util/io.cpp	/^static bool matchExt(const std::string & fn,$/;"	f	namespace:caffe	signature:(const std::string & fn, std::string en)
caffe::replace_cpu	parallel.cpp	/^  replace_cpu,$/;"	e	enum:caffe::Op	file:
caffe::replace_cpu_diff	parallel.cpp	/^  replace_cpu_diff,$/;"	e	enum:caffe::Op	file:
caffe::replace_gpu	parallel.cpp	/^  replace_gpu,$/;"	e	enum:caffe::Op	file:
caffe::replace_gpu_diff	parallel.cpp	/^  replace_gpu_diff$/;"	e	enum:caffe::Op	file:
caffe::sigmoid	layers/sigmoid_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe	signature:(Dtype x)
caffe::tanh_naive	test/test_tanh_layer.cpp	/^double tanh_naive(double x) {$/;"	f	namespace:caffe	signature:(double x)
caffe::thread_instance_	common.cpp	/^static boost::thread_specific_ptr<Caffe> thread_instance_;$/;"	m	namespace:caffe	file:
caffe::total_size	parallel.cpp	/^static size_t total_size(const vector<Blob<Dtype>*>& params) {$/;"	f	namespace:caffe	signature:(const vector<Blob<Dtype>*>& params)
caffe_abs	util/math_functions.cpp	/^void caffe_abs<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe_abs	util/math_functions.cpp	/^void caffe_abs<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe_add	util/math_functions.cpp	/^void caffe_add<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe_add	util/math_functions.cpp	/^void caffe_add<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
caffe_add_scalar	util/math_functions.cpp	/^void caffe_add_scalar(const int N, const double alpha, double* Y) {$/;"	f	namespace:caffe	signature:(const int N, const double alpha, double* Y)
caffe_add_scalar	util/math_functions.cpp	/^void caffe_add_scalar(const int N, const float alpha, float* Y) {$/;"	f	namespace:caffe	signature:(const int N, const float alpha, float* Y)
caffe_axpy	util/math_functions.cpp	/^void caffe_axpy<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe	signature:(const int N, const double alpha, const double* X, double* Y)
caffe_axpy	util/math_functions.cpp	/^void caffe_axpy<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe	signature:(const int N, const float alpha, const float* X, float* Y)
caffe_conv	test/test_convolution_layer.cpp	/^template void caffe_conv(const Blob<double>* in,$/;"	p	namespace:caffe	file:	signature:(const Blob<double>* in, ConvolutionParameter* conv_param, const vector<shared_ptr<Blob<double> > >& weights, Blob<double>* out)
caffe_conv	test/test_convolution_layer.cpp	/^template void caffe_conv(const Blob<float>* in,$/;"	p	namespace:caffe	file:	signature:(const Blob<float>* in, ConvolutionParameter* conv_param, const vector<shared_ptr<Blob<float> > >& weights, Blob<float>* out)
caffe_conv	test/test_convolution_layer.cpp	/^void caffe_conv(const Blob<Dtype>* in, ConvolutionParameter* conv_param,$/;"	f	namespace:caffe	signature:(const Blob<Dtype>* in, ConvolutionParameter* conv_param, const vector<shared_ptr<Blob<Dtype> > >& weights, Blob<Dtype>* out)
caffe_copy	util/math_functions.cpp	/^template void caffe_copy<double>(const int N, const double* X, double* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const double* X, double* Y)
caffe_copy	util/math_functions.cpp	/^template void caffe_copy<float>(const int N, const float* X, float* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const float* X, float* Y)
caffe_copy	util/math_functions.cpp	/^template void caffe_copy<int>(const int N, const int* X, int* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const int* X, int* Y)
caffe_copy	util/math_functions.cpp	/^template void caffe_copy<unsigned int>(const int N, const unsigned int* X,$/;"	p	namespace:caffe	file:	signature:(const int N, const unsigned int* X, unsigned int* Y)
caffe_copy	util/math_functions.cpp	/^void caffe_copy(const int N, const Dtype* X, Dtype* Y) {$/;"	f	namespace:caffe	signature:(const int N, const Dtype* X, Dtype* Y)
caffe_cpu_asum	util/math_functions.cpp	/^double caffe_cpu_asum<double>(const int n, const double* x) {$/;"	f	namespace:caffe	signature:(const int n, const double* x)
caffe_cpu_asum	util/math_functions.cpp	/^float caffe_cpu_asum<float>(const int n, const float* x) {$/;"	f	namespace:caffe	signature:(const int n, const float* x)
caffe_cpu_axpby	util/math_functions.cpp	/^void caffe_cpu_axpby<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe	signature:(const int N, const double alpha, const double* X, const double beta, double* Y)
caffe_cpu_axpby	util/math_functions.cpp	/^void caffe_cpu_axpby<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe	signature:(const int N, const float alpha, const float* X, const float beta, float* Y)
caffe_cpu_dot	util/math_functions.cpp	/^Dtype caffe_cpu_dot(const int n, const Dtype* x, const Dtype* y) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype* x, const Dtype* y)
caffe_cpu_dot	util/math_functions.cpp	/^double caffe_cpu_dot<double>(const int n, const double* x, const double* y);$/;"	p	namespace:caffe	file:	signature:(const int n, const double* x, const double* y)
caffe_cpu_dot	util/math_functions.cpp	/^float caffe_cpu_dot<float>(const int n, const float* x, const float* y);$/;"	p	namespace:caffe	file:	signature:(const int n, const float* x, const float* y)
caffe_cpu_gemm	util/math_functions.cpp	/^void caffe_cpu_gemm<double>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const double alpha, const double* A, const double* B, const double beta, double* C)
caffe_cpu_gemm	util/math_functions.cpp	/^void caffe_cpu_gemm<float>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K, const float alpha, const float* A, const float* B, const float beta, float* C)
caffe_cpu_gemv	util/math_functions.cpp	/^void caffe_cpu_gemv<double>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const int M, const int N, const double alpha, const double* A, const double* x, const double beta, double* y)
caffe_cpu_gemv	util/math_functions.cpp	/^void caffe_cpu_gemv<float>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe	signature:(const CBLAS_TRANSPOSE TransA, const int M, const int N, const float alpha, const float* A, const float* x, const float beta, float* y)
caffe_cpu_hamming_distance	util/math_functions.cpp	/^int caffe_cpu_hamming_distance<double>(const int n, const double* x,$/;"	f	namespace:caffe	signature:(const int n, const double* x, const double* y)
caffe_cpu_hamming_distance	util/math_functions.cpp	/^int caffe_cpu_hamming_distance<float>(const int n, const float* x,$/;"	f	namespace:caffe	signature:(const int n, const float* x, const float* y)
caffe_cpu_scale	util/math_functions.cpp	/^void caffe_cpu_scale<double>(const int n, const double alpha, const double *x,$/;"	f	namespace:caffe	signature:(const int n, const double alpha, const double *x, double* y)
caffe_cpu_scale	util/math_functions.cpp	/^void caffe_cpu_scale<float>(const int n, const float alpha, const float *x,$/;"	f	namespace:caffe	signature:(const int n, const float alpha, const float *x, float* y)
caffe_cpu_strided_dot	util/math_functions.cpp	/^double caffe_cpu_strided_dot<double>(const int n, const double* x,$/;"	f	namespace:caffe	signature:(const int n, const double* x, const int incx, const double* y, const int incy)
caffe_cpu_strided_dot	util/math_functions.cpp	/^float caffe_cpu_strided_dot<float>(const int n, const float* x, const int incx,$/;"	f	namespace:caffe	signature:(const int n, const float* x, const int incx, const float* y, const int incy)
caffe_div	util/math_functions.cpp	/^void caffe_div<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe_div	util/math_functions.cpp	/^void caffe_div<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
caffe_exp	util/math_functions.cpp	/^void caffe_exp<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe_exp	util/math_functions.cpp	/^void caffe_exp<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe_local_conv	test/test_local_conv_layer.cpp	/^caffe_local_conv(const Blob<double>* in, LocalConvParameter* local_conv_param,$/;"	p	namespace:caffe	file:	signature:(const Blob<double>* in, LocalConvParameter* local_conv_param, const vector<shared_ptr<Blob<double> > >& weights, Blob<double>* out)
caffe_local_conv	test/test_local_conv_layer.cpp	/^caffe_local_conv(const Blob<float>* in, LocalConvParameter* local_conv_param,$/;"	p	namespace:caffe	file:	signature:(const Blob<float>* in, LocalConvParameter* local_conv_param, const vector<shared_ptr<Blob<float> > >& weights, Blob<float>* out)
caffe_local_conv	test/test_local_conv_layer.cpp	/^void caffe_local_conv(const Blob<Dtype>* in, LocalConvParameter* local_conv_param,$/;"	f	namespace:caffe	signature:(const Blob<Dtype>* in, LocalConvParameter* local_conv_param, const vector<shared_ptr<Blob<Dtype> > >& weights, Blob< Dtype>* out)
caffe_log	util/math_functions.cpp	/^void caffe_log<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe_log	util/math_functions.cpp	/^void caffe_log<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe_mul	util/math_functions.cpp	/^void caffe_mul<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe_mul	util/math_functions.cpp	/^void caffe_mul<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
caffe_nextafter	util/math_functions.cpp	/^Dtype caffe_nextafter(const Dtype b) {$/;"	f	namespace:caffe	signature:(const Dtype b)
caffe_nextafter	util/math_functions.cpp	/^double caffe_nextafter(const double b);$/;"	p	namespace:caffe	file:	signature:(const double b)
caffe_nextafter	util/math_functions.cpp	/^float caffe_nextafter(const float b);$/;"	p	namespace:caffe	file:	signature:(const float b)
caffe_powx	util/math_functions.cpp	/^void caffe_powx<double>(const int n, const double* a, const double b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double b, double* y)
caffe_powx	util/math_functions.cpp	/^void caffe_powx<float>(const int n, const float* a, const float b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float b, float* y)
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, int* r) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype p, int* r)
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, unsigned int* r) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype p, unsigned int* r)
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<double>(const int n, const double p, int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const double p, int* r)
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<double>(const int n, const double p, unsigned int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const double p, unsigned int* r)
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<float>(const int n, const float p, int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const float p, int* r)
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli<float>(const int n, const float p, unsigned int* r);$/;"	p	namespace:caffe	file:	signature:(const int n, const float p, unsigned int* r)
caffe_rng_gaussian	util/math_functions.cpp	/^void caffe_rng_gaussian(const int n, const Dtype a,$/;"	f	namespace:caffe	signature:(const int n, const Dtype a, const Dtype sigma, Dtype* r)
caffe_rng_gaussian	util/math_functions.cpp	/^void caffe_rng_gaussian<double>(const int n, const double mu,$/;"	p	namespace:caffe	file:	signature:(const int n, const double mu, const double sigma, double* r)
caffe_rng_gaussian	util/math_functions.cpp	/^void caffe_rng_gaussian<float>(const int n, const float mu,$/;"	p	namespace:caffe	file:	signature:(const int n, const float mu, const float sigma, float* r)
caffe_rng_rand	util/math_functions.cpp	/^unsigned int caffe_rng_rand() {$/;"	f	namespace:caffe	signature:()
caffe_rng_uniform	util/math_functions.cpp	/^void caffe_rng_uniform(const int n, const Dtype a, const Dtype b, Dtype* r) {$/;"	f	namespace:caffe	signature:(const int n, const Dtype a, const Dtype b, Dtype* r)
caffe_rng_uniform	util/math_functions.cpp	/^void caffe_rng_uniform<double>(const int n, const double a, const double b,$/;"	p	namespace:caffe	file:	signature:(const int n, const double a, const double b, double* r)
caffe_rng_uniform	util/math_functions.cpp	/^void caffe_rng_uniform<float>(const int n, const float a, const float b,$/;"	p	namespace:caffe	file:	signature:(const int n, const float a, const float b, float* r)
caffe_scal	util/math_functions.cpp	/^void caffe_scal<double>(const int N, const double alpha, double *X) {$/;"	f	namespace:caffe	signature:(const int N, const double alpha, double *X)
caffe_scal	util/math_functions.cpp	/^void caffe_scal<float>(const int N, const float alpha, float *X) {$/;"	f	namespace:caffe	signature:(const int N, const float alpha, float *X)
caffe_set	util/math_functions.cpp	/^template void caffe_set<double>(const int N, const double alpha, double* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const double alpha, double* Y)
caffe_set	util/math_functions.cpp	/^template void caffe_set<float>(const int N, const float alpha, float* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const float alpha, float* Y)
caffe_set	util/math_functions.cpp	/^template void caffe_set<int>(const int N, const int alpha, int* Y);$/;"	p	namespace:caffe	file:	signature:(const int N, const int alpha, int* Y)
caffe_set	util/math_functions.cpp	/^void caffe_set(const int N, const Dtype alpha, Dtype* Y) {$/;"	f	namespace:caffe	signature:(const int N, const Dtype alpha, Dtype* Y)
caffe_sqr	util/math_functions.cpp	/^void caffe_sqr<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe	signature:(const int n, const double* a, double* y)
caffe_sqr	util/math_functions.cpp	/^void caffe_sqr<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe	signature:(const int n, const float* a, float* y)
caffe_sub	util/math_functions.cpp	/^void caffe_sub<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe	signature:(const int n, const double* a, const double* b, double* y)
caffe_sub	util/math_functions.cpp	/^void caffe_sub<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe	signature:(const int n, const float* a, const float* b, float* y)
channels_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
channels_	test/test_hdf5_output_layer.cpp	/^  int channels_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
channels_	test/test_memory_data_layer.cpp	/^  int channels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
check_batch_reindex	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::check_batch_reindex(int initial_num,$/;"	f	class:caffe::BatchReindexLayer	signature:(int initial_num, int final_num, const Dtype* ridx_data)
cluster_seedgen	common.cpp	/^int64_t cluster_seedgen(void) {$/;"	f	namespace:caffe	signature:(void)
col2im_cpu	util/im2col.cpp	/^template void col2im_cpu<double>(const double* data_col, const int channels,$/;"	p	namespace:caffe	file:	signature:(const double* data_col, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, double* data_im)
col2im_cpu	util/im2col.cpp	/^template void col2im_cpu<float>(const float* data_col, const int channels,$/;"	p	namespace:caffe	file:	signature:(const float* data_col, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, float* data_im)
col2im_cpu	util/im2col.cpp	/^void col2im_cpu(const Dtype* data_col, const int channels,$/;"	f	namespace:caffe	signature:(const Dtype* data_col, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, Dtype* data_im)
col2im_nd_cpu	util/im2col.cpp	/^template void col2im_nd_cpu<double>(const double* data_col,$/;"	p	namespace:caffe	file:	signature:(const double* data_col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, double* data_im)
col2im_nd_cpu	util/im2col.cpp	/^template void col2im_nd_cpu<float>(const float* data_col,$/;"	p	namespace:caffe	file:	signature:(const float* data_col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, float* data_im)
col2im_nd_cpu	util/im2col.cpp	/^void col2im_nd_cpu(const Dtype* data_col, const int num_spatial_axes,$/;"	f	namespace:caffe	signature:(const Dtype* data_col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, Dtype* data_im)
compute	parallel.cpp	/^void DevicePair::compute(const vector<int> devices, vector<DevicePair>* pairs) {$/;"	f	class:caffe::DevicePair	signature:(const vector<int> devices, vector<DevicePair>* pairs)
compute_output_shape	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::ConvolutionLayer	signature:()
compute_output_shape	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::DeconvolutionLayer	signature:()
condition_	util/blocking_queue.cpp	/^  boost::condition_variable condition_;$/;"	m	class:caffe::BlockingQueue::sync	file:	access:public
configure	parallel.cpp	/^void GPUParams<Dtype>::configure(Solver<Dtype>* solver) const {$/;"	f	class:caffe::GPUParams	signature:(Solver<Dtype>* solver) const
copy	parallel.cpp	/^  copy,$/;"	e	enum:caffe::Op	file:
cpu_data	blob.cpp	/^const Dtype* Blob<Dtype>::cpu_data() const {$/;"	f	class:caffe::Blob	signature:() const
cpu_data	syncedmem.cpp	/^const void* SyncedMemory::cpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
cpu_diff	blob.cpp	/^const Dtype* Blob<Dtype>::cpu_diff() const {$/;"	f	class:caffe::Blob	signature:() const
cublasGetErrorString	common.cpp	/^const char* cublasGetErrorString(cublasStatus_t error) {$/;"	f	namespace:caffe	signature:(cublasStatus_t error)
cudnn	util/cudnn.cpp	/^namespace cudnn {$/;"	n	namespace:caffe	file:
curandGetErrorString	common.cpp	/^const char* curandGetErrorString(curandStatus_t error) {$/;"	f	namespace:caffe	signature:(curandStatus_t error)
data	test/test_data/generate_sample_data.py	/^data = data.astype('float32')$/;"	v
data	test/test_data/generate_sample_data.py	/^data = data.reshape(num_rows, num_cols, height, width)$/;"	v
data	test/test_data/generate_sample_data.py	/^data = np.arange(total_size)$/;"	v
data	test/test_data/generate_sample_data.py	/^data = np.random.randn(num_rows, num_cols, height, width)$/;"	v
data_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
data_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
data_2_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
data_blob_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
db	util/db.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
db	util/db_leveldb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
db	util/db_lmdb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
delta_	test/test_gradient_based_solver.cpp	/^  Dtype delta_;  \/\/ Stability constant for RMSProp, AdaGrad, AdaDelta and Adam$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
dtype	test/test_data/generate_sample_data.py	/^        dtype='uint8',$/;"	v
entry	internal_thread.cpp	/^void InternalThread::entry(int device, Caffe::Brew mode, int rand_seed,$/;"	f	class:caffe::InternalThread	signature:(int device, Caffe::Brew mode, int rand_seed, int solver_count, bool root_solver)
epsilon_	test/test_blob.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::BlobMathTest	file:	access:protected
epsilon_	test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:	access:protected
epsilon_	test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::LRNLayerTest	file:	access:protected
filename	test/test_hdf5data_layer.cpp	/^  string* filename;$/;"	m	class:caffe::HDF5DataLayerTest	file:	access:protected
filename_	test/test_data_layer.cpp	/^  shared_ptr<string> filename_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
filename_	test/test_image_data_layer.cpp	/^  string filename_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
filename_reshape_	test/test_image_data_layer.cpp	/^  string filename_reshape_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
filler_	test/test_filler.cpp	/^  shared_ptr<ConstantFiller<Dtype> > filler_;$/;"	m	class:caffe::ConstantFillerTest	file:	access:protected
filler_	test/test_filler.cpp	/^  shared_ptr<GaussianFiller<Dtype> > filler_;$/;"	m	class:caffe::GaussianFillerTest	file:	access:protected
filler_	test/test_filler.cpp	/^  shared_ptr<MSRAFiller<Dtype> > filler_;$/;"	m	class:caffe::MSRAFillerTest	file:	access:protected
filler_	test/test_filler.cpp	/^  shared_ptr<PositiveUnitballFiller<Dtype> > filler_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:	access:protected
filler_	test/test_filler.cpp	/^  shared_ptr<UniformFiller<Dtype> > filler_;$/;"	m	class:caffe::UniformFillerTest	file:	access:protected
filler_	test/test_filler.cpp	/^  shared_ptr<XavierFiller<Dtype> > filler_;$/;"	m	class:caffe::XavierFillerTest	file:	access:protected
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::ConstantFillerTest	file:	access:protected
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::GaussianFillerTest	file:	access:protected
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::MSRAFillerTest	file:	access:protected
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:	access:protected
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::UniformFillerTest	file:	access:protected
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::XavierFillerTest	file:	access:protected
forward_cpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
forward_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
forward_gpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(Dtype* output, const Dtype* bias)
forward_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* weights, Dtype* output, bool skip_im2col)
generator	common.cpp	/^void* Caffe::RNG::generator() {$/;"	f	class:caffe::Caffe::RNG	signature:()
get_normalizer	layers/softmax_loss_layer.cpp	/^Dtype SoftmaxWithLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::SoftmaxWithLossLayer	signature:( LossParameter_NormalizationMode normalization_mode, int valid_count)
got_sighup	util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sighup = false;$/;"	m	namespace:__anon1	file:
got_sigint	util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sigint = false;$/;"	m	namespace:__anon1	file:
gpu_data	blob.cpp	/^const Dtype* Blob<Dtype>::gpu_data() const {$/;"	f	class:caffe::Blob	signature:() const
gpu_data	syncedmem.cpp	/^const void* SyncedMemory::gpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
gpu_diff	blob.cpp	/^const Dtype* Blob<Dtype>::gpu_diff() const {$/;"	f	class:caffe::Blob	signature:() const
gpu_shape	blob.cpp	/^const int* Blob<Dtype>::gpu_shape() const {$/;"	f	class:caffe::Blob	signature:() const
handle_signal	util/signal_handler.cpp	/^  void handle_signal(int signal) {$/;"	f	namespace:__anon1	signature:(int signal)
has_blob	net.cpp	/^bool Net<Dtype>::has_blob(const string& blob_name) const {$/;"	f	class:caffe::Net	signature:(const string& blob_name) const
has_layer	net.cpp	/^bool Net<Dtype>::has_layer(const string& layer_name) const {$/;"	f	class:caffe::Net	signature:(const string& layer_name) const
hdf5_get_name_by_idx	util/hdf5.cpp	/^string hdf5_get_name_by_idx(hid_t loc_id, int idx) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, int idx)
hdf5_get_num_links	util/hdf5.cpp	/^int hdf5_get_num_links(hid_t loc_id) {$/;"	f	namespace:caffe	signature:(hid_t loc_id)
hdf5_load_int	util/hdf5.cpp	/^int hdf5_load_int(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name)
hdf5_load_nd_dataset	util/hdf5.cpp	/^void hdf5_load_nd_dataset<double>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe	signature:(hid_t file_id, const char* dataset_name_, int min_dim, int max_dim, Blob<double>* blob)
hdf5_load_nd_dataset	util/hdf5.cpp	/^void hdf5_load_nd_dataset<float>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe	signature:(hid_t file_id, const char* dataset_name_, int min_dim, int max_dim, Blob<float>* blob)
hdf5_load_nd_dataset_helper	util/hdf5.cpp	/^void hdf5_load_nd_dataset_helper($/;"	f	namespace:caffe	signature:( hid_t file_id, const char* dataset_name_, int min_dim, int max_dim, Blob<Dtype>* blob)
hdf5_load_string	util/hdf5.cpp	/^string hdf5_load_string(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name)
hdf5_save_int	util/hdf5.cpp	/^void hdf5_save_int(hid_t loc_id, const string& dataset_name, int i) {$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name, int i)
hdf5_save_nd_dataset	util/hdf5.cpp	/^void hdf5_save_nd_dataset<double>($/;"	f	namespace:caffe	signature:( hid_t file_id, const string& dataset_name, const Blob<double>& blob, bool write_diff)
hdf5_save_nd_dataset	util/hdf5.cpp	/^void hdf5_save_nd_dataset<float>($/;"	f	namespace:caffe	signature:( const hid_t file_id, const string& dataset_name, const Blob<float>& blob, bool write_diff)
hdf5_save_string	util/hdf5.cpp	/^void hdf5_save_string(hid_t loc_id, const string& dataset_name,$/;"	f	namespace:caffe	signature:(hid_t loc_id, const string& dataset_name, const string& s)
height	test/test_data/generate_sample_data.py	/^height = 10$/;"	v
height	test/test_data/generate_sample_data.py	/^height = 6$/;"	v
height_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
height_	test/test_hdf5_output_layer.cpp	/^  int height_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
height_	test/test_memory_data_layer.cpp	/^  int height_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
im2col_cpu	util/im2col.cpp	/^template void im2col_cpu<double>(const double* data_im, const int channels,$/;"	p	namespace:caffe	file:	signature:(const double* data_im, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, double* data_col)
im2col_cpu	util/im2col.cpp	/^template void im2col_cpu<float>(const float* data_im, const int channels,$/;"	p	namespace:caffe	file:	signature:(const float* data_im, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, float* data_col)
im2col_cpu	util/im2col.cpp	/^void im2col_cpu(const Dtype* data_im, const int channels,$/;"	f	namespace:caffe	signature:(const Dtype* data_im, const int channels, const int height, const int width, const int kernel_h, const int kernel_w, const int pad_h, const int pad_w, const int stride_h, const int stride_w, Dtype* data_col)
im2col_nd_core_cpu	util/im2col.cpp	/^inline void im2col_nd_core_cpu(const Dtype* data_input, const bool im2col,$/;"	f	namespace:caffe	signature:(const Dtype* data_input, const bool im2col, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, Dtype* data_output)
im2col_nd_cpu	util/im2col.cpp	/^template void im2col_nd_cpu<double>(const double* data_im,$/;"	p	namespace:caffe	file:	signature:(const double* data_im, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, double* data_col)
im2col_nd_cpu	util/im2col.cpp	/^template void im2col_nd_cpu<float>(const float* data_im,$/;"	p	namespace:caffe	file:	signature:(const float* data_im, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, float* data_col)
im2col_nd_cpu	util/im2col.cpp	/^void im2col_nd_cpu(const Dtype* data_im, const int num_spatial_axes,$/;"	f	namespace:caffe	signature:(const Dtype* data_im, const int num_spatial_axes, const int* im_shape, const int* col_shape, const int* kernel_shape, const int* pad, const int* stride, Dtype* data_col)
input_file_	test/test_gradient_based_solver.cpp	/^  string* input_file_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
input_file_name_	test/test_hdf5_output_layer.cpp	/^  string input_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
int_data_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
int_data_2_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
is_started	internal_thread.cpp	/^bool InternalThread::is_started() const {$/;"	f	class:caffe::InternalThread	signature:() const
kBNLL_THRESHOLD	layers/bnll_layer.cpp	/^const float kBNLL_THRESHOLD = 50.;$/;"	m	namespace:caffe	file:
kMillisecondsThreshold	test/test_benchmark.cpp	/^const float kMillisecondsThreshold = 30;$/;"	m	namespace:caffe	file:
kProtoReadBytesLimit	util/io.cpp	/^const int kProtoReadBytesLimit = INT_MAX;  \/\/ Max size of 2 GB minus 1 byte.$/;"	v
label	test/test_data/generate_sample_data.py	/^label = 1 + np.arange(num_rows)[:, np.newaxis]$/;"	v
label	test/test_data/generate_sample_data.py	/^label = label.astype('float32')$/;"	v
label2	test/test_data/generate_sample_data.py	/^label2 = label + 1$/;"	v
label_blob_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const label_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
labels_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const labels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
layer_by_name	net.cpp	/^const shared_ptr<Layer<Dtype> > Net<Dtype>::layer_by_name($/;"	f	class:caffe::Net	signature:( const string& layer_name) const
load_batch	layers/data_layer.cpp	/^void DataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::DataLayer	signature:(Batch<Dtype>* batch)
load_batch	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::ImageDataLayer	signature:(Batch<Dtype>* batch)
load_batch	layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::WindowDataLayer	signature:(Batch<Dtype>* batch)
main	test/test_caffe_main.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
matchExt	util/io.cpp	/^static bool matchExt(const std::string & fn,$/;"	f	namespace:caffe	signature:(const std::string & fn, std::string en)
mean_bound	test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype std)
mean_bound	test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype std, const int sample_size)
mean_bound_multiplier_	test/test_random_number_generator.cpp	/^  Dtype mean_bound_multiplier_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
must_stop	internal_thread.cpp	/^bool InternalThread::must_stop() {$/;"	f	class:caffe::InternalThread	signature:()
mutable_cpu_data	blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_data() {$/;"	f	class:caffe::Blob	signature:()
mutable_cpu_data	syncedmem.cpp	/^void* SyncedMemory::mutable_cpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
mutable_cpu_diff	blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_diff() {$/;"	f	class:caffe::Blob	signature:()
mutable_gpu_data	blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_data() {$/;"	f	class:caffe::Blob	signature:()
mutable_gpu_data	syncedmem.cpp	/^void* SyncedMemory::mutable_gpu_data() {$/;"	f	class:caffe::SyncedMemory	signature:()
mutable_gpu_diff	blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_diff() {$/;"	f	class:caffe::Blob	signature:()
mutex_	util/blocking_queue.cpp	/^  mutable boost::mutex mutex_;$/;"	m	class:caffe::BlockingQueue::sync	file:	access:public
net_	test/test_net.cpp	/^  shared_ptr<Net<Dtype> > net_;$/;"	m	class:caffe::NetTest	file:	access:protected
num_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
num_	test/test_hdf5_output_layer.cpp	/^  int num_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
num_above_mean	test/test_random_number_generator.cpp	/^  int num_above_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
num_below_mean	test/test_random_number_generator.cpp	/^  int num_below_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
num_cols	test/test_data/generate_sample_data.py	/^num_cols = 3$/;"	v
num_cols	test/test_data/generate_sample_data.py	/^num_cols = 8$/;"	v
num_iter_	test/test_data_transformer.cpp	/^  int num_iter_;$/;"	m	class:caffe::DataTransformTest	file:	access:protected
num_rows	test/test_data/generate_sample_data.py	/^num_rows = 10$/;"	v
num_rows	test/test_data/generate_sample_data.py	/^num_rows = 8$/;"	v
on_gradients_ready	parallel.cpp	/^void P2PSync<Dtype>::on_gradients_ready() {$/;"	f	class:caffe::P2PSync	signature:()
on_start	parallel.cpp	/^void P2PSync<Dtype>::on_start() {$/;"	f	class:caffe::P2PSync	signature:()
one	util/cudnn.cpp	/^const void* dataType<double>::one =$/;"	m	class:caffe::cudnn::dataType	file:
one	util/cudnn.cpp	/^const void* dataType<float>::one =$/;"	m	class:caffe::cudnn::dataType	file:
oneval	util/cudnn.cpp	/^double dataType<double>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
oneval	util/cudnn.cpp	/^float dataType<float>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
operator =	common.cpp	/^Caffe::RNG& Caffe::RNG::operator=(const RNG& other) {$/;"	f	class:caffe::Caffe::RNG	signature:(const RNG& other)
output_file_name_	test/test_hdf5_output_layer.cpp	/^  string output_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
peek	util/blocking_queue.cpp	/^T BlockingQueue<T>::peek() {$/;"	f	class:caffe::BlockingQueue	signature:()
pop	util/blocking_queue.cpp	/^T BlockingQueue<T>::pop(const string& log_on_wait) {$/;"	f	class:caffe::BlockingQueue	signature:(const string& log_on_wait)
push	util/blocking_queue.cpp	/^void BlockingQueue<T>::push(const T& t) {$/;"	f	class:caffe::BlockingQueue	signature:(const T& t)
read_one	data_reader.cpp	/^void DataReader::Body::read_one(db::Cursor* cursor, QueuePair* qp) {$/;"	f	class:caffe::DataReader::Body	signature:(db::Cursor* cursor, QueuePair* qp)
ref_blob_top_	test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:	access:protected
ref_blob_top_	test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:	access:protected
ref_blob_top_	test/test_local_conv_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::LocalConvLayerTest	file:	access:protected
replace_cpu	parallel.cpp	/^  replace_cpu,$/;"	e	enum:caffe::Op	file:
replace_cpu_diff	parallel.cpp	/^  replace_cpu_diff,$/;"	e	enum:caffe::Op	file:
replace_gpu	parallel.cpp	/^  replace_gpu,$/;"	e	enum:caffe::Op	file:
replace_gpu_diff	parallel.cpp	/^  replace_gpu_diff$/;"	e	enum:caffe::Op	file:
rng	common.cpp	/^  caffe::rng_t* rng() { return rng_.get(); }$/;"	f	class:caffe::Caffe::RNG::Generator	access:public	signature:()
rng_	common.cpp	/^  shared_ptr<caffe::rng_t> rng_;$/;"	m	class:caffe::Caffe::RNG::Generator	file:	access:private
root_images_	test/test_db.cpp	/^  string root_images_;$/;"	m	class:caffe::DBTest	file:	access:protected
run	parallel.cpp	/^void P2PSync<Dtype>::run(const vector<int>& gpus) {$/;"	f	class:caffe::P2PSync	signature:(const vector<int>& gpus)
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype* const seqs)
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const Dtype* const seqs, const int sample_size)
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const int* const seqs)
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest	access:protected	signature:(const int* const seqs, const int sample_size)
sample_size_	test/test_random_number_generator.cpp	/^  size_t sample_size_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
scale_data	blob.cpp	/^template <> void Blob<int>::scale_data(int scale_factor) {$/;"	f	class:caffe::Blob	signature:(int scale_factor)
scale_data	blob.cpp	/^template <> void Blob<unsigned int>::scale_data(unsigned int scale_factor) {$/;"	f	class:caffe::Blob	signature:(unsigned int scale_factor)
scale_data	blob.cpp	/^void Blob<Dtype>::scale_data(Dtype scale_factor) {$/;"	f	class:caffe::Blob	signature:(Dtype scale_factor)
scale_diff	blob.cpp	/^template <> void Blob<int>::scale_diff(int scale_factor) {$/;"	f	class:caffe::Blob	signature:(int scale_factor)
scale_diff	blob.cpp	/^template <> void Blob<unsigned int>::scale_diff(unsigned int scale_factor) {$/;"	f	class:caffe::Blob	signature:(unsigned int scale_factor)
scale_diff	blob.cpp	/^void Blob<Dtype>::scale_diff(Dtype scale_factor) {$/;"	f	class:caffe::Blob	signature:(Dtype scale_factor)
script_dir	test/test_data/generate_sample_data.py	/^script_dir = os.path.dirname(os.path.abspath(__file__))$/;"	v
seed_	test/test_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::DataLayerTest	file:	access:protected
seed_	test/test_data_transformer.cpp	/^  int seed_;$/;"	m	class:caffe::DataTransformTest	file:	access:protected
seed_	test/test_gradient_based_solver.cpp	/^  int seed_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
seed_	test/test_image_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::ImageDataLayerTest	file:	access:protected
seed_	test/test_net.cpp	/^  int seed_;$/;"	m	class:caffe::NetTest	file:	access:protected
seed_	test/test_random_number_generator.cpp	/^  uint32_t seed_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:	access:protected
set_batch_size	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::set_batch_size(int new_size) {$/;"	f	class:caffe::MemoryDataLayer	signature:(int new_size)
set_cpu_data	blob.cpp	/^void Blob<Dtype>::set_cpu_data(Dtype* data) {$/;"	f	class:caffe::Blob	signature:(Dtype* data)
set_cpu_data	syncedmem.cpp	/^void SyncedMemory::set_cpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory	signature:(void* data)
set_gpu_data	syncedmem.cpp	/^void SyncedMemory::set_gpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory	signature:(void* data)
set_random_seed	common.cpp	/^void Caffe::set_random_seed(const unsigned int seed) {$/;"	f	class:caffe::Caffe	signature:(const unsigned int seed)
share_	test/test_gradient_based_solver.cpp	/^  bool share_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
sigmoid	layers/sigmoid_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe	signature:(Dtype x)
simple_solver_param	test/test_solver_factory.cpp	/^  SolverParameter simple_solver_param() {$/;"	f	class:caffe::SolverFactoryTest	access:protected	signature:()
size	util/blocking_queue.cpp	/^size_t BlockingQueue<T>::size() const {$/;"	f	class:caffe::BlockingQueue	signature:() const
snapshot_prefix_	test/test_gradient_based_solver.cpp	/^  string snapshot_prefix_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
solver_	test/test_gradient_based_solver.cpp	/^  shared_ptr<SGDSolver<Dtype> > solver_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
solver_	test/test_solver.cpp	/^  shared_ptr<Solver<Dtype> > solver_;$/;"	m	class:caffe::SolverTest	file:	access:protected
source_	test/test_db.cpp	/^  string source_;$/;"	m	class:caffe::DBTest	file:	access:protected
sumsq_data	blob.cpp	/^Dtype Blob<Dtype>::sumsq_data() const {$/;"	f	class:caffe::Blob	signature:() const
sumsq_data	blob.cpp	/^template <> int Blob<int>::sumsq_data() const {$/;"	f	class:caffe::Blob	signature:() const
sumsq_data	blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_data() const {$/;"	f	class:caffe::Blob	signature:() const
sumsq_diff	blob.cpp	/^Dtype Blob<Dtype>::sumsq_diff() const {$/;"	f	class:caffe::Blob	signature:() const
sumsq_diff	blob.cpp	/^template <> int Blob<int>::sumsq_diff() const {$/;"	f	class:caffe::Blob	signature:() const
sumsq_diff	blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_diff() const {$/;"	f	class:caffe::Blob	signature:() const
sync	util/blocking_queue.cpp	/^class BlockingQueue<T>::sync {$/;"	c	class:caffe::BlockingQueue	file:
sync_	test/test_gradient_based_solver.cpp	/^  shared_ptr<P2PSync<Dtype> > sync_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
tanh_naive	test/test_tanh_layer.cpp	/^double tanh_naive(double x) {$/;"	f	namespace:caffe	signature:(double x)
targets	test/test_data/generate_sample_data.py	/^targets = np.random.randn(num_rows, 1)$/;"	v
targets	test/test_data/generate_sample_data.py	/^targets = targets.astype('float32')$/;"	v
test_params	test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::MSRAFillerTest	access:protected	signature:(FillerParameter_VarianceNorm variance_norm, Dtype n)
test_params	test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::XavierFillerTest	access:protected	signature:(FillerParameter_VarianceNorm variance_norm, Dtype n)
thread_instance_	common.cpp	/^static boost::thread_specific_ptr<Caffe> thread_instance_;$/;"	m	namespace:caffe	file:
to_cpu	syncedmem.cpp	/^inline void SyncedMemory::to_cpu() {$/;"	f	class:caffe::SyncedMemory	signature:()
to_gpu	syncedmem.cpp	/^inline void SyncedMemory::to_gpu() {$/;"	f	class:caffe::SyncedMemory	signature:()
top_k_	test/test_accuracy_layer.cpp	/^  int top_k_;$/;"	m	class:caffe::AccuracyLayerTest	file:	access:protected
top_k_	test/test_argmax_layer.cpp	/^  size_t top_k_;$/;"	m	class:caffe::ArgMaxLayerTest	file:	access:protected
total_size	parallel.cpp	/^static size_t total_size(const vector<Blob<Dtype>*>& params) {$/;"	f	namespace:caffe	signature:(const vector<Blob<Dtype>*>& params)
total_size	test/test_data/generate_sample_data.py	/^total_size = num_cols * num_rows * height * width$/;"	v
try_peek	util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_peek(T* t) {$/;"	f	class:caffe::BlockingQueue	signature:(T* t)
try_pop	util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_pop(T* t) {$/;"	f	class:caffe::BlockingQueue	signature:(T* t)
weight_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
weight_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer	signature:(const Dtype* input, const Dtype* output, Dtype* weights)
width	test/test_data/generate_sample_data.py	/^width = 10$/;"	v
width	test/test_data/generate_sample_data.py	/^width = 5$/;"	v
width_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:	access:protected
width_	test/test_hdf5_output_layer.cpp	/^  int width_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:	access:protected
width_	test/test_memory_data_layer.cpp	/^  int width_;$/;"	m	class:caffe::MemoryDataLayerTest	file:	access:protected
zero	util/cudnn.cpp	/^const void* dataType<double>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
zero	util/cudnn.cpp	/^const void* dataType<float>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
zeroval	util/cudnn.cpp	/^double dataType<double>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
zeroval	util/cudnn.cpp	/^float dataType<float>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
~AccuracyLayerTest	test/test_accuracy_layer.cpp	/^  virtual ~AccuracyLayerTest() {$/;"	f	class:caffe::AccuracyLayerTest	access:protected	signature:()
~ArgMaxLayerTest	test/test_argmax_layer.cpp	/^  virtual ~ArgMaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ArgMaxLayerTest	access:protected	signature:()
~BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^    virtual ~BatchNormLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::BatchNormLayerTest	access:protected	signature:()
~BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^  virtual ~BatchReindexLayerTest() {$/;"	f	class:caffe::BatchReindexLayerTest	access:protected	signature:()
~BlobMathTest	test/test_blob.cpp	/^  virtual ~BlobMathTest() { delete blob_; }$/;"	f	class:caffe::BlobMathTest	access:protected	signature:()
~BlobSimpleTest	test/test_blob.cpp	/^  virtual ~BlobSimpleTest() { delete blob_; delete blob_preshaped_; }$/;"	f	class:caffe::BlobSimpleTest	access:protected	signature:()
~Body	data_reader.cpp	/^DataReader::Body::~Body() {$/;"	f	class:caffe::DataReader::Body	signature:()
~Caffe	common.cpp	/^Caffe::~Caffe() { }$/;"	f	class:caffe::Caffe	signature:()
~Caffe	common.cpp	/^Caffe::~Caffe() {$/;"	f	class:caffe::Caffe	signature:()
~ConcatLayerTest	test/test_concat_layer.cpp	/^  virtual ~ConcatLayerTest() {$/;"	f	class:caffe::ConcatLayerTest	access:protected	signature:()
~ConstantFillerTest	test/test_filler.cpp	/^  virtual ~ConstantFillerTest() { delete blob_; }$/;"	f	class:caffe::ConstantFillerTest	access:protected	signature:()
~ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^  virtual ~ContrastiveLossLayerTest() {$/;"	f	class:caffe::ContrastiveLossLayerTest	access:protected	signature:()
~ConvolutionLayerTest	test/test_convolution_layer.cpp	/^  virtual ~ConvolutionLayerTest() {$/;"	f	class:caffe::ConvolutionLayerTest	access:protected	signature:()
~CuDNNConvolutionLayer	layers/cudnn_conv_layer.cpp	/^CuDNNConvolutionLayer<Dtype>::~CuDNNConvolutionLayer() {$/;"	f	class:caffe::CuDNNConvolutionLayer	signature:()
~CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^  virtual ~CuDNNConvolutionLayerTest() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest	access:protected	signature:()
~CuDNNLCNLayer	layers/cudnn_lcn_layer.cpp	/^CuDNNLCNLayer<Dtype>::~CuDNNLCNLayer() {$/;"	f	class:caffe::CuDNNLCNLayer	signature:()
~CuDNNLRNLayer	layers/cudnn_lrn_layer.cpp	/^CuDNNLRNLayer<Dtype>::~CuDNNLRNLayer() {$/;"	f	class:caffe::CuDNNLRNLayer	signature:()
~CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^  virtual ~CuDNNLRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNLRNLayerTest	access:protected	signature:()
~CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^  virtual ~CuDNNNeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNNeuronLayerTest	access:protected	signature:()
~CuDNNPoolingLayer	layers/cudnn_pooling_layer.cpp	/^CuDNNPoolingLayer<Dtype>::~CuDNNPoolingLayer() {$/;"	f	class:caffe::CuDNNPoolingLayer	signature:()
~CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^  virtual ~CuDNNPoolingLayerTest() {$/;"	f	class:caffe::CuDNNPoolingLayerTest	access:protected	signature:()
~CuDNNReLULayer	layers/cudnn_relu_layer.cpp	/^CuDNNReLULayer<Dtype>::~CuDNNReLULayer() {$/;"	f	class:caffe::CuDNNReLULayer	signature:()
~CuDNNSigmoidLayer	layers/cudnn_sigmoid_layer.cpp	/^CuDNNSigmoidLayer<Dtype>::~CuDNNSigmoidLayer() {$/;"	f	class:caffe::CuDNNSigmoidLayer	signature:()
~CuDNNSoftmaxLayer	layers/cudnn_softmax_layer.cpp	/^CuDNNSoftmaxLayer<Dtype>::~CuDNNSoftmaxLayer() {$/;"	f	class:caffe::CuDNNSoftmaxLayer	signature:()
~CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^  virtual ~CuDNNSoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNSoftmaxLayerTest	access:protected	signature:()
~CuDNNTanHLayer	layers/cudnn_tanh_layer.cpp	/^CuDNNTanHLayer<Dtype>::~CuDNNTanHLayer() {$/;"	f	class:caffe::CuDNNTanHLayer	signature:()
~DBTest	test/test_db.cpp	/^  virtual ~DBTest() { }$/;"	f	class:caffe::DBTest	access:protected	signature:()
~DataLayer	layers/data_layer.cpp	/^DataLayer<Dtype>::~DataLayer() {$/;"	f	class:caffe::DataLayer	signature:()
~DataLayerTest	test/test_data_layer.cpp	/^  virtual ~DataLayerTest() { delete blob_top_data_; delete blob_top_label_; }$/;"	f	class:caffe::DataLayerTest	access:protected	signature:()
~DataReader	data_reader.cpp	/^DataReader::~DataReader() {$/;"	f	class:caffe::DataReader	signature:()
~DataTransformTest	test/test_data_transformer.cpp	/^  virtual ~DataTransformTest() { }$/;"	f	class:caffe::DataTransformTest	access:protected	signature:()
~DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^  virtual ~DeconvolutionLayerTest() {$/;"	f	class:caffe::DeconvolutionLayerTest	access:protected	signature:()
~DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^  virtual ~DummyDataLayerTest() {$/;"	f	class:caffe::DummyDataLayerTest	access:protected	signature:()
~EltwiseLayerTest	test/test_eltwise_layer.cpp	/^  virtual ~EltwiseLayerTest() {$/;"	f	class:caffe::EltwiseLayerTest	access:protected	signature:()
~EmbedLayerTest	test/test_embed_layer.cpp	/^  virtual ~EmbedLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::EmbedLayerTest	access:protected	signature:()
~EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^  virtual ~EuclideanLossLayerTest() {$/;"	f	class:caffe::EuclideanLossLayerTest	access:protected	signature:()
~FilterLayerTest	test/test_filter_layer.cpp	/^  virtual ~FilterLayerTest() {$/;"	f	class:caffe::FilterLayerTest	access:protected	signature:()
~FlattenLayerTest	test/test_flatten_layer.cpp	/^  virtual ~FlattenLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::FlattenLayerTest	access:protected	signature:()
~GPUParams	parallel.cpp	/^GPUParams<Dtype>::~GPUParams() {$/;"	f	class:caffe::GPUParams	signature:()
~GaussianFillerTest	test/test_filler.cpp	/^  virtual ~GaussianFillerTest() { delete blob_; }$/;"	f	class:caffe::GaussianFillerTest	access:protected	signature:()
~GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^  ~GradientBasedSolverTest() {$/;"	f	class:caffe::GradientBasedSolverTest	access:protected	signature:()
~HDF5DataLayer	layers/hdf5_data_layer.cpp	/^HDF5DataLayer<Dtype>::~HDF5DataLayer<Dtype>() { }$/;"	f	class:caffe::HDF5DataLayer	signature:()
~HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^  virtual ~HDF5DataLayerTest() {$/;"	f	class:caffe::HDF5DataLayerTest	access:protected	signature:()
~HDF5OutputLayer	layers/hdf5_output_layer.cpp	/^HDF5OutputLayer<Dtype>::~HDF5OutputLayer<Dtype>() {$/;"	f	class:caffe::HDF5OutputLayer	signature:()
~HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^  virtual ~HDF5OutputLayerTest() {$/;"	f	class:caffe::HDF5OutputLayerTest	access:protected	signature:()
~HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^  virtual ~HingeLossLayerTest() {$/;"	f	class:caffe::HingeLossLayerTest	access:protected	signature:()
~Im2colLayerTest	test/test_im2col_layer.cpp	/^  virtual ~Im2colLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::Im2colLayerTest	access:protected	signature:()
~ImageDataLayer	layers/image_data_layer.cpp	/^ImageDataLayer<Dtype>::~ImageDataLayer<Dtype>() {$/;"	f	class:caffe::ImageDataLayer	signature:()
~ImageDataLayerTest	test/test_image_data_layer.cpp	/^  virtual ~ImageDataLayerTest() {$/;"	f	class:caffe::ImageDataLayerTest	access:protected	signature:()
~InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^  virtual ~InfogainLossLayerTest() {$/;"	f	class:caffe::InfogainLossLayerTest	access:protected	signature:()
~InnerProductLayerTest	test/test_inner_product_layer.cpp	/^  virtual ~InnerProductLayerTest() {$/;"	f	class:caffe::InnerProductLayerTest	access:protected	signature:()
~InternalThread	internal_thread.cpp	/^InternalThread::~InternalThread() {$/;"	f	class:caffe::InternalThread	signature:()
~LRNLayerTest	test/test_lrn_layer.cpp	/^  virtual ~LRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::LRNLayerTest	access:protected	signature:()
~LocalConvLayerTest	test/test_local_conv_layer.cpp	/^  ~LocalConvLayerTest()$/;"	f	class:caffe::LocalConvLayerTest	access:protected	signature:()
~MSRAFillerTest	test/test_filler.cpp	/^  virtual ~MSRAFillerTest() { delete blob_; }$/;"	f	class:caffe::MSRAFillerTest	access:protected	signature:()
~MVNLayerTest	test/test_mvn_layer.cpp	/^  virtual ~MVNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MVNLayerTest	access:protected	signature:()
~MathFunctionsTest	test/test_math_functions.cpp	/^  virtual ~MathFunctionsTest() {$/;"	f	class:caffe::MathFunctionsTest	access:protected	signature:()
~MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^  virtual ~MaxPoolingDropoutTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MaxPoolingDropoutTest	access:protected	signature:()
~MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^  virtual ~MemoryDataLayerTest() {$/;"	f	class:caffe::MemoryDataLayerTest	access:protected	signature:()
~MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^  virtual ~MultinomialLogisticLossLayerTest() {$/;"	f	class:caffe::MultinomialLogisticLossLayerTest	access:protected	signature:()
~NeuronLayerTest	test/test_neuron_layer.cpp	/^  virtual ~NeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::NeuronLayerTest	access:protected	signature:()
~P2PSync	parallel.cpp	/^P2PSync<Dtype>::~P2PSync() {$/;"	f	class:caffe::P2PSync	signature:()
~PoolingLayerTest	test/test_pooling_layer.cpp	/^  virtual ~PoolingLayerTest() {$/;"	f	class:caffe::PoolingLayerTest	access:protected	signature:()
~PositiveUnitballFillerTest	test/test_filler.cpp	/^  virtual ~PositiveUnitballFillerTest() { delete blob_; }$/;"	f	class:caffe::PositiveUnitballFillerTest	access:protected	signature:()
~PowerLayerTest	test/test_power_layer.cpp	/^  virtual ~PowerLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::PowerLayerTest	access:protected	signature:()
~QueuePair	data_reader.cpp	/^DataReader::QueuePair::~QueuePair() {$/;"	f	class:caffe::DataReader::QueuePair	signature:()
~ReductionLayerTest	test/test_reduction_layer.cpp	/^  virtual ~ReductionLayerTest() {$/;"	f	class:caffe::ReductionLayerTest	access:protected	signature:()
~ReshapeLayerTest	test/test_reshape_layer.cpp	/^  virtual ~ReshapeLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ReshapeLayerTest	access:protected	signature:()
~SPPLayerTest	test/test_spp_layer.cpp	/^  virtual ~SPPLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SPPLayerTest	access:protected	signature:()
~SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  virtual ~SigmoidCrossEntropyLossLayerTest() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest	access:protected	signature:()
~SignalHandler	util/signal_handler.cpp	/^SignalHandler::~SignalHandler() {$/;"	f	class:caffe::SignalHandler	signature:()
~SliceLayerTest	test/test_slice_layer.cpp	/^  virtual ~SliceLayerTest() {$/;"	f	class:caffe::SliceLayerTest	access:protected	signature:()
~SoftmaxLayerTest	test/test_softmax_layer.cpp	/^  virtual ~SoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SoftmaxLayerTest	access:protected	signature:()
~SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^  virtual ~SoftmaxWithLossLayerTest() {$/;"	f	class:caffe::SoftmaxWithLossLayerTest	access:protected	signature:()
~SplitLayerTest	test/test_split_layer.cpp	/^  virtual ~SplitLayerTest() {$/;"	f	class:caffe::SplitLayerTest	access:protected	signature:()
~StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^  virtual ~StochasticPoolingLayerTest() {$/;"	f	class:caffe::StochasticPoolingLayerTest	access:protected	signature:()
~SyncedMemory	syncedmem.cpp	/^SyncedMemory::~SyncedMemory() {$/;"	f	class:caffe::SyncedMemory	signature:()
~TanHLayerTest	test/test_tanh_layer.cpp	/^  virtual ~TanHLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::TanHLayerTest	access:protected	signature:()
~ThresholdLayerTest	test/test_threshold_layer.cpp	/^  virtual ~ThresholdLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ThresholdLayerTest	access:protected	signature:()
~TileLayerTest	test/test_tile_layer.cpp	/^  virtual ~TileLayerTest() {$/;"	f	class:caffe::TileLayerTest	access:protected	signature:()
~Timer	util/benchmark.cpp	/^Timer::~Timer() {$/;"	f	class:caffe::Timer	signature:()
~UniformFillerTest	test/test_filler.cpp	/^  virtual ~UniformFillerTest() { delete blob_; }$/;"	f	class:caffe::UniformFillerTest	access:protected	signature:()
~WindowDataLayer	layers/window_data_layer.cpp	/^WindowDataLayer<Dtype>::~WindowDataLayer<Dtype>() {$/;"	f	class:caffe::WindowDataLayer	signature:()
~XavierFillerTest	test/test_filler.cpp	/^  virtual ~XavierFillerTest() { delete blob_; }$/;"	f	class:caffe::XavierFillerTest	access:protected	signature:()
